{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/images/DST.png","path":"images/DST.png","modified":0,"renderable":0},{"_id":"source/images/EC20 result1.png","path":"images/EC20 result1.png","modified":0,"renderable":0},{"_id":"source/images/EC20 result2.png","path":"images/EC20 result2.png","modified":0,"renderable":0},{"_id":"source/images/EC20 result3.png","path":"images/EC20 result3.png","modified":0,"renderable":0},{"_id":"source/images/EC20 result4.png","path":"images/EC20 result4.png","modified":0,"renderable":0},{"_id":"source/images/Frp-release.png","path":"images/Frp-release.png","modified":0,"renderable":0},{"_id":"source/images/Frp-阿里云安全组配置.png","path":"images/Frp-阿里云安全组配置.png","modified":0,"renderable":0},{"_id":"source/images/GPUdriver.png","path":"images/GPUdriver.png","modified":0,"renderable":0},{"_id":"source/images/GitHub的SSHkey.png","path":"images/GitHub的SSHkey.png","modified":0,"renderable":0},{"_id":"source/images/Github设置pages.png","path":"images/Github设置pages.png","modified":0,"renderable":0},{"_id":"source/images/Q&A 1.png","path":"images/Q&A 1.png","modified":0,"renderable":0},{"_id":"source/images/anaconda_init.png","path":"images/anaconda_init.png","modified":0,"renderable":0},{"_id":"source/images/conda环境变量.png","path":"images/conda环境变量.png","modified":0,"renderable":0},{"_id":"source/images/lsblk参数.png","path":"images/lsblk参数.png","modified":0,"renderable":0},{"_id":"source/images/nvidia&cuda_test.png","path":"images/nvidia&cuda_test.png","modified":0,"renderable":0},{"_id":"source/images/opencv摄像头测试.png","path":"images/opencv摄像头测试.png","modified":0,"renderable":0},{"_id":"source/images/pytorch.png","path":"images/pytorch.png","modified":0,"renderable":0},{"_id":"source/images/siamLAT所需库.png","path":"images/siamLAT所需库.png","modified":0,"renderable":0},{"_id":"source/images/virtualenv常用指令.png","path":"images/virtualenv常用指令.png","modified":0,"renderable":0},{"_id":"source/images/virtualenv报错.png","path":"images/virtualenv报错.png","modified":0,"renderable":0},{"_id":"source/images/virtualenv配置文件修改.png","path":"images/virtualenv配置文件修改.png","modified":0,"renderable":0},{"_id":"source/images/wiringpi.png","path":"images/wiringpi.png","modified":0,"renderable":0},{"_id":"source/images/xming界面.png","path":"images/xming界面.png","modified":0,"renderable":0},{"_id":"source/images/xserver工具测试.png","path":"images/xserver工具测试.png","modified":0,"renderable":0},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/butterfly-icon.png","path":"img/butterfly-icon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/error-page.png","path":"img/error-page.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/2025-06-01-4G模块EC20.md","hash":"2f5eaff5d82519b2f69163b3d74cf4636d217394","modified":1760117353940},{"_id":"source/_posts/2025-06-01-AI的智慧.md","hash":"5b7aaf58de650fe864f33da8237dc26605e9396d","modified":1760117353964},{"_id":"source/_posts/2025-06-01-Conda.md","hash":"790bc53fb35af10ed9a8421d2a3c8a18a7586d43","modified":1760117353988},{"_id":"source/_posts/2025-06-01-Github-QA.md","hash":"cc7c8de0b381b2b4f9fc1f0f71d3ab7577abdcc7","modified":1760117354012},{"_id":"source/_posts/2025-06-01-Jupyter-QA.md","hash":"3e6e5edc409c9f05d05d1c4c99aa73b7ede3a00a","modified":1760117354036},{"_id":"source/_posts/2025-06-01-OpenCV-QA.md","hash":"642d56da8780500f38af0f267b4c446837176b65","modified":1760117354084},{"_id":"source/_posts/2025-06-01-Python-QA.md","hash":"b513cc73eb774e3e055a21f26c1a58418c693f2d","modified":1760117354108},{"_id":"source/_posts/2025-06-01-Pythonpip.md","hash":"ac4537bcee2d9bf1a99fe0b262322bc9acc77a8c","modified":1760117354132},{"_id":"source/_posts/2025-06-01-Python包管理器pip-QA.md","hash":"41dbb10be004d5cb682ddf0c6a9b4b467d31eb83","modified":1760117354152},{"_id":"source/_posts/2025-06-01-QA-问题及解决方法.md","hash":"d97af44176d5f40f3c4f1a88ef1ee8bf88ea782b","modified":1760117354180},{"_id":"source/_posts/2025-06-01-SSH.md","hash":"56d13c99d98a4439e722826a2ea46e04cbdde1c4","modified":1760117354204},{"_id":"source/_posts/2025-06-01-Vim-QA.md","hash":"85b50baa657aa1edd74b03cf37af0e20dbbb3f85","modified":1760117354228},{"_id":"source/_posts/2025-06-01-Voicemeeter-Banana.md","hash":"7c2b0ad298cba3253d4c87c1bf98a474e032c8ed","modified":1760117354256},{"_id":"source/_posts/2025-06-01-WSL.md","hash":"0ba9fcc68baf52222fc8e6a2a70970d1959672b4","modified":1760117354280},{"_id":"source/_posts/2025-06-01-mubu的毕业设计工作日志.md","hash":"7471d7834f1a25d93794f999b57512267da9e79a","modified":1760117354060},{"_id":"source/_posts/2025-06-01-会话管理Screen.md","hash":"c9df73ce44191b23b8de96c0615bd17758ce3551","modified":1760117354304},{"_id":"source/_posts/2025-06-01-会话管理Tmux.md","hash":"f3c88a5b5d7564fddd234604eb17371074229354","modified":1760117354328},{"_id":"source/_posts/2025-06-01-修改时间.md","hash":"73b118ee05c6b61b01d9b802ea3e0926b96109ae","modified":1760117354356},{"_id":"source/_posts/2025-06-01-内网穿透AutoSSH.md","hash":"2333eb581d380727fe4e272166bbddecc20d5fef","modified":1760117354380},{"_id":"source/_posts/2025-06-01-内网穿透Frp.md","hash":"058914d7f4f8ba6f1faa5eae027fb22ae27851be","modified":1760117354404},{"_id":"source/_posts/2025-06-01-开启休眠模式.md","hash":"92419534c517044292611b79a124cf8572472420","modified":1760117354428},{"_id":"source/_posts/2025-06-01-摄像头相关.md","hash":"dfc84dd0d333e76a411ec882f8f139fb8909bbf2","modified":1760117354452},{"_id":"source/_posts/2025-06-01-更新香橙派内核.md","hash":"453495cb79807a3e92964e4bede0a1470ebacadf","modified":1760117354476},{"_id":"source/_posts/2025-06-01-杂项.md","hash":"d019daabf7b1893fa3cb3b7f95361e0ce1c24c25","modified":1760117354500},{"_id":"source/_posts/2025-06-01-树莓派-QA.md","hash":"92a88559fefdf71c9bfdb921bd69b53ee0c1a254","modified":1760117354524},{"_id":"source/_posts/2025-06-01-树莓派摄像头.md","hash":"ea94bffe6eae886102df17cf959eab1779127d33","modified":1760117354548},{"_id":"source/_posts/2025-06-01-消息传递并行MPI.md","hash":"dd317ade12e260808501f95644a5c1e8a7549303","modified":1760117354572},{"_id":"source/_posts/2025-06-01-深度学习相关.md","hash":"1aec547d7a4403256b45237939edfde1b208ee0d","modified":1760117354592},{"_id":"source/_posts/2025-06-01-系统包管理器apt-QA.md","hash":"e9b136a5946394a10386240fc22c8518e105bc0f","modified":1760117354616},{"_id":"source/_posts/2025-06-01-系统相关.md","hash":"5f89a179b97545f1f142895928d567f25c777a4d","modified":1760117354644},{"_id":"source/_posts/2025-06-01-记录.md","hash":"1b6a72883563ce865d090dab855a28d577f4a2a1","modified":1760117354668},{"_id":"source/_posts/2025-06-01-集群管理Ansible.md","hash":"a4d6d247a12c5b6680bc870b37a4a75464122fd6","modified":1760117354692},{"_id":"source/_posts/2025-06-01-静态博客Hexo.md","hash":"a24eeac35ef578e394b2dfb9cfd6f3c56443db79","modified":1760117354716},{"_id":"source/_posts/2025-07-12-在Linux系统中查看进程.md","hash":"83068ae1c3d2eb66d6f358addc089778b756cc70","modified":1760117354740},{"_id":"source/_posts/2025-07-16-DST服务器.md","hash":"f0f03cbe2a6e7f36c38685dd1e212963bf895d52","modified":1760117354764},{"_id":"source/_posts/2025-07-21-Zotero.md","hash":"eab86537b42179e0b880bf346263c369d6c37e21","modified":1760117354788},{"_id":"source/_posts/2025-07-23-香橙派相关.md","hash":"99cc0c62f708438974294702df6892d4c214269b","modified":1760117354812},{"_id":"source/_posts/2025-07-24-Conda-QA.md","hash":"1310d74ed490e462d9beabe636fba2c4d647f154","modified":1760117354836},{"_id":"source/_posts/2025-07-30-杂项.md","hash":"d3b9500d1d7a873f4c1377500ed695a9c3e73495","modified":1760117354860},{"_id":"source/_posts/2025-07-30-目标跟踪结果对比工具.md","hash":"092daf7da14de0176743bb7c0320a9937057eb03","modified":1760117354888},{"_id":"source/css/custom.css","hash":"39bf67f67da81c1daf88597fc869b6fe496ec237","modified":1760034983023},{"_id":"source/images/EC20 result1.png","hash":"369ae8b4848c6e866a531d055f4d15581cc9522f","modified":1759949252144},{"_id":"source/images/EC20 result2.png","hash":"0397f4ec6adb1f2289f0ed9085dfee8c37b3bcf1","modified":1759949252168},{"_id":"source/images/EC20 result3.png","hash":"5889d0ee22d8b6e14f5a43f6f3897f9a450c44f9","modified":1759949252192},{"_id":"source/images/EC20 result4.png","hash":"1ff5ae348240d039986455a3b23a9d4976011e23","modified":1759949252216},{"_id":"source/images/Frp-阿里云安全组配置.png","hash":"573940795c713625b5e7a13bc5e6692798ec7ffb","modified":1759949252268},{"_id":"source/images/GPUdriver.png","hash":"5cffe5907eaba61391672d5fa2aa838f40111d52","modified":1759949252344},{"_id":"source/images/anaconda_init.png","hash":"f97c4626f29338ba50d763b7eeb327ae576e1c7d","modified":1759949252076},{"_id":"source/images/conda环境变量.png","hash":"0c96723554918937df9fec00bbd06556ec3004d5","modified":1759949252100},{"_id":"source/images/lsblk参数.png","hash":"ff92ef2f7d0bf4385db1c1aa6dc15312b3f015ce","modified":1759949252368},{"_id":"source/images/nvidia&cuda_test.png","hash":"90c527a2115159b536763e84a9a471345f0cc3bf","modified":1759949252392},{"_id":"source/images/opencv摄像头测试.png","hash":"6da55f18832bfa169b009a61c0b1bb9ff6f5b453","modified":1759949252420},{"_id":"source/images/pytorch.png","hash":"576be3476ad1d63b4fd24a70008e1952522e83c6","modified":1759949252448},{"_id":"source/images/siamLAT所需库.png","hash":"8744d6f54b969da3552c1c8653a8f7c2ea599786","modified":1759949252528},{"_id":"source/images/virtualenv常用指令.png","hash":"2741f550da854267a7d0079caeb2059246322970","modified":1759949252552},{"_id":"source/images/wiringpi.png","hash":"bac1fe5a95a56255b6e12e477f9b1eb1209f2bf8","modified":1759949252636},{"_id":"source/images/xming界面.png","hash":"ad6b0f7a039e81db095a6d1b9777808e70fb8924","modified":1759949252660},{"_id":"source/images/DST.png","hash":"f33965734745030e3f617baef5b2105b03168526","modified":1759949252124},{"_id":"source/images/Frp-release.png","hash":"ce665f2cbd7d7ce1558a17a439dd4efcd34e7576","modified":1759949252248},{"_id":"source/images/GitHub的SSHkey.png","hash":"419505259ab29f984f477f7c4e87659fea60fb5b","modified":1759949252296},{"_id":"source/images/Github设置pages.png","hash":"564a98667ea251c55f679eb9601d4310bd29588c","modified":1759949252324},{"_id":"source/images/virtualenv报错.png","hash":"a7d0c59026b762aa3ff2ee72400faa860b594074","modified":1759949252580},{"_id":"source/images/virtualenv配置文件修改.png","hash":"c9fdcf1d1831e45b42e6631c75179de682988ee8","modified":1759949252608},{"_id":"source/images/xserver工具测试.png","hash":"39d7ae86985ba65e0d133654fc958106d670bca5","modified":1759949252692},{"_id":"source/images/Q&A 1.png","hash":"761f381f22ce5e5fdf995906126369ccc1a91198","modified":1759949252504},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1760117417758},{"_id":"themes/butterfly/README.md","hash":"d67b31fceac787d415a441f7eafc1832e8be7869","modified":1760117417774},{"_id":"themes/butterfly/README_CN.md","hash":"5595df16d0b28133a232cb5f45bbcf60798073e9","modified":1760117417770},{"_id":"themes/butterfly/_config.yml","hash":"43bcfcf611b6b47fa6601bc088506bc2058ad81d","modified":1760117417814},{"_id":"themes/butterfly/package.json","hash":"19442f97e7e5ccd6e70af89c14dd3dbf02767302","modified":1760117417770},{"_id":"themes/butterfly/plugins.yml","hash":"285f5da900103a0289b1e484578df08795a28b94","modified":1760117417758},{"_id":"themes/butterfly/.github/FUNDING.yml","hash":"bcc350ceddc464e64439af66d99a1c3bc7676130","modified":1760117417758},{"_id":"themes/butterfly/languages/default.yml","hash":"97e89708bea9740e7e156b53304d7f4697f6332d","modified":1760117417814},{"_id":"themes/butterfly/languages/en.yml","hash":"6d2a5795862abc121a164e8519e7587bb57af7c7","modified":1760117417814},{"_id":"themes/butterfly/languages/ja.yml","hash":"d97b97ebb8a1c8754373b450d4e81341b5dcd208","modified":1760117417814},{"_id":"themes/butterfly/languages/ko.yml","hash":"4a959730509b211484b20d9fcabc80a9c7e8cc1f","modified":1760117417814},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"25e717994a3eab37ccb9cf3ae5fec5647b525ced","modified":1760117417814},{"_id":"themes/butterfly/languages/zh-HK.yml","hash":"e2958e5b72fd2cb33b6706bc1588de6b8d9dde8f","modified":1760117417814},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"af38319aa58cab193f90ef8caecdb9a26cdd165a","modified":1760117417814},{"_id":"themes/butterfly/layout/archive.pug","hash":"bc77220dfc269b8faad0930e1a4142ebf68165e5","modified":1760117417810},{"_id":"themes/butterfly/layout/category.pug","hash":"a7e9805a781e34e38d27462e6ce2a5821c34bb9f","modified":1760117417774},{"_id":"themes/butterfly/layout/index.pug","hash":"a93004cc8ec8050df603d32a6e6e02cd96fd9875","modified":1760117417774},{"_id":"themes/butterfly/layout/page.pug","hash":"7ce2a49c6c41847de4ccea377ade116339984434","modified":1760117417774},{"_id":"themes/butterfly/layout/post.pug","hash":"65c4a49c65c3fc4d9dc88b9791a75710c698c3a1","modified":1760117417774},{"_id":"themes/butterfly/layout/tag.pug","hash":"ca5333bd262cb58c195c844b593a0eed0c721766","modified":1760117417774},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"10ce05c8dbde09f53bdabe40b5388de9ccc71a31","modified":1760117417758},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"63ad2249ad09fb3fe21bd5ff9adefb304a7ab24a","modified":1760117417758},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1760117417758},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1760117417758},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1760117417758},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"e1611a30df80cbe7ecf60be2e0cdd816ecabdd03","modified":1760117417798},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"da95d64f44e1e6b516d1f96f57b4b0a537c29c19","modified":1760117417810},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"1d11e334b22dbbedcb0f751f9ee9789d4416605e","modified":1760117417798},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"e5e6c05a621483b3542f2884e8ba45e84b1e973a","modified":1760117417778},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"062137cb4d078b27680da1ae28d524a9c963eebc","modified":1760117417806},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"3617840416f26078117f760579fb544dce07e1bc","modified":1760117417782},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"3e65b7bf6bccccbba7e15349f0a44f15c64c5b5e","modified":1760117417806},{"_id":"themes/butterfly/scripts/common/default_config.js","hash":"6ca5a7588e49a96103e206db12683fc3b8f3822b","modified":1760117417762},{"_id":"themes/butterfly/scripts/common/postDesc.js","hash":"ba98361b9d469076bfb045e5ff42eaf764a38fb1","modified":1760117417762},{"_id":"themes/butterfly/scripts/events/404.js","hash":"039fc75f363d79669b0b2177d929cdff6f2ef7a4","modified":1760117417762},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"7864ba45716c51aef8d8b04fd4bc212e0008ce3b","modified":1760117417762},{"_id":"themes/butterfly/scripts/events/init.js","hash":"19d0832078201746afb2508a1f463d7cae26dae0","modified":1760117417762},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"bac639c404588ea62e601ef0bcd368c3bd0119af","modified":1760117417762},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1760117417762},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"f96ccb349501dd2a268f1b64861600e3dc15e4e8","modified":1760117417766},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"20a6ebf63439501a4b3fc81e7a2a2ea5d103bace","modified":1760117417766},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"d2878483c160999240e969a34e3ddc51a780821b","modified":1760117417766},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"0cdf781a8c14d7b50d309e69f282ec7b178804bb","modified":1760117417762},{"_id":"themes/butterfly/scripts/helpers/getArchiveLength.js","hash":"bf77635e920eaf52bceebc95f87c7c87a7ca8038","modified":1760117417762},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"00c5742ad1c75b3c5684d02ffc6a1921399e5376","modified":1760117417766},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"25f7a5ce29fdab3b71a78788416e19276b6e2ac7","modified":1760117417762},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"950b7d0966429bf0f9e6c5e1161e50e545e320b4","modified":1760117417766},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"45367c4ce827329867dbcc750ec125da9ccb2cfd","modified":1760117417762},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"2f44e1b3ccd170b256eae178299d6fa933a8d490","modified":1760117417766},{"_id":"themes/butterfly/scripts/tag/chartjs.js","hash":"195ba802d7e8406c155124a9c939a2318f82938b","modified":1760117417766},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"25eefe10189caf3910a0e5d5b2f2043ae9255531","modified":1760117417770},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"fa3d0a64f7fce4aff7928d4ddd95548978ba001c","modified":1760117417766},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"1ebe936e202c1baee8f6b7862a431e43db807229","modified":1760117417770},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"89c6c78d2db43b190055d5690741a79bab4f3e7e","modified":1760117417770},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"cf0bc17d0180231167cc6aa8a00fc64f198cb9f9","modified":1760117417770},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"50d8d8fac5c5b6e26317028895d7d82a2cf46606","modified":1760117417766},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"e68d8d21f3a86e3646907a3685550ee20e8d4a9f","modified":1760117417770},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"f2f8a789967cda9559778b1936233dfb46a1f3a3","modified":1760117417770},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"40bc9a065e3a1423e0e66f4911e00713ca9f5e9e","modified":1760117417766},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"3c486b149e28edd1a06843f05a5c355000991b82","modified":1760117417770},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"176804f07567aa80f1ed95897a968a996b155dec","modified":1760117417770},{"_id":"themes/butterfly/source/css/index.styl","hash":"b13d96924a5534bff91d75566b196ac87b4fac22","modified":1760117417746},{"_id":"themes/butterfly/source/css/var.styl","hash":"41e5eb8c62fdf6ba12c98d026d6f26f08a4380e2","modified":1760117417750},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1760117417726},{"_id":"themes/butterfly/source/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1760117417726},{"_id":"themes/butterfly/source/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1760117417726},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1760117417722},{"_id":"themes/butterfly/source/js/main.js","hash":"1b6109e354afddbde858a30a6733e898993e9cac","modified":1760117417758},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"0561cc5c3d252d9b9b0d04a553028e9450965b6b","modified":1760117417754},{"_id":"themes/butterfly/source/js/utils.js","hash":"f32e69a6e624ab224729b446f096da96ec263934","modified":1760117417758},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"e93a36d3c29b5a02c7f26a23f96e1f84b063cbe8","modified":1760117417802},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c2156c77a011b20fafd34f03ca073397c21b099f","modified":1760117417802},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"f1d3552f7cebe1e9e89804b0c0fed47d3f6969ca","modified":1760117417802},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"56a3c32de1a15627ff38c67f1131cdd6ec5ac924","modified":1760117417802},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1760117417802},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"1e1a69aa2cbda2e621c741b3802093244b3cc04e","modified":1760117417802},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"83ed05ef1e39f2ee70c3fba2cf96e488d8ffec66","modified":1760117417802},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1760117417802},{"_id":"themes/butterfly/layout/includes/head/structured_data.pug","hash":"49db40e9d3edcf6323e6fe7c074ab09e41453c82","modified":1760117417806},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"44331c9db74b281b5c5c41439d3407a9076df1a1","modified":1760117417810},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"733184f88e3a586a5fcc9d193ad500556b6c8eed","modified":1760117417810},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"f478a82ba4c15d4f6a5db38eca5c61f7054fa71d","modified":1760117417810},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"7d799c4694adb6e265e3f4b975d7f7f6a7021a17","modified":1760117417810},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"e2d31e0f450ad42c47f7ee96375799342bf2f19b","modified":1760117417810},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"d4d266eced4b9167bed86bcc5addc327f78cbdcc","modified":1760117417810},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"d76ce71ba106e350670c021a3dcae57547d01830","modified":1760117417810},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"9d2d539555bab495959b9df734ed5c43a9f9e5a9","modified":1760117417810},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"ef7afe0df7a3746744ac8185da7163b7406120ca","modified":1760117417806},{"_id":"themes/butterfly/layout/includes/mixins/indexPostUI.pug","hash":"f3389fa9ae4fa32e3c16573286583bc3023e57ad","modified":1760117417806},{"_id":"themes/butterfly/layout/includes/page/404.pug","hash":"15d32c511e4875066fcbe9cb84c3ada07b5a7c41","modified":1760117417806},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1760117417806},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"efb40388e37cca0b5e7c3c66e811a42f8d32c910","modified":1760117417806},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"6b0fa5f048aca8e9cbe56978301af918cf7ac34a","modified":1760117417810},{"_id":"themes/butterfly/layout/includes/page/shuoshuo.pug","hash":"2461305d85c329dc2d77b126dfd5c66853925697","modified":1760117417806},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"79ad31eb72a9e14007770b18a426406a25315b38","modified":1760117417806},{"_id":"themes/butterfly/layout/includes/post/outdate-notice.pug","hash":"b7ce9484bc5c97ea6154f0b78fb9b8951fafedbd","modified":1760117417778},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"b96c232e5178d927987791d9ae386dd83679535a","modified":1760117417778},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"db92f25ff3fd061882f81bf74ca560ff66983a0c","modified":1760117417778},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"ed79fef5b5025415ea12eaed970f3fe7f6ef9596","modified":1760117417790},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"43014bfc63583d3ee8808d526dd165848c0ed52f","modified":1760117417790},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"dc2d36c6ccf5ad1b5f115c443772764f58a87fd6","modified":1760117417790},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"88f979a0b1a19eeb0db229247833bf9c6865c3b9","modified":1760117417790},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"236c3ce26dd76e80b04d457789475c42da5ac0c8","modified":1760117417794},{"_id":"themes/butterfly/layout/includes/third-party/umami_analytics.pug","hash":"c912959307b5e968df9b96fdef560ba8f3da19c5","modified":1760117417794},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1760117417774},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1760117417774},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1760117417778},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"1aba8aa7cd767dc96879d13a13b4c8ceb9023233","modified":1760117417778},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1760117417774},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1760117417778},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"d8753772889b5d0f4d15639ed6af5e91e53b1d03","modified":1760117417774},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"e0bb72fa0ce15964b11b8fe421cae3432394e35f","modified":1760117417778},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"1dd19a564320d248dbcee7f118a5b96c6466da65","modified":1760117417774},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1760117417774},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"f7e69cb0cb8dfe9445a15854604a6f9189338615","modified":1760117417774},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1760117417774},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"fcddd80cdeb6aa81f342cd9f0102302f6ba087a8","modified":1760117417774},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"45f620cd87b9ef2aa9d1e024e697ed6b4eecff34","modified":1760117417774},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"9a7d1427cdf2f9fb7031eafcc651f63ac3eac7b0","modified":1760117417734},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"9426ab6c6fe84a76582dcb4e7762385c7c0a47f4","modified":1760117417734},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"67062d597408068e4a59e95851e98fed34b745da","modified":1760117417730},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"a51edfd3e499e7d38c32241c40e8e4d371efca73","modified":1760117417730},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"1cb1c5fcdefc55aab674d7d84d057151f8f76577","modified":1760117417746},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"4cc02bcbaa4a1933a82a9ea57a603fe2d059fc77","modified":1760117417742},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"fbfce4d67cacd1df22fb73d89d008693f59d9d91","modified":1760117417746},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"5692bcf8929f7ef12b10d860da6cb90ca55752c0","modified":1760117417746},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"7536c44e78115559a996d0384adec38b78d8dc25","modified":1760117417746},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1760117417746},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"7d7554573c005399bc8c2264a85896d2d51be1e1","modified":1760117417742},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"543eaf9c7df7e0db841e5946ee5f9082c3c46290","modified":1760117417746},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"ef8e8549fe7ad4b99793844a93b4a89f77f417d5","modified":1760117417742},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"dcf24780ec6f1a3bf4a277d79d6287b9e65dbbe4","modified":1760117417746},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"d4e8a938ef2a1f4bf895d187e4fa529c7476e238","modified":1760117417742},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"e22bc88ab369c362905b29514d585b1d6bbfc5f3","modified":1760117417742},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"0af7c8754f04bdd9a02a14d880774753bd2e35ee","modified":1760117417742},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"446cb0cebe2e4d0bbf055a57caaed0125f4b78e7","modified":1760117417754},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"ad66212554468b7067590308ed4cf40524fea662","modified":1760117417754},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"205ccc7d0ec6ce1193b46bc0c9ce0385594581fb","modified":1760117417746},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5abe5480d83ff8b452a780a484d50a44091475bf","modified":1760117417750},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"c4cda7b0c99015df29ce00fdfddd2f7679653754","modified":1760117417746},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"1a1766f8ea6a6576ec6129887e55221f540b9358","modified":1760117417750},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"1f8d715faf3b91b53426e38195c0920afb3bfa1c","modified":1760117417750},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"fc26e980fedde31644ebf878967f66ef9ba32be2","modified":1760117417750},{"_id":"themes/butterfly/source/css/_page/shuoshuo.styl","hash":"a764c44ce1f17f966b2f439762f038570af00b1b","modified":1760117417750},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"4681a9d93a20b8de9f58cdbc794702f76f35192b","modified":1760117417750},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"f6d0cfb510a0e351ec20b043d3d3784d0f6c96a4","modified":1760117417754},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"5a8a181324a2f6b7d8240ea871971444403fa554","modified":1760117417754},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"d33d4af89231f4b0f1300bf2e9725344b4fab969","modified":1760117417754},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"f3fd3c43f16606a7b956fcb94b0d975b2d705fff","modified":1760117417742},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"30d1f809efd252ed0233d96d4374efd2b01d2292","modified":1760117417738},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1760117417738},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"77cdcf374761800e638d7d39205a0becb1052011","modified":1760117417734},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"3be8d0a75e7cc96548667cae0cb6a474279bd0b5","modified":1760117417738},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"e84f1de06b818557cc4c45f9958121952ae268b8","modified":1760117417738},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"db2e94a2dd24a2777c9a74b35f98c11d71488003","modified":1760117417738},{"_id":"themes/butterfly/source/css/_tags/series.styl","hash":"0657169849bc4bf4d93b5492ade040c8f58c1901","modified":1760117417738},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"3a88eedcb694da79e92581ce50cb1a430b1fb615","modified":1760117417738},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"e846ddaef494d46cdfa2379deacfe74fa1cc5264","modified":1760117417742},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1760117417750},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"13f37791badfb942f639cc25092ee32d43de31bf","modified":1760117417754},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"4adfe4087d8350a1188135a32a3bf76c6b305787","modified":1760117417754},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"7df4d27cf9e576c6b9c1e4f76a100a41749ca8bb","modified":1760117417790},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f0a90d8e39915a74b16ef22e851f179415cd7eaa","modified":1760117417790},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"b03ee8625149191f9d5d057bbc9824b68d8dd0c4","modified":1760117417790},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d6fff5a7f84c8b09f282f9ddc0020a68a8aac9ea","modified":1760117417786},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"cbfbcf34a24d21ba2b21cf9eedb76f4c3c563c5a","modified":1760117417786},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1760117417786},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1760117417786},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"be45b522286bbc64724341f23a5056ad24d3f796","modified":1760117417786},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"7884883ec15792f7e54daacb3c62b851dde2b66a","modified":1760117417790},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"fd2320ee25507bb8ef49f932c2d170586b44ea4d","modified":1760117417786},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"5b29badecbbe828112c001156023fc0566045cf6","modified":1760117417798},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"24d094fd917947c0ca7492fa094328b1a183b873","modified":1760117417798},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"e8438941085def0591a72fc9b0d705dbf107f54f","modified":1760117417798},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"62466b251052cae609b6369d4cb4b6a85320757d","modified":1760117417798},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"89c63a5f0c0ab6314de7158fbc8fcbc84997fc55","modified":1760117417782},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"f2ea5249b3e6670f6c8c77868f4f42c502e43830","modified":1760117417782},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"c81fa7d8a5cb96d1ae07bfa8c46b84a58161add1","modified":1760117417782},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"8af585e6d6f73ee57114eefad574dc6e8ea9f570","modified":1760117417782},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"592b2251db6c1abeb8b0eebe3b2e6d9aa0dec445","modified":1760117417782},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"58914c58a190e3bc0aa37cb581e77e442b563501","modified":1760117417782},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"332b532bafbaf369fde840883b77e5a23d050a39","modified":1760117417782},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1760117417782},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"30a7d157890de69deab28baa47fb7bb28b040efd","modified":1760117417782},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"24f18b0c67803210d53abbf9c1d454c000b06eee","modified":1760117417782},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"e2bf15357485cd502414b3b20f5b1f762a2fd014","modified":1760117417782},{"_id":"themes/butterfly/layout/includes/third-party/math/chartjs.pug","hash":"732eb1118ea1a73aa5c164d639097c614f8e9953","modified":1760117417798},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"af66d13204030d47537b9e31a6173e63589ce7ff","modified":1760117417798},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"b83db9fa64d42a0bfd97efb660e09be3f166a144","modified":1760117417798},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"cb5c8b0f2ac19a732ab78e26020dd5c8c70c0642","modified":1760117417798},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"ca2fc5928ca292f29fd8333c73733344994096fb","modified":1760117417798},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"187302dbc916852ff2fdf47061e272c061611dda","modified":1760117417794},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/common.pug","hash":"27fa75affebc6e84a487c62bceff783bde595256","modified":1760117417794},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"fa4b4194749d05f7249f365f2b89c0281057ce54","modified":1760117417790},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"72e2970b23570e308f8af5d8ba8e5e3321d01bbf","modified":1760117417794},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"a7c07dbc1e970a5b247091458e1ee9b144a3366d","modified":1760117417794},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"34edfebf0cace0852806be774910ccb0e0914650","modified":1760117417790},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"d2e12a9fc302a4efe52c90d44896fbd73e193a1f","modified":1760117417790},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d376ec17fb19fcdcf0d2ad71330190146d3af879","modified":1760117417794},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"ec6c685080634ac46ffbea1b8f10313388888f43","modified":1760117417794},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"c34c1b19b3cfe24ca11c5edfb34613507a9a00c7","modified":1760117417786},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"013756ff3363344987cc00fc9bd833baf193c341","modified":1760117417786},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"f8557548d2ad8dd149c562193991c6c6cda02415","modified":1760117417786},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"70364f4a9d9f13d713533a0fe0a9798707f1c1b3","modified":1760117417786},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"f5ee1c9c8ffa4bca972d30f4de69268b8d47f052","modified":1760117417786},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"e51e896ccb13900de38dc81cf44dc789e2418a12","modified":1760117417786},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"efef352c1d122409575386bf3894dce8e87032e2","modified":1760117417786},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"9f02598b5e4296aec6470639d4bac4c9ac46392e","modified":1760117417730},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"ef52ebf1e8e751a412f9456fdaeee7d88afd9a72","modified":1760117417730},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"077ec530831be1d80e93da380406b9f5abd0918a","modified":1760117417734},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"1883c91d43bff10aae55122a21e0b064b6f5c9dd","modified":1760117417734},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"de4bb5fc2dfca368b35e4c1109c92f7abc9e2245","modified":1760117417730},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"53d99831f29aeb2e336ed1407d79590041f77002","modified":1760117417782},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"ea9766439b6b1936306916a8b08d2681afbc8ea9","modified":1760117417782},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"9d84a681289175dec75a85f301d2fc9ce1b2bb7a","modified":1760117417782},{"_id":"themes/butterfly/source/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1760117417726},{"_id":"public/css/custom.css","hash":"39bf67f67da81c1daf88597fc869b6fe496ec237","modified":1760117475531},{"_id":"public/4g模块—ec20/index.html","hash":"3c36babd1d6284340784727616c09ec28dba03b1","modified":1760117475531},{"_id":"public/ai的智慧/index.html","hash":"3d854dbb8e762ef088224f34d7e7e42dab4490c2","modified":1760117475531},{"_id":"public/conda/index.html","hash":"69cb127e482ea7e725b874fb71ea7e09098bbbf5","modified":1760117475531},{"_id":"public/github-q&a/index.html","hash":"eb0d0d68f8aad84eb657874fc6c50e0d0b2ccae5","modified":1760117475531},{"_id":"public/jupyter-q&a/index.html","hash":"97f325a6b70d6f2c7b1a283186eaaab881d7bce5","modified":1760117475531},{"_id":"public/opencv-q&a/index.html","hash":"d6aa1a4166c1db3e135045cb2c9b7478ad2bbd30","modified":1760117475531},{"_id":"public/python-q&a/index.html","hash":"06a5cc7ff0f16bd32db6527cc4ae7cf23c38da6a","modified":1760117475531},{"_id":"public/python&pip/index.html","hash":"ac0c2c894cb00080badbc4b51e89b95e3698271e","modified":1760117475531},{"_id":"public/python包管理器pip-q&a/index.html","hash":"ddf0a03ec6394b8af66783e11e9565675c6e4a9a","modified":1760117475531},{"_id":"public/q&a-问题及解决方法/index.html","hash":"ecbd8c8f90863fe79c6a3dc48edf87402caf3e4b","modified":1760117475531},{"_id":"public/ssh/index.html","hash":"e34e417f35d2e3dbfa096e1acce0311100cc1101","modified":1760117475531},{"_id":"public/vim-q&a/index.html","hash":"fb4fe1135cbec78547ca964de616ba6b607d1aba","modified":1760117475531},{"_id":"public/voicemeeter-banana/index.html","hash":"ddf8d1de50faab598ffb1e9eaa1d76882d943ef3","modified":1760117475531},{"_id":"public/wsl/index.html","hash":"fcdaf9725f6df7f72d6b73ec8eb9d1bbc0e8361f","modified":1760117475531},{"_id":"public/mubu的毕业设计工作日志/index.html","hash":"55713943d28c1af4605321b756221e5fa2a58040","modified":1760117475531},{"_id":"public/会话管理—screen/index.html","hash":"7fb04bd8be02826000e913e3ab53b3980c82418d","modified":1760117475531},{"_id":"public/会话管理—tmux/index.html","hash":"c1e1749b77f7869b11fd17f8c9e7d4ff4ccf8de7","modified":1760117475531},{"_id":"public/修改时间/index.html","hash":"24ca6768e6260b74344a2832dcf229bcd8d02cc5","modified":1760117475531},{"_id":"public/内网穿透—autossh/index.html","hash":"0755ba3a8911a6a4ba72d9b72b590a063e37a79d","modified":1760117475531},{"_id":"public/内网穿透—frp/index.html","hash":"ac8261aae791d1e835c64ddbe10ae7c15138e4c6","modified":1760117475531},{"_id":"public/开启休眠模式/index.html","hash":"89a6f6ea0a2c21150af121e01e011a8aca2f1e67","modified":1760117475531},{"_id":"public/摄像头相关/index.html","hash":"bd54db0e864b7ef70cc6f09053ab8a2c8221b6c7","modified":1760117475531},{"_id":"public/更新香橙派内核/index.html","hash":"e8b0036fcec762f7510018171287d149c3e94ac7","modified":1760117475531},{"_id":"public/杂项/index.html","hash":"ba05b4677fafeff6f536328c669841a7b614c569","modified":1760117475531},{"_id":"public/树莓派-q&a/index.html","hash":"28bd6ad90348a4628537c0df0554f4e1e21be3ec","modified":1760117475531},{"_id":"public/树莓派摄像头/index.html","hash":"93f0b56aab40aa52a7f842693dd4c12b7011216d","modified":1760117475531},{"_id":"public/消息传递并行—mpi/index.html","hash":"d89b08f378b1257a8835f8e0716302e624eea3d4","modified":1760117475531},{"_id":"public/深度学习相关/index.html","hash":"4b98c874632b5930224e04993a2933c7c91c8c94","modified":1760117475531},{"_id":"public/系统包管理器apt-q&a/index.html","hash":"e804407489387aa5013233b7829605f88899c245","modified":1760117475531},{"_id":"public/系统相关/index.html","hash":"8e0bead3648477ae5a8a74e3d2b15357d6a4034a","modified":1760117475531},{"_id":"public/记录/index.html","hash":"41d5ae29133736fe6afbb86a247603c2a83bc81e","modified":1760117475531},{"_id":"public/集群管理——ansible/index.html","hash":"db32cba47bf5cd3be10e3e0b926ab4fa0827e92f","modified":1760117475531},{"_id":"public/静态博客—hexo/index.html","hash":"2904e5ce05fc1fdd74c206f85d0fab960d36e947","modified":1760117475531},{"_id":"public/在linux系统中查看进程/index.html","hash":"1aaafa87e7fc310ef4eb8e4f41458c3ce88f0c2c","modified":1760117475531},{"_id":"public/dst服务器/index.html","hash":"ff5e2caff4275515a209d2755904f51c981a36cc","modified":1760117475531},{"_id":"public/zotero/index.html","hash":"d5881906ebed9ea859d35090e6729258a09d9264","modified":1760117475531},{"_id":"public/香橙派相关/index.html","hash":"49f4fd44621ab59cf48887c93b54c2a4f84ce9d8","modified":1760117475531},{"_id":"public/conda-q&a/index.html","hash":"93cf61a458fa1c46f7f83970bce176dad4dae081","modified":1760117475531},{"_id":"public/目标跟踪结果对比工具/index.html","hash":"6fc021ff047a3a558a2a6e7e9faad8b0b02340c3","modified":1760117475531},{"_id":"public/archives/index.html","hash":"b3aa864fbf3edc84400f70026c6ecb3e4c3e12bd","modified":1760117475531},{"_id":"public/archives/page/2/index.html","hash":"3271f89aeef564c02e3741e06b2e42ea92a850a1","modified":1760117475531},{"_id":"public/archives/page/3/index.html","hash":"85378478905c941df1d55168e98507fecc8c2acd","modified":1760117475531},{"_id":"public/archives/page/4/index.html","hash":"bfeab29c9c8e179304e3f0c5c55ada3025fdb8e7","modified":1760117475531},{"_id":"public/archives/2025/index.html","hash":"52f792db1bc8bc991bfbde76fc0090aa04eba169","modified":1760117475531},{"_id":"public/archives/2025/page/2/index.html","hash":"a850c2ced7e3583f0c151f6d88ae4f1933e62522","modified":1760117475531},{"_id":"public/archives/2025/page/3/index.html","hash":"9e76992b3061c0afb0a0a064e34f2c4e91ca19e3","modified":1760117475531},{"_id":"public/archives/2025/page/4/index.html","hash":"e241d189358317cc4c0778bf5a1d68474b626444","modified":1760117475531},{"_id":"public/archives/2025/06/index.html","hash":"b8267af0d00a83ff8d54d43da046b86eee228ab3","modified":1760117475531},{"_id":"public/archives/2025/06/page/2/index.html","hash":"d1a0b43180c1d4e08b8fcee2ab329c979d228ae9","modified":1760117475531},{"_id":"public/archives/2025/06/page/3/index.html","hash":"586a8d0c1fd6c1ddf993645d1a751c59f28828ca","modified":1760117475531},{"_id":"public/archives/2025/06/page/4/index.html","hash":"a0b6f96f8cd951c8335b1acda48dc9225ef223c2","modified":1760117475531},{"_id":"public/archives/2025/07/index.html","hash":"c2cf0e3e4d9ef6fddc0df25796c41812e6577215","modified":1760117475531},{"_id":"public/categories/服务器-嵌入式平台操作/index.html","hash":"18a75411f8919c5c5d28797f6143044632b7dc52","modified":1760117475531},{"_id":"public/categories/服务器-嵌入式平台操作/page/2/index.html","hash":"f6c976fe4c6e37bc1427c941c77ecb6606d89040","modified":1760117475531},{"_id":"public/categories/服务器-嵌入式平台操作/page/3/index.html","hash":"b1bd0a39a376cd5a6d3592d90a7141400cfb0b16","modified":1760117475531},{"_id":"public/categories/程序相关/index.html","hash":"3c79b86c398fba5f77faab93e5c17ef2b0e9664d","modified":1760117475531},{"_id":"public/categories/服务器-嵌入式平台操作/Q-A问题及解决汇总/index.html","hash":"3a58ee7a835f8199df1057f0e4d2d30cc55abb07","modified":1760117475531},{"_id":"public/categories/服务器-嵌入式平台操作/嵌入式-硬件/index.html","hash":"099237ec837e886b95e17b15504ddff66155736b","modified":1760117475531},{"_id":"public/categories/服务器-嵌入式平台操作/基础配置/index.html","hash":"54e9b37f5578360cf2ced2bb4d09c6cfc8bbafcd","modified":1760117475531},{"_id":"public/categories/Windows主机操作/index.html","hash":"36395b7c7b5b8d153271ada473b17e4dc227062d","modified":1760117475531},{"_id":"public/categories/For-Fun/index.html","hash":"a1788093d87c3a3188d87e913c5e065a8f2d41f8","modified":1760117475531},{"_id":"public/categories/本科毕业设计/index.html","hash":"2eebd8b7d32ab11b73212221159e0244e0c28c98","modified":1760117475531},{"_id":"public/categories/服务器-嵌入式平台操作/工具/index.html","hash":"662042b706f2606f3698dfacd84c7402e3d314c7","modified":1760117475531},{"_id":"public/categories/Temp/index.html","hash":"be35cf8f29af29bdca049c93cd91626cdc47e652","modified":1760117475531},{"_id":"public/categories/服务器-嵌入式平台操作/常用操作/index.html","hash":"071fe54eda0b8188b53ca2d711574f3aaf3f4aa5","modified":1760117475531},{"_id":"public/categories/学习笔记/index.html","hash":"e71ba360cf7f41731ebb602373bd2eabf9d1dabe","modified":1760117475531},{"_id":"public/index.html","hash":"2d13fb3f398049dc540b21d92dcf4b7a3d4bfe7b","modified":1760117475531},{"_id":"public/page/2/index.html","hash":"4eaed2aadf13b0af2120ffbd4719a96ebc887745","modified":1760117475531},{"_id":"public/page/3/index.html","hash":"0b99ff80e8231d4a5fa1ecf39973c72e5be8e53a","modified":1760117475531},{"_id":"public/page/4/index.html","hash":"ad324dd5421d28bcf8e36517b9f861439e591e9d","modified":1760117475531},{"_id":"public/images/EC20 result1.png","hash":"369ae8b4848c6e866a531d055f4d15581cc9522f","modified":1760117475531},{"_id":"public/images/EC20 result2.png","hash":"0397f4ec6adb1f2289f0ed9085dfee8c37b3bcf1","modified":1760117475531},{"_id":"public/images/EC20 result3.png","hash":"5889d0ee22d8b6e14f5a43f6f3897f9a450c44f9","modified":1760117475531},{"_id":"public/images/EC20 result4.png","hash":"1ff5ae348240d039986455a3b23a9d4976011e23","modified":1760117475531},{"_id":"public/images/Frp-阿里云安全组配置.png","hash":"573940795c713625b5e7a13bc5e6692798ec7ffb","modified":1760117475531},{"_id":"public/images/GPUdriver.png","hash":"5cffe5907eaba61391672d5fa2aa838f40111d52","modified":1760117475531},{"_id":"public/images/anaconda_init.png","hash":"f97c4626f29338ba50d763b7eeb327ae576e1c7d","modified":1760117475531},{"_id":"public/images/conda环境变量.png","hash":"0c96723554918937df9fec00bbd06556ec3004d5","modified":1760117475531},{"_id":"public/images/lsblk参数.png","hash":"ff92ef2f7d0bf4385db1c1aa6dc15312b3f015ce","modified":1760117475531},{"_id":"public/images/nvidia&cuda_test.png","hash":"90c527a2115159b536763e84a9a471345f0cc3bf","modified":1760117475531},{"_id":"public/images/opencv摄像头测试.png","hash":"6da55f18832bfa169b009a61c0b1bb9ff6f5b453","modified":1760117475531},{"_id":"public/images/pytorch.png","hash":"576be3476ad1d63b4fd24a70008e1952522e83c6","modified":1760117475531},{"_id":"public/images/siamLAT所需库.png","hash":"8744d6f54b969da3552c1c8653a8f7c2ea599786","modified":1760117475531},{"_id":"public/images/virtualenv常用指令.png","hash":"2741f550da854267a7d0079caeb2059246322970","modified":1760117475531},{"_id":"public/images/wiringpi.png","hash":"bac1fe5a95a56255b6e12e477f9b1eb1209f2bf8","modified":1760117475531},{"_id":"public/images/xming界面.png","hash":"ad6b0f7a039e81db095a6d1b9777808e70fb8924","modified":1760117475531},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1760117475531},{"_id":"public/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1760117475531},{"_id":"public/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1760117475531},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1760117475531},{"_id":"public/images/DST.png","hash":"f33965734745030e3f617baef5b2105b03168526","modified":1760117475531},{"_id":"public/images/Frp-release.png","hash":"ce665f2cbd7d7ce1558a17a439dd4efcd34e7576","modified":1760117475531},{"_id":"public/images/GitHub的SSHkey.png","hash":"419505259ab29f984f477f7c4e87659fea60fb5b","modified":1760117475531},{"_id":"public/images/Github设置pages.png","hash":"564a98667ea251c55f679eb9601d4310bd29588c","modified":1760117475531},{"_id":"public/images/virtualenv报错.png","hash":"a7d0c59026b762aa3ff2ee72400faa860b594074","modified":1760117475531},{"_id":"public/images/virtualenv配置文件修改.png","hash":"c9fdcf1d1831e45b42e6631c75179de682988ee8","modified":1760117475531},{"_id":"public/images/xserver工具测试.png","hash":"39d7ae86985ba65e0d133654fc958106d670bca5","modified":1760117475531},{"_id":"public/css/index.css","hash":"c43d7c2b4bf40e3b949ae0c017d5bfe3d017d83a","modified":1760117475531},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1760117475531},{"_id":"public/js/main.js","hash":"d46f5e46e6e78ee08ce791059a788b0d7ba1d70c","modified":1760117475531},{"_id":"public/js/tw_cn.js","hash":"337c417a6e37dfabc920463fa13f65cc3d02f164","modified":1760117475531},{"_id":"public/js/utils.js","hash":"e3b4a5e1ef72c3ebab85542da11d9addfbfce42a","modified":1760117475531},{"_id":"public/js/search/algolia.js","hash":"02491d2798f07f820962cafaceb07a2f8c97bc41","modified":1760117475531},{"_id":"public/js/search/local-search.js","hash":"50ab53c2b11c7c4cc1d9240b749af124ad38bfdc","modified":1760117475531},{"_id":"public/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1760117475531},{"_id":"public/images/Q&A 1.png","hash":"761f381f22ce5e5fdf995906126369ccc1a91198","modified":1760117475531}],"Category":[{"name":"服务器&嵌入式平台操作","_id":"cmgl4i0mp0004zovd3wdr93bo"},{"name":"程序相关","_id":"cmgl4i0ms0007zovdc6r42okx"},{"name":"Q&A问题及解决汇总","parent":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0n1000dzovdhz2qhkeh"},{"name":"嵌入式&硬件","parent":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0n3000hzovd4uqd9yil"},{"name":"基础配置","parent":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0na0010zovddk3jetrd"},{"name":"Windows主机操作","_id":"cmgl4i0no001fzovddzs30qos"},{"name":"For Fun","_id":"cmgl4i0ns001pzovd19hy7ftd"},{"name":"本科毕业设计","_id":"cmgl4i0nx0020zovdf9gd2pns"},{"name":"工具","parent":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0o40026zovdhwz0ht7j"},{"name":"Temp","_id":"cmgl4i0o7002fzovd4zqz8d9i"},{"name":"常用操作","parent":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0oc0036zovd4ohy02zj"},{"name":"学习笔记","_id":"cmgl4i0oe003azovdh5x1b4v5"}],"Data":[],"Page":[{"_content":"/* 自定义主题样式 */\n\n/* 修改主标题颜色 */\n#site-title {\n  font-weight: bold;\n}\n\n/* 修改副标题样式 */\n#site-subtitle {\n  font-size: 1.2em;\n}\n\n/* 调整全站字体大小 */\nbody {\n  font-size: 16px !important; /* 基础字体大小，默认通常是14px */\n}\n\n/* 调整文章内容字体大小 */\n#article-container {\n  font-size: 17px !important; /* 文章正文字体大小 */\n  line-height: 1.8 !important; /* 增加行高，提高可读性 */\n}\n\n/* 调整文章标题字体大小 */\n#article-container h1 {\n  font-size: 2.2em !important;\n}\n\n#article-container h2 {\n  font-size: 1.9em !important;\n}\n\n#article-container h3 {\n  font-size: 1.6em !important;\n}\n\n#article-container h4 {\n  font-size: 1.4em !important;\n}\n\n#article-container h5 {\n  font-size: 1.2em !important;\n}\n\n#article-container h6 {\n  font-size: 1.1em !important;\n}\n\n/* 调整首页文章摘要字体大小 */\n.recent-post-info .article-title {\n  font-size: 1.4em !important;\n}\n\n.recent-post-info .content {\n  font-size: 15px !important;\n}\n\n/* 调整侧边栏字体大小 */\n.card-widget {\n  font-size: 15px !important;\n}\n\n/* 调整导航栏字体大小 */\n#nav .menus_items .menus_item {\n  font-size: 16px !important;\n}\n\n/* 调整代码块字体大小 */\n.highlight pre,\n.highlight code {\n  font-size: 15px !important;\n}\n\n/* 调整表格字体大小 */\n#article-container table {\n  font-size: 15px !important;\n}\n\n/* 调整引用块字体大小 */\n#article-container blockquote {\n  font-size: 16px !important;\n}\n\n/* 自定义导航栏背景 */\n#nav {\n  box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n/* 修改文章卡片样式 */\n.recent-post-item {\n  border-radius: 15px !important;\n  box-shadow: 0 4px 20px rgba(0,0,0,0.1) !important;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.recent-post-item:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 8px 30px rgba(0,0,0,0.15) !important;\n}\n\n/* 自定义代码块样式 */\n.highlight {\n  border-radius: 10px !important;\n}\n\n/* 自定义侧边栏卡片 */\n.card-widget {\n  border-radius: 12px !important;\n  border: none !important;\n  box-shadow: 0 2px 15px rgba(0,0,0,0.08) !important;\n}\n\n/* 修改按钮样式 */\n.btn {\n  border-radius: 25px !important;\n  padding: 8px 20px !important;\n  transition: all 0.3s ease;\n}\n\n.btn:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0,0,0,0.2);\n}\n\n/* 自定义滚动条 */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  border-radius: 10px;\n}\n\n::-webkit-scrollbar-thumb {\n  border-radius: 10px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n}","source":"css/custom.css","raw":"/* 自定义主题样式 */\n\n/* 修改主标题颜色 */\n#site-title {\n  font-weight: bold;\n}\n\n/* 修改副标题样式 */\n#site-subtitle {\n  font-size: 1.2em;\n}\n\n/* 调整全站字体大小 */\nbody {\n  font-size: 16px !important; /* 基础字体大小，默认通常是14px */\n}\n\n/* 调整文章内容字体大小 */\n#article-container {\n  font-size: 17px !important; /* 文章正文字体大小 */\n  line-height: 1.8 !important; /* 增加行高，提高可读性 */\n}\n\n/* 调整文章标题字体大小 */\n#article-container h1 {\n  font-size: 2.2em !important;\n}\n\n#article-container h2 {\n  font-size: 1.9em !important;\n}\n\n#article-container h3 {\n  font-size: 1.6em !important;\n}\n\n#article-container h4 {\n  font-size: 1.4em !important;\n}\n\n#article-container h5 {\n  font-size: 1.2em !important;\n}\n\n#article-container h6 {\n  font-size: 1.1em !important;\n}\n\n/* 调整首页文章摘要字体大小 */\n.recent-post-info .article-title {\n  font-size: 1.4em !important;\n}\n\n.recent-post-info .content {\n  font-size: 15px !important;\n}\n\n/* 调整侧边栏字体大小 */\n.card-widget {\n  font-size: 15px !important;\n}\n\n/* 调整导航栏字体大小 */\n#nav .menus_items .menus_item {\n  font-size: 16px !important;\n}\n\n/* 调整代码块字体大小 */\n.highlight pre,\n.highlight code {\n  font-size: 15px !important;\n}\n\n/* 调整表格字体大小 */\n#article-container table {\n  font-size: 15px !important;\n}\n\n/* 调整引用块字体大小 */\n#article-container blockquote {\n  font-size: 16px !important;\n}\n\n/* 自定义导航栏背景 */\n#nav {\n  box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n/* 修改文章卡片样式 */\n.recent-post-item {\n  border-radius: 15px !important;\n  box-shadow: 0 4px 20px rgba(0,0,0,0.1) !important;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.recent-post-item:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 8px 30px rgba(0,0,0,0.15) !important;\n}\n\n/* 自定义代码块样式 */\n.highlight {\n  border-radius: 10px !important;\n}\n\n/* 自定义侧边栏卡片 */\n.card-widget {\n  border-radius: 12px !important;\n  border: none !important;\n  box-shadow: 0 2px 15px rgba(0,0,0,0.08) !important;\n}\n\n/* 修改按钮样式 */\n.btn {\n  border-radius: 25px !important;\n  padding: 8px 20px !important;\n  transition: all 0.3s ease;\n}\n\n.btn:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0,0,0,0.2);\n}\n\n/* 自定义滚动条 */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  border-radius: 10px;\n}\n\n::-webkit-scrollbar-thumb {\n  border-radius: 10px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n}","date":"2025-10-09T18:36:23.023Z","updated":"2025-10-09T18:36:23.023Z","path":"css/custom.css","layout":"false","title":"","comments":1,"_id":"cmgl4i0mj0000zovd96on0b4w","content":"/* 自定义主题样式 */\n\n/* 修改主标题颜色 */\n#site-title {\n  font-weight: bold;\n}\n\n/* 修改副标题样式 */\n#site-subtitle {\n  font-size: 1.2em;\n}\n\n/* 调整全站字体大小 */\nbody {\n  font-size: 16px !important; /* 基础字体大小，默认通常是14px */\n}\n\n/* 调整文章内容字体大小 */\n#article-container {\n  font-size: 17px !important; /* 文章正文字体大小 */\n  line-height: 1.8 !important; /* 增加行高，提高可读性 */\n}\n\n/* 调整文章标题字体大小 */\n#article-container h1 {\n  font-size: 2.2em !important;\n}\n\n#article-container h2 {\n  font-size: 1.9em !important;\n}\n\n#article-container h3 {\n  font-size: 1.6em !important;\n}\n\n#article-container h4 {\n  font-size: 1.4em !important;\n}\n\n#article-container h5 {\n  font-size: 1.2em !important;\n}\n\n#article-container h6 {\n  font-size: 1.1em !important;\n}\n\n/* 调整首页文章摘要字体大小 */\n.recent-post-info .article-title {\n  font-size: 1.4em !important;\n}\n\n.recent-post-info .content {\n  font-size: 15px !important;\n}\n\n/* 调整侧边栏字体大小 */\n.card-widget {\n  font-size: 15px !important;\n}\n\n/* 调整导航栏字体大小 */\n#nav .menus_items .menus_item {\n  font-size: 16px !important;\n}\n\n/* 调整代码块字体大小 */\n.highlight pre,\n.highlight code {\n  font-size: 15px !important;\n}\n\n/* 调整表格字体大小 */\n#article-container table {\n  font-size: 15px !important;\n}\n\n/* 调整引用块字体大小 */\n#article-container blockquote {\n  font-size: 16px !important;\n}\n\n/* 自定义导航栏背景 */\n#nav {\n  box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n/* 修改文章卡片样式 */\n.recent-post-item {\n  border-radius: 15px !important;\n  box-shadow: 0 4px 20px rgba(0,0,0,0.1) !important;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.recent-post-item:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 8px 30px rgba(0,0,0,0.15) !important;\n}\n\n/* 自定义代码块样式 */\n.highlight {\n  border-radius: 10px !important;\n}\n\n/* 自定义侧边栏卡片 */\n.card-widget {\n  border-radius: 12px !important;\n  border: none !important;\n  box-shadow: 0 2px 15px rgba(0,0,0,0.08) !important;\n}\n\n/* 修改按钮样式 */\n.btn {\n  border-radius: 25px !important;\n  padding: 8px 20px !important;\n  transition: all 0.3s ease;\n}\n\n.btn:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0,0,0,0.2);\n}\n\n/* 自定义滚动条 */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  border-radius: 10px;\n}\n\n::-webkit-scrollbar-thumb {\n  border-radius: 10px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n}"}],"Post":[{"title":"4G模块—EC20","date":"2025-06-01T02:34:58.000Z","updated":"2024-04-13T10:28:44.000Z","_content":"\n## Ubuntu Server使用EC20/EC25连接4G网络\n来源于：[UbuntuServer使用EC20/EC25连接4G网络 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/540208588?utm_id=0&wd=&eqid=a9ba2b89000e396300000004647871ec)\n\n> [!NOTE] 操作环境\n> Ubuntu-22.04.3 server 树莓派4\n> \n### 1.准备工作\nUbuntu Server系统（默认已经切换为root用户）——使用安装Ubuntu22.04.3 LTS Server版的树莓派4\nEC20/EC25/EG25模块/开发板（USB接口）——USB接口EC20模块\n4G手机卡——中国电信手机卡\n### 2.安装依赖\n由于Ubuntu Server版本不自带network-manager等组件，因此在使用4G连接前需要提前安装。\n使用指令安装network-manager与modem-manager：\n```bash\napt install network-manager\nsnap install modem-manager\n```\n### 3.配置调制解调器\n安装完成后插入EC20的USB，*lsusb*指令查看是否能正常识别设备：\n![EC20 result1.png](/images/EC20 result1.png)\n成功识别后使用*nmcli -a*指令查看是否存在一个未连接gsm设备：\n![EC20 result2.png](/images/EC20 result2.png)\n使用*mmcli -L*查看4G设备的索引。如图所示，本设备中4G模块的索引为0：\n![EC20 result3.png](/images/EC20 result3.png)\n如果你的SIM卡设置了PIN码（使用*mmcli -m < idx >* 指令查看SIM等具体设置）可使用下面的指令解锁：\n```bash\nmmcli -i 0 --pin=<PIN>\n```\n例如：\n```bash\nmmcli -i 0 --pin=1212\n```\n解锁SIM的PIN后（如果设置了的话），进行设置蜂窝连接，使用下面的指令（该指令将配置应用到当前系统下所有调制解调器设备，即*mmcli -L*指令下的设备）:\n```bash\nnmcli c add type gsm ifname '*' con-name <name> apn <operator_apn>\n```\n其中：\n< name >：为配置文的名称，可填写china-mobile\n< operator_apn >：接入点名称，电信可填写cmnet\n最终，指令如下：\n```bash\nnmcli c add type gsm ifname '*' con-name china-mobile apn cmnet\n```\n\n随后使用指令打开gsm网络：\n```bash\nnmcli r wwan on\n```\n打开自动连接设置，将< name >修改为前面输入的名称：\n```bash\nnmcli c modify <name> connection.autoconnect yes\n```\n最后，可使用*nmcli -a*指令查看，可看到4G连接已经成功上网：\n![EC20 result4.png](/images/EC20 result4.png)\n\n### 4.自己配置的运行结果\n```bash\nroot@ubuntu:~# lsusb\nBus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\nBus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub\nBus 001 Device 003: ID 2c7c:0125 Quectel Wireless Solutions Co., Ltd. EC25 LTE modem\nBus 001 Device 002: ID 2109:3431 VIA Labs, Inc. Hub\nBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\nroot@ubuntu:~# nmcli -a\ncdc-wdm0: disconnected\n        \"cdc-wdm0\"\n        gsm (option, qmi_wwan), hw\n\nwlan0: disconnected\n        \"Broadcom BCM43438 combo and Bluetooth Low Energy\"\n        wifi (brcmfmac), E4:5F:01:12:68:BD, hw, mtu 1500\n\neth0: unmanaged\n        \"eth0\"\n        ethernet (bcmgenet), E4:5F:01:12:68:BC, hw, mtu 1500\n\nlo: unmanaged\n        \"lo\"\n        loopback (unknown), 00:00:00:00:00:00, sw, mtu 65536\n\np2p-dev-wlan0: unmanaged\n        \"p2p-dev-wlan0\"\n        wifi-p2p, hw\n\nUse \"nmcli device show\" to get complete information about known devices and\n\"nmcli connection show\" to get an overview on active connection profiles.\n\nConsult nmcli(1) and nmcli-examples(7) manual pages for complete usage details.\nroot@ubuntu:~# mmcli -L\n    /org/freedesktop/ModemManager1/Modem/0 [QUALCOMM INCORPORATED] QUECTEL Mobile Broadband Module\nroot@ubuntu:~# nmcli c add type gsm ifname '*' con-name china-telecom apn ctnet\nConnection 'china-telecom' (29bc84ae-084b-4416-aaba-5e2d33c443f1) successfully added.\nroot@ubuntu:~# nmcli c modify china-telecom connection.autoconnect yes\nroot@ubuntu:~# nmcli -a\ncdc-wdm0: connected to china-telecom\n        \"cdc-wdm0\"\n        gsm (option, qmi_wwan), hw, iface wwan0, mtu 1500\n        ip4 default, ip6 default\n        inet4 100.164.112.82/30\n        route4 100.164.112.80/30\n        route4 0.0.0.0/0\n        inet6 240e:428:2422:bf64:e111:11f2:964b:2d0d/64\n        route6 240e:428:2422:bf64::/64\n        route6 ::/0\n\nwlan0: disconnected\n        \"Broadcom BCM43438 combo and Bluetooth Low Energy\"\n        wifi (brcmfmac), E4:5F:01:12:68:BD, hw, mtu 1500\n\neth0: unmanaged\n        \"eth0\"\n        ethernet (bcmgenet), E4:5F:01:12:68:BC, hw, mtu 1500\n\nlo: unmanaged\n        \"lo\"\n        loopback (unknown), 00:00:00:00:00:00, sw, mtu 65536\n\np2p-dev-wlan0: unmanaged\n        \"p2p-dev-wlan0\"\n        wifi-p2p, hw\n\nDNS configuration:\n        servers: 219.150.32.132 123.150.150.150\n        interface: wwan0\n\n        servers: 240e:45::8888 240e:45::6666\n        interface: wwan0\n\nUse \"nmcli device show\" to get complete information about known devices and\n\"nmcli connection show\" to get an overview on active connection profiles.\n```","source":"_posts/2025-06-01-4G模块EC20.md","raw":"---\ntitle: 4G模块—EC20\ndate: 2025-06-01 10:34:58\nupdated: 2024-04-13 18:28:44\ncategories:\n  - [服务器&嵌入式平台操作, 嵌入式&硬件]\ntags:\npermalink: 4g模块—ec20/\n---\n\n## Ubuntu Server使用EC20/EC25连接4G网络\n来源于：[UbuntuServer使用EC20/EC25连接4G网络 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/540208588?utm_id=0&wd=&eqid=a9ba2b89000e396300000004647871ec)\n\n> [!NOTE] 操作环境\n> Ubuntu-22.04.3 server 树莓派4\n> \n### 1.准备工作\nUbuntu Server系统（默认已经切换为root用户）——使用安装Ubuntu22.04.3 LTS Server版的树莓派4\nEC20/EC25/EG25模块/开发板（USB接口）——USB接口EC20模块\n4G手机卡——中国电信手机卡\n### 2.安装依赖\n由于Ubuntu Server版本不自带network-manager等组件，因此在使用4G连接前需要提前安装。\n使用指令安装network-manager与modem-manager：\n```bash\napt install network-manager\nsnap install modem-manager\n```\n### 3.配置调制解调器\n安装完成后插入EC20的USB，*lsusb*指令查看是否能正常识别设备：\n![EC20 result1.png](/images/EC20 result1.png)\n成功识别后使用*nmcli -a*指令查看是否存在一个未连接gsm设备：\n![EC20 result2.png](/images/EC20 result2.png)\n使用*mmcli -L*查看4G设备的索引。如图所示，本设备中4G模块的索引为0：\n![EC20 result3.png](/images/EC20 result3.png)\n如果你的SIM卡设置了PIN码（使用*mmcli -m < idx >* 指令查看SIM等具体设置）可使用下面的指令解锁：\n```bash\nmmcli -i 0 --pin=<PIN>\n```\n例如：\n```bash\nmmcli -i 0 --pin=1212\n```\n解锁SIM的PIN后（如果设置了的话），进行设置蜂窝连接，使用下面的指令（该指令将配置应用到当前系统下所有调制解调器设备，即*mmcli -L*指令下的设备）:\n```bash\nnmcli c add type gsm ifname '*' con-name <name> apn <operator_apn>\n```\n其中：\n< name >：为配置文的名称，可填写china-mobile\n< operator_apn >：接入点名称，电信可填写cmnet\n最终，指令如下：\n```bash\nnmcli c add type gsm ifname '*' con-name china-mobile apn cmnet\n```\n\n随后使用指令打开gsm网络：\n```bash\nnmcli r wwan on\n```\n打开自动连接设置，将< name >修改为前面输入的名称：\n```bash\nnmcli c modify <name> connection.autoconnect yes\n```\n最后，可使用*nmcli -a*指令查看，可看到4G连接已经成功上网：\n![EC20 result4.png](/images/EC20 result4.png)\n\n### 4.自己配置的运行结果\n```bash\nroot@ubuntu:~# lsusb\nBus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\nBus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub\nBus 001 Device 003: ID 2c7c:0125 Quectel Wireless Solutions Co., Ltd. EC25 LTE modem\nBus 001 Device 002: ID 2109:3431 VIA Labs, Inc. Hub\nBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\nroot@ubuntu:~# nmcli -a\ncdc-wdm0: disconnected\n        \"cdc-wdm0\"\n        gsm (option, qmi_wwan), hw\n\nwlan0: disconnected\n        \"Broadcom BCM43438 combo and Bluetooth Low Energy\"\n        wifi (brcmfmac), E4:5F:01:12:68:BD, hw, mtu 1500\n\neth0: unmanaged\n        \"eth0\"\n        ethernet (bcmgenet), E4:5F:01:12:68:BC, hw, mtu 1500\n\nlo: unmanaged\n        \"lo\"\n        loopback (unknown), 00:00:00:00:00:00, sw, mtu 65536\n\np2p-dev-wlan0: unmanaged\n        \"p2p-dev-wlan0\"\n        wifi-p2p, hw\n\nUse \"nmcli device show\" to get complete information about known devices and\n\"nmcli connection show\" to get an overview on active connection profiles.\n\nConsult nmcli(1) and nmcli-examples(7) manual pages for complete usage details.\nroot@ubuntu:~# mmcli -L\n    /org/freedesktop/ModemManager1/Modem/0 [QUALCOMM INCORPORATED] QUECTEL Mobile Broadband Module\nroot@ubuntu:~# nmcli c add type gsm ifname '*' con-name china-telecom apn ctnet\nConnection 'china-telecom' (29bc84ae-084b-4416-aaba-5e2d33c443f1) successfully added.\nroot@ubuntu:~# nmcli c modify china-telecom connection.autoconnect yes\nroot@ubuntu:~# nmcli -a\ncdc-wdm0: connected to china-telecom\n        \"cdc-wdm0\"\n        gsm (option, qmi_wwan), hw, iface wwan0, mtu 1500\n        ip4 default, ip6 default\n        inet4 100.164.112.82/30\n        route4 100.164.112.80/30\n        route4 0.0.0.0/0\n        inet6 240e:428:2422:bf64:e111:11f2:964b:2d0d/64\n        route6 240e:428:2422:bf64::/64\n        route6 ::/0\n\nwlan0: disconnected\n        \"Broadcom BCM43438 combo and Bluetooth Low Energy\"\n        wifi (brcmfmac), E4:5F:01:12:68:BD, hw, mtu 1500\n\neth0: unmanaged\n        \"eth0\"\n        ethernet (bcmgenet), E4:5F:01:12:68:BC, hw, mtu 1500\n\nlo: unmanaged\n        \"lo\"\n        loopback (unknown), 00:00:00:00:00:00, sw, mtu 65536\n\np2p-dev-wlan0: unmanaged\n        \"p2p-dev-wlan0\"\n        wifi-p2p, hw\n\nDNS configuration:\n        servers: 219.150.32.132 123.150.150.150\n        interface: wwan0\n\n        servers: 240e:45::8888 240e:45::6666\n        interface: wwan0\n\nUse \"nmcli device show\" to get complete information about known devices and\n\"nmcli connection show\" to get an overview on active connection profiles.\n```","slug":"2025-06-01-4G模块EC20","published":1,"__permalink":"4g模块—ec20/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0ml0001zovd5at70ayg","content":"<h2 id=\"Ubuntu-Server使用EC20-EC25连接4G网络\"><a href=\"#Ubuntu-Server使用EC20-EC25连接4G网络\" class=\"headerlink\" title=\"Ubuntu Server使用EC20&#x2F;EC25连接4G网络\"></a>Ubuntu Server使用EC20&#x2F;EC25连接4G网络</h2><p>来源于：<a href=\"https://zhuanlan.zhihu.com/p/540208588?utm_id=0&wd=&eqid=a9ba2b89000e396300000004647871ec\">UbuntuServer使用EC20&#x2F;EC25连接4G网络 - 知乎 (zhihu.com)</a></p>\n<blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu-22.04.3 server 树莓派4</p>\n</blockquote>\n<h3 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1.准备工作\"></a>1.准备工作</h3><p>Ubuntu Server系统（默认已经切换为root用户）——使用安装Ubuntu22.04.3 LTS Server版的树莓派4<br>EC20&#x2F;EC25&#x2F;EG25模块&#x2F;开发板（USB接口）——USB接口EC20模块<br>4G手机卡——中国电信手机卡</p>\n<h3 id=\"2-安装依赖\"><a href=\"#2-安装依赖\" class=\"headerlink\" title=\"2.安装依赖\"></a>2.安装依赖</h3><p>由于Ubuntu Server版本不自带network-manager等组件，因此在使用4G连接前需要提前安装。<br>使用指令安装network-manager与modem-manager：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install network-manager</span><br><span class=\"line\">snap install modem-manager</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-配置调制解调器\"><a href=\"#3-配置调制解调器\" class=\"headerlink\" title=\"3.配置调制解调器\"></a>3.配置调制解调器</h3><p>安装完成后插入EC20的USB，<em>lsusb</em>指令查看是否能正常识别设备：<br>![EC20 result1.png](&#x2F;images&#x2F;EC20 result1.png)<br>成功识别后使用<em>nmcli -a</em>指令查看是否存在一个未连接gsm设备：<br>![EC20 result2.png](&#x2F;images&#x2F;EC20 result2.png)<br>使用<em>mmcli -L</em>查看4G设备的索引。如图所示，本设备中4G模块的索引为0：<br>![EC20 result3.png](&#x2F;images&#x2F;EC20 result3.png)<br>如果你的SIM卡设置了PIN码（使用<em>mmcli -m &lt; idx &gt;</em> 指令查看SIM等具体设置）可使用下面的指令解锁：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mmcli -i 0 --pin=&lt;PIN&gt;</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mmcli -i 0 --pin=1212</span><br></pre></td></tr></table></figure>\n<p>解锁SIM的PIN后（如果设置了的话），进行设置蜂窝连接，使用下面的指令（该指令将配置应用到当前系统下所有调制解调器设备，即<em>mmcli -L</em>指令下的设备）:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmcli c add <span class=\"built_in\">type</span> gsm ifname <span class=\"string\">&#x27;*&#x27;</span> con-name &lt;name&gt; apn &lt;operator_apn&gt;</span><br></pre></td></tr></table></figure>\n<p>其中：<br>&lt; name &gt;：为配置文的名称，可填写china-mobile<br>&lt; operator_apn &gt;：接入点名称，电信可填写cmnet<br>最终，指令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmcli c add <span class=\"built_in\">type</span> gsm ifname <span class=\"string\">&#x27;*&#x27;</span> con-name china-mobile apn cmnet</span><br></pre></td></tr></table></figure>\n\n<p>随后使用指令打开gsm网络：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmcli r wwan on</span><br></pre></td></tr></table></figure>\n<p>打开自动连接设置，将&lt; name &gt;修改为前面输入的名称：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmcli c modify &lt;name&gt; connection.autoconnect <span class=\"built_in\">yes</span></span><br></pre></td></tr></table></figure>\n<p>最后，可使用<em>nmcli -a</em>指令查看，可看到4G连接已经成功上网：<br>![EC20 result4.png](&#x2F;images&#x2F;EC20 result4.png)</p>\n<h3 id=\"4-自己配置的运行结果\"><a href=\"#4-自己配置的运行结果\" class=\"headerlink\" title=\"4.自己配置的运行结果\"></a>4.自己配置的运行结果</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:~# lsusb</span><br><span class=\"line\">Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br><span class=\"line\">Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class=\"line\">Bus 001 Device 003: ID 2c7c:0125 Quectel Wireless Solutions Co., Ltd. EC25 LTE modem</span><br><span class=\"line\">Bus 001 Device 002: ID 2109:3431 VIA Labs, Inc. Hub</span><br><span class=\"line\">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br><span class=\"line\">root@ubuntu:~# nmcli -a</span><br><span class=\"line\">cdc-wdm0: disconnected</span><br><span class=\"line\">        <span class=\"string\">&quot;cdc-wdm0&quot;</span></span><br><span class=\"line\">        gsm (option, qmi_wwan), hw</span><br><span class=\"line\"></span><br><span class=\"line\">wlan0: disconnected</span><br><span class=\"line\">        <span class=\"string\">&quot;Broadcom BCM43438 combo and Bluetooth Low Energy&quot;</span></span><br><span class=\"line\">        wifi (brcmfmac), E4:5F:01:12:68:BD, hw, mtu 1500</span><br><span class=\"line\"></span><br><span class=\"line\">eth0: unmanaged</span><br><span class=\"line\">        <span class=\"string\">&quot;eth0&quot;</span></span><br><span class=\"line\">        ethernet (bcmgenet), E4:5F:01:12:68:BC, hw, mtu 1500</span><br><span class=\"line\"></span><br><span class=\"line\">lo: unmanaged</span><br><span class=\"line\">        <span class=\"string\">&quot;lo&quot;</span></span><br><span class=\"line\">        loopback (unknown), 00:00:00:00:00:00, sw, mtu 65536</span><br><span class=\"line\"></span><br><span class=\"line\">p2p-dev-wlan0: unmanaged</span><br><span class=\"line\">        <span class=\"string\">&quot;p2p-dev-wlan0&quot;</span></span><br><span class=\"line\">        wifi-p2p, hw</span><br><span class=\"line\"></span><br><span class=\"line\">Use <span class=\"string\">&quot;nmcli device show&quot;</span> to get complete information about known devices and</span><br><span class=\"line\"><span class=\"string\">&quot;nmcli connection show&quot;</span> to get an overview on active connection profiles.</span><br><span class=\"line\"></span><br><span class=\"line\">Consult nmcli(1) and nmcli-examples(7) manual pages <span class=\"keyword\">for</span> complete usage details.</span><br><span class=\"line\">root@ubuntu:~# mmcli -L</span><br><span class=\"line\">    /org/freedesktop/ModemManager1/Modem/0 [QUALCOMM INCORPORATED] QUECTEL Mobile Broadband Module</span><br><span class=\"line\">root@ubuntu:~# nmcli c add <span class=\"built_in\">type</span> gsm ifname <span class=\"string\">&#x27;*&#x27;</span> con-name china-telecom apn ctnet</span><br><span class=\"line\">Connection <span class=\"string\">&#x27;china-telecom&#x27;</span> (29bc84ae-084b-4416-aaba-5e2d33c443f1) successfully added.</span><br><span class=\"line\">root@ubuntu:~# nmcli c modify china-telecom connection.autoconnect <span class=\"built_in\">yes</span></span><br><span class=\"line\">root@ubuntu:~# nmcli -a</span><br><span class=\"line\">cdc-wdm0: connected to china-telecom</span><br><span class=\"line\">        <span class=\"string\">&quot;cdc-wdm0&quot;</span></span><br><span class=\"line\">        gsm (option, qmi_wwan), hw, iface wwan0, mtu 1500</span><br><span class=\"line\">        ip4 default, ip6 default</span><br><span class=\"line\">        inet4 100.164.112.82/30</span><br><span class=\"line\">        route4 100.164.112.80/30</span><br><span class=\"line\">        route4 0.0.0.0/0</span><br><span class=\"line\">        inet6 240e:428:2422:bf64:e111:11f2:964b:2d0d/64</span><br><span class=\"line\">        route6 240e:428:2422:bf64::/64</span><br><span class=\"line\">        route6 ::/0</span><br><span class=\"line\"></span><br><span class=\"line\">wlan0: disconnected</span><br><span class=\"line\">        <span class=\"string\">&quot;Broadcom BCM43438 combo and Bluetooth Low Energy&quot;</span></span><br><span class=\"line\">        wifi (brcmfmac), E4:5F:01:12:68:BD, hw, mtu 1500</span><br><span class=\"line\"></span><br><span class=\"line\">eth0: unmanaged</span><br><span class=\"line\">        <span class=\"string\">&quot;eth0&quot;</span></span><br><span class=\"line\">        ethernet (bcmgenet), E4:5F:01:12:68:BC, hw, mtu 1500</span><br><span class=\"line\"></span><br><span class=\"line\">lo: unmanaged</span><br><span class=\"line\">        <span class=\"string\">&quot;lo&quot;</span></span><br><span class=\"line\">        loopback (unknown), 00:00:00:00:00:00, sw, mtu 65536</span><br><span class=\"line\"></span><br><span class=\"line\">p2p-dev-wlan0: unmanaged</span><br><span class=\"line\">        <span class=\"string\">&quot;p2p-dev-wlan0&quot;</span></span><br><span class=\"line\">        wifi-p2p, hw</span><br><span class=\"line\"></span><br><span class=\"line\">DNS configuration:</span><br><span class=\"line\">        servers: 219.150.32.132 123.150.150.150</span><br><span class=\"line\">        interface: wwan0</span><br><span class=\"line\"></span><br><span class=\"line\">        servers: 240e:45::8888 240e:45::6666</span><br><span class=\"line\">        interface: wwan0</span><br><span class=\"line\"></span><br><span class=\"line\">Use <span class=\"string\">&quot;nmcli device show&quot;</span> to get complete information about known devices and</span><br><span class=\"line\"><span class=\"string\">&quot;nmcli connection show&quot;</span> to get an overview on active connection profiles.</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Ubuntu-Server使用EC20-EC25连接4G网络\"><a href=\"#Ubuntu-Server使用EC20-EC25连接4G网络\" class=\"headerlink\" title=\"Ubuntu Server使用EC20&#x2F;EC25连接4G网络\"></a>Ubuntu Server使用EC20&#x2F;EC25连接4G网络</h2><p>来源于：<a href=\"https://zhuanlan.zhihu.com/p/540208588?utm_id=0&wd=&eqid=a9ba2b89000e396300000004647871ec\">UbuntuServer使用EC20&#x2F;EC25连接4G网络 - 知乎 (zhihu.com)</a></p>\n<blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu-22.04.3 server 树莓派4</p>\n</blockquote>\n<h3 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1.准备工作\"></a>1.准备工作</h3><p>Ubuntu Server系统（默认已经切换为root用户）——使用安装Ubuntu22.04.3 LTS Server版的树莓派4<br>EC20&#x2F;EC25&#x2F;EG25模块&#x2F;开发板（USB接口）——USB接口EC20模块<br>4G手机卡——中国电信手机卡</p>\n<h3 id=\"2-安装依赖\"><a href=\"#2-安装依赖\" class=\"headerlink\" title=\"2.安装依赖\"></a>2.安装依赖</h3><p>由于Ubuntu Server版本不自带network-manager等组件，因此在使用4G连接前需要提前安装。<br>使用指令安装network-manager与modem-manager：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install network-manager</span><br><span class=\"line\">snap install modem-manager</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-配置调制解调器\"><a href=\"#3-配置调制解调器\" class=\"headerlink\" title=\"3.配置调制解调器\"></a>3.配置调制解调器</h3><p>安装完成后插入EC20的USB，<em>lsusb</em>指令查看是否能正常识别设备：<br>![EC20 result1.png](&#x2F;images&#x2F;EC20 result1.png)<br>成功识别后使用<em>nmcli -a</em>指令查看是否存在一个未连接gsm设备：<br>![EC20 result2.png](&#x2F;images&#x2F;EC20 result2.png)<br>使用<em>mmcli -L</em>查看4G设备的索引。如图所示，本设备中4G模块的索引为0：<br>![EC20 result3.png](&#x2F;images&#x2F;EC20 result3.png)<br>如果你的SIM卡设置了PIN码（使用<em>mmcli -m &lt; idx &gt;</em> 指令查看SIM等具体设置）可使用下面的指令解锁：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mmcli -i 0 --pin=&lt;PIN&gt;</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mmcli -i 0 --pin=1212</span><br></pre></td></tr></table></figure>\n<p>解锁SIM的PIN后（如果设置了的话），进行设置蜂窝连接，使用下面的指令（该指令将配置应用到当前系统下所有调制解调器设备，即<em>mmcli -L</em>指令下的设备）:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmcli c add <span class=\"built_in\">type</span> gsm ifname <span class=\"string\">&#x27;*&#x27;</span> con-name &lt;name&gt; apn &lt;operator_apn&gt;</span><br></pre></td></tr></table></figure>\n<p>其中：<br>&lt; name &gt;：为配置文的名称，可填写china-mobile<br>&lt; operator_apn &gt;：接入点名称，电信可填写cmnet<br>最终，指令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmcli c add <span class=\"built_in\">type</span> gsm ifname <span class=\"string\">&#x27;*&#x27;</span> con-name china-mobile apn cmnet</span><br></pre></td></tr></table></figure>\n\n<p>随后使用指令打开gsm网络：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmcli r wwan on</span><br></pre></td></tr></table></figure>\n<p>打开自动连接设置，将&lt; name &gt;修改为前面输入的名称：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmcli c modify &lt;name&gt; connection.autoconnect <span class=\"built_in\">yes</span></span><br></pre></td></tr></table></figure>\n<p>最后，可使用<em>nmcli -a</em>指令查看，可看到4G连接已经成功上网：<br>![EC20 result4.png](&#x2F;images&#x2F;EC20 result4.png)</p>\n<h3 id=\"4-自己配置的运行结果\"><a href=\"#4-自己配置的运行结果\" class=\"headerlink\" title=\"4.自己配置的运行结果\"></a>4.自己配置的运行结果</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:~# lsusb</span><br><span class=\"line\">Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br><span class=\"line\">Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class=\"line\">Bus 001 Device 003: ID 2c7c:0125 Quectel Wireless Solutions Co., Ltd. EC25 LTE modem</span><br><span class=\"line\">Bus 001 Device 002: ID 2109:3431 VIA Labs, Inc. Hub</span><br><span class=\"line\">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br><span class=\"line\">root@ubuntu:~# nmcli -a</span><br><span class=\"line\">cdc-wdm0: disconnected</span><br><span class=\"line\">        <span class=\"string\">&quot;cdc-wdm0&quot;</span></span><br><span class=\"line\">        gsm (option, qmi_wwan), hw</span><br><span class=\"line\"></span><br><span class=\"line\">wlan0: disconnected</span><br><span class=\"line\">        <span class=\"string\">&quot;Broadcom BCM43438 combo and Bluetooth Low Energy&quot;</span></span><br><span class=\"line\">        wifi (brcmfmac), E4:5F:01:12:68:BD, hw, mtu 1500</span><br><span class=\"line\"></span><br><span class=\"line\">eth0: unmanaged</span><br><span class=\"line\">        <span class=\"string\">&quot;eth0&quot;</span></span><br><span class=\"line\">        ethernet (bcmgenet), E4:5F:01:12:68:BC, hw, mtu 1500</span><br><span class=\"line\"></span><br><span class=\"line\">lo: unmanaged</span><br><span class=\"line\">        <span class=\"string\">&quot;lo&quot;</span></span><br><span class=\"line\">        loopback (unknown), 00:00:00:00:00:00, sw, mtu 65536</span><br><span class=\"line\"></span><br><span class=\"line\">p2p-dev-wlan0: unmanaged</span><br><span class=\"line\">        <span class=\"string\">&quot;p2p-dev-wlan0&quot;</span></span><br><span class=\"line\">        wifi-p2p, hw</span><br><span class=\"line\"></span><br><span class=\"line\">Use <span class=\"string\">&quot;nmcli device show&quot;</span> to get complete information about known devices and</span><br><span class=\"line\"><span class=\"string\">&quot;nmcli connection show&quot;</span> to get an overview on active connection profiles.</span><br><span class=\"line\"></span><br><span class=\"line\">Consult nmcli(1) and nmcli-examples(7) manual pages <span class=\"keyword\">for</span> complete usage details.</span><br><span class=\"line\">root@ubuntu:~# mmcli -L</span><br><span class=\"line\">    /org/freedesktop/ModemManager1/Modem/0 [QUALCOMM INCORPORATED] QUECTEL Mobile Broadband Module</span><br><span class=\"line\">root@ubuntu:~# nmcli c add <span class=\"built_in\">type</span> gsm ifname <span class=\"string\">&#x27;*&#x27;</span> con-name china-telecom apn ctnet</span><br><span class=\"line\">Connection <span class=\"string\">&#x27;china-telecom&#x27;</span> (29bc84ae-084b-4416-aaba-5e2d33c443f1) successfully added.</span><br><span class=\"line\">root@ubuntu:~# nmcli c modify china-telecom connection.autoconnect <span class=\"built_in\">yes</span></span><br><span class=\"line\">root@ubuntu:~# nmcli -a</span><br><span class=\"line\">cdc-wdm0: connected to china-telecom</span><br><span class=\"line\">        <span class=\"string\">&quot;cdc-wdm0&quot;</span></span><br><span class=\"line\">        gsm (option, qmi_wwan), hw, iface wwan0, mtu 1500</span><br><span class=\"line\">        ip4 default, ip6 default</span><br><span class=\"line\">        inet4 100.164.112.82/30</span><br><span class=\"line\">        route4 100.164.112.80/30</span><br><span class=\"line\">        route4 0.0.0.0/0</span><br><span class=\"line\">        inet6 240e:428:2422:bf64:e111:11f2:964b:2d0d/64</span><br><span class=\"line\">        route6 240e:428:2422:bf64::/64</span><br><span class=\"line\">        route6 ::/0</span><br><span class=\"line\"></span><br><span class=\"line\">wlan0: disconnected</span><br><span class=\"line\">        <span class=\"string\">&quot;Broadcom BCM43438 combo and Bluetooth Low Energy&quot;</span></span><br><span class=\"line\">        wifi (brcmfmac), E4:5F:01:12:68:BD, hw, mtu 1500</span><br><span class=\"line\"></span><br><span class=\"line\">eth0: unmanaged</span><br><span class=\"line\">        <span class=\"string\">&quot;eth0&quot;</span></span><br><span class=\"line\">        ethernet (bcmgenet), E4:5F:01:12:68:BC, hw, mtu 1500</span><br><span class=\"line\"></span><br><span class=\"line\">lo: unmanaged</span><br><span class=\"line\">        <span class=\"string\">&quot;lo&quot;</span></span><br><span class=\"line\">        loopback (unknown), 00:00:00:00:00:00, sw, mtu 65536</span><br><span class=\"line\"></span><br><span class=\"line\">p2p-dev-wlan0: unmanaged</span><br><span class=\"line\">        <span class=\"string\">&quot;p2p-dev-wlan0&quot;</span></span><br><span class=\"line\">        wifi-p2p, hw</span><br><span class=\"line\"></span><br><span class=\"line\">DNS configuration:</span><br><span class=\"line\">        servers: 219.150.32.132 123.150.150.150</span><br><span class=\"line\">        interface: wwan0</span><br><span class=\"line\"></span><br><span class=\"line\">        servers: 240e:45::8888 240e:45::6666</span><br><span class=\"line\">        interface: wwan0</span><br><span class=\"line\"></span><br><span class=\"line\">Use <span class=\"string\">&quot;nmcli device show&quot;</span> to get complete information about known devices and</span><br><span class=\"line\"><span class=\"string\">&quot;nmcli connection show&quot;</span> to get an overview on active connection profiles.</span><br></pre></td></tr></table></figure>"},{"title":"AI的智慧","date":"2025-06-01T02:34:58.000Z","updated":"2025-04-09T12:00:54.000Z","_content":"\n## 卷积核数量级小于10-3e\n### **一、是否合理？**\n#### **合理的情况**\n- **轻量级模型 + 强正则化**：若模型设计极简（如轻量化边缘设备模型）且使用了强 L2 正则化（如 `weight_decay=1e-3`），参数可能被压缩到该范围。\n- **输入数据尺度极小**：若输入数据已归一化到 `[0, 0.1]`，卷积核参数可能自然较小。\n\n#### **不合理的情况**\n- **多数场景下**：参数范围过小（如 `1e-4` 以下）可能表明：\n    1. **学习率过低**：参数更新步幅不足，无法有效学习。\n    2. **梯度消失**：激活函数或初始化不当，导致反向传播梯度趋近于零。\n    3. **权重衰减过强**：正则化过度惩罚大权重，抑制模型表达能力。\n    4. **模型设计缺陷**：网络结构过于简单或层次过浅，无法捕获复杂特征。\n\n### **二、调整方向**\n#### 1. **检查学习率（关键！）**\n- **现象**：参数更新幅度极小（如 `1e-4` 级），可能学习率设置过低。\n- **调整方法**：\n    - 逐步增大学习率（例如从 `1e-4` → `1e-3` → `3e-3`）。\n    - 使用学习率预热（Warmup）或周期性调度（如 `CosineAnnealingLR`）。\n\n#### 2. **降低权重衰减强度**\n- **现象**：L2 正则化（`weight_decay`）过强，导致参数被过度压缩。\n- **调整方法**：\n    - 减少 `weight_decay` 值（例如从 `1e-3` → `1e-4` 或更低）。\n    - 如果任务允许，尝试暂时关闭权重衰减以验证效果。\n\n#### 3. **优化初始化方法**\n- **现象**：初始化参数范围过小（如误用 `Xavier` 但输入通道极大）。\n- **调整方法**：\n    - 使用 `He初始化`（针对 ReLU 族激活函数）或 `Kaiming Normal`。\n    - 针对卷积核手动设置初始化范围：\n```PYTHON\ntorch.nn.init.normal_(conv.weight, mean=0, std=0.02)  # 增大标准差\n``` \n\n#### 4. **检查梯度流动**\n- **现象**：梯度值极小（可用 `torch.autograd.grad` 检查）。\n- **调整方法**：\n    - 添加 **批归一化（BatchNorm）层** 或 **残差连接**，缓解梯度消失。\n    - 更换激活函数（如用 `Leaky ReLU` 替代 `ReLU` 防止负区间死亡）。\n\n#### 5. **验证数据预处理**\n- **现象**：输入数据未正确归一化（如数值范围被压缩到 `[0, 1]` 但未标准化）。\n- **调整方法**：\n    - 确保输入数据标准化为均值 0、方差 1（例如 `transforms.Normalize(mean=[0.5], std=[0.5])`）。\n    - 避免过度归一化导致数据动态范围过小。\n\n#### 6. **模型复杂度调整**\n- **现象**：模型过于简单（如仅 2~3 层卷积），无法有效提取特征。\n- **调整方法**：\n    - 增加网络深度或宽度（例如添加更多卷积层或通道数）。\n    - 引入注意力机制或更复杂的模块（如 `SE Block`、`Inception`）。\n\n## 单目标视觉跟踪评价指标\n### **1. EAO（Expected Average Overlap）**\n\n#### **核心思想**\n\nEAO 综合了跟踪器的**精度**（预测框与真实框的重叠率）和**鲁棒性**（失败频率），适用于长时跟踪场景（如目标消失后需重启跟踪）。\n\n#### **计算步骤**\n\n1. **实验设计**：\n    \n    - 在视频序列中，跟踪器运行时会因失败（如目标丢失）而自动重启（重新初始化）。\n    - 每个视频会被划分为多个**子序列**，每个子序列长度不同（模拟不同时长的跟踪需求）。\n2. **单次子序列评估**：\n    \n    - 对每个子序列，计算跟踪框与真实框的**平均重叠率（Average Overlap, AO）**：$$AO = \\frac{1}{N} \\sum_{t=1}^{N} \\text{IoU}_t$$​其中 $N$是子序列的帧数， $IoU_t$是第$t$帧的交并比（Intersection over Union）。\n3. **统计建模**：\n    \n    - 对所有子序列的 AO 值进行统计分析，拟合一个**概率分布模型**（如高斯分布）。\n    - 计算不同子序列长度下的 AO 期望值，最终得到**预期平均重叠率（EAO）**：$$EAO = \\frac{1}{L_{\\text{max}}} \\int_{L=1}^{L_{\\text{max}}} \\text{AO}(L) \\, dL$$其中 $L_{\\text{max}}$​ 是最大子序列长度，$\\text{AO}(L)$ 是长度为$L$的子序列的平均重叠率。\n\n#### **特点**\n\n- **惩罚失败**：跟踪器失败后需重启，重启次数越多，EAO 越低。\n- **综合性强**：既反映精度（IoU），又反映鲁棒性（失败频率）。\n\n### **2. Accuracy**\n\n#### **核心思想**\n\nAccuracy 衡量跟踪器在单次运行中的**平均精度**，通常有两种计算方式：\n\n#### **方式 1：平均重叠率（Average IoU）**\n\n$$\\text{Accuracy} = \\frac{1}{T} \\sum_{t=1}^{T} \\text{IoU}_t$$​\n\n- $T$是视频总帧数，$IoU_t$是第$t$帧的交并比。\n- **缺点**：未考虑失败帧（若跟踪失败，$IoU$ 直接计为 0，可能低估性能）。\n\n#### **方式 2：成功率（Success Rate）**\n\n- 定义：重叠率超过阈值（如 0.5）的帧占比。\n    \n- 计算步骤：\n    \n    1. 对每帧计算 $IoU$。\n    2. 统计满足 $\\text{IoU}_t \\geq ​θ$ 的帧数（$θ$是阈值）。\n    3. 成功率 = 满足条件的帧数 / 总帧数。\n- **曲线形式**：通常会绘制不同阈值下的成功率曲线（Success Plot），计算曲线下面积（AUC）。\n    \n#### **特点**\n- **忽略失败处理**：假设跟踪器始终运行，失败帧的重叠率直接计为 0。\n- **侧重瞬时精度**：无法反映跟踪器是否需要重启。\n\n### **3.Failure（失败次数）**\n\n#### **定义与计算**\n\n- **失败条件**：  \n    当跟踪器预测的边界框与真实标注框的**交并比（IoU）**降至 **0** 时，判定为一次失败（不同VOT版本可能略有差异，但核心逻辑一致）。\n    \n- **处理流程**：\n    \n    1. 跟踪器在视频序列中运行，逐帧输出预测框。\n    2. 若某帧的 IoU = 0，视为失败，记录失败次数并触发**重新初始化**：\n        - 在后续的 **5帧**（VOT标准协议）中，使用真实标注框重置跟踪器。\n        - 重置后继续跟踪，直到再次失败或视频结束。\n- **最终指标**：\n    \n    - **失败次数** = 整个视频中触发重新初始化的总次数。\n    - **鲁棒性体现**：失败次数越少，算法在遮挡、形变等复杂场景下的稳定性越强。\n\n### **4.EFO（等效滤波操作）**\n\n#### **定义与目的**\n\n- **核心思想**：  \n    消除硬件差异对速度评估的影响，通过将算法速度与一个标准化的滤波操作时间对比，衡量计算效率。\n    \n- **基准操作**：  \n    在 **600×600像素** 的图像上，执行 **30次高斯滤波**（具体参数：核大小 30×30，标准差 0.25）。\n\n#### **计算步骤**\n\n1. **测量基准时间**：\n    \n    - 在同一台测试机器上，运行上述高斯滤波操作，记录耗时 $T_{\\text{ref}}​$（单位：秒）。\n2. **测量算法时间**：\n    \n    - 跟踪算法处理每帧的平均时间为 $T_{\\text{alg}}$（单位：秒/帧）。\n3. **计算EFO**：\n    \n    $\\text{EFO} = \\frac{T_{\\text{ref}}}{T_{\\text{alg}}} \\times 30$\n    - **解释**：\n        - $T_{\\text{ref}} / T_{\\text{alg}}$ 表示算法每帧耗时相当于多少次基准滤波操作。\n        - 乘以30是因为基准操作包含30次滤波。\n\n- **意义**：\n    - EFO值越高，算法速度越快（例如，EFO=100表示算法每帧处理速度相当于100次基准滤波操作）。\n\n### **5.Robustness（ 鲁棒性）**\n\n#### **定义**\n\n综合失败次数和跟踪时长的归一化评分，常见于VOT挑战赛。\n\n- **公式**：\n$$\\text{Robustness} = \\exp\\left(-\\frac{\\text{失败次数}}{\\text{视频总帧数}} \\cdot \\lambda\\right)$$\n    - \\lambdaλ 为调节因子（如VOT2016中$λ=50$）。\n    - 评分范围：0（完全失败）到1（无失败）。\n\n#### **示例**\n\n- 失败次数：3次\n- 视频总帧数：100帧\n- **Robustness** = $\\exp(-3/100 \\times 50) = \\exp(-1.5) \\approx 0.223$\n\n### **6.FLOPs**\n在 PyTorch 中计算模型的 **FLOPs（Floating Point Operations，浮点运算次数）** 可以通过第三方库或手动实现。以下是具体方法及代码示例：\n\n---\n#### **1. 使用现有工具库（推荐）**\n\n#### **(1) 安装工具库**\n\n常用库包括 `thop`、`ptflops` 或 `torchstat`，这里以 `thop` 为例：\n```bash\npip install thop\n```\n\n#### **(2) 计算 FLOPs 的代码示例**\n\n```python\nimport torch\nfrom torchvision.models import resnet18\nfrom thop import profile\n\n# 定义模型和输入\nmodel = resnet18()\ninput = torch.randn(1, 3, 224, 224)  # (batch_size, channels, H, W)\n\n# 计算 FLOPs 和参数量\nflops, params = profile(model, inputs=(input,))\nprint(f\"FLOPs: {flops / 1e9:.2f} G\")  # 输出示例：FLOPs: 1.82 G\nprint(f\"Params: {params / 1e6:.2f} M\")  # 输出示例：Params: 11.69 M\n```\n#### **(3) 工具库原理**\n\n- **`thop`**：通过遍历模型的计算图，统计每一层的 FLOPs（如卷积、全连接等），累加得到总次数。\n- **支持的层类型**：卷积、池化、激活函数、全连接等常见层。\n\n---\n\n#### **2. 手动计算（理解原理）**\n\n#### **(1) 卷积层的 FLOPs 公式**\n\n对于卷积层，FLOPs 计算公式为：\n\n$$\\text{FLOPs} = \\underbrace{H_{\\text{out}} \\cdot W_{\\text{out}}}_{\\text{输出特征图大小}} \\cdot \\underbrace{(C_{\\text{in}} \\cdot K_h \\cdot K_w)}_{\\text{每个输出点的计算量}} \\cdot \\underbrace{C_{\\text{out}}}_{\\text{输出通道数}} \\div \\text{groups}​​​$$\n\n- $K_h$, $K_w$​：卷积核高和宽\n- $C_{\\text{in}}, C_{\\text{out}}$：输入/输出通道数\n- `groups`：分组卷积的分组数\n\n#### **(2) 全连接层的 FLOPs 公式**\n\n$$\\text{FLOPs} = \\text{输入维度} \\cdot \\text{输出维度}$$\n#### **(3) 代码实现示例**\n\n```python\ndef count_conv_flops(module, input, output):\n    # 获取卷积层参数\n    in_channels = module.in_channels\n    out_channels = module.out_channels\n    kernel_size = module.kernel_size\n    groups = module.groups\n    \n    # 计算单个位置的计算量\n    flops_per_position = in_channels // groups * kernel_size[0] * kernel_size[1]\n    \n    # 总 FLOPs\n    output_size = output.size(2) * output.size(3)  # H_out * W_out\n    total_flops = output_size * out_channels * flops_per_position\n    \n    return total_flops\n\n# 注册钩子统计各层 FLOPs\ntotal_flops = 0\ndef hook_fn(module, input, output):\n    global total_flops\n    if isinstance(module, torch.nn.Conv2d):\n        total_flops += count_conv_flops(module, input, output)\n\nmodel = resnet18()\nfor layer in model.modules():\n    layer.register_forward_hook(hook_fn)\n\n# 前向传播触发计算\ninput = torch.randn(1, 3, 224, 224)\nmodel(input)\nprint(f\"Total FLOPs: {total_flops / 1e9:.2f} G\")\n```\n\n---\n\n#### **3. 注意事项**\n\n1. **工具库差异**：\n    \n    - `thop` 和 `ptflops` 结果可能因实现细节不同（如是否统计激活函数）。\n    - 推荐使用同一工具库进行模型间对比。\n2. **动态计算图**：\n    \n    - 若模型包含动态分支（如条件判断），工具库可能无法准确统计，需手动修正。\n3. **硬件无关性**：\n    \n    - FLOPs 是理论计算量，实际速度还受内存带宽、并行度等硬件因素影响。\n\n---\n\n#### **4. 其他工具**\n\n- **`torchinfo`**：可视化模型结构并统计 FLOPs（需配合 `thop`）：\n```bash\npip install torchinfo\n```\n\n```python\nfrom torchinfo import summary\nsummary(model, input_size=(1, 3, 224, 224), col_names=[\"input_size\", \"output_size\", \"num_params\", \"flops\"])\n```\n    \n- **`fvcore`**（Facebook 官方库）：\n```python\nfrom fvcore.nn import FlopCountAnalysis\nflops = FlopCountAnalysis(model, input)\nprint(flops.total())\n```","source":"_posts/2025-06-01-AI的智慧.md","raw":"---\ntitle: AI的智慧\ndate: 2025-06-01 10:34:58\nupdated: 2025-04-09 20:00:54\ncategories:\n  - [程序相关]\ntags:\npermalink: ai的智慧/\n---\n\n## 卷积核数量级小于10-3e\n### **一、是否合理？**\n#### **合理的情况**\n- **轻量级模型 + 强正则化**：若模型设计极简（如轻量化边缘设备模型）且使用了强 L2 正则化（如 `weight_decay=1e-3`），参数可能被压缩到该范围。\n- **输入数据尺度极小**：若输入数据已归一化到 `[0, 0.1]`，卷积核参数可能自然较小。\n\n#### **不合理的情况**\n- **多数场景下**：参数范围过小（如 `1e-4` 以下）可能表明：\n    1. **学习率过低**：参数更新步幅不足，无法有效学习。\n    2. **梯度消失**：激活函数或初始化不当，导致反向传播梯度趋近于零。\n    3. **权重衰减过强**：正则化过度惩罚大权重，抑制模型表达能力。\n    4. **模型设计缺陷**：网络结构过于简单或层次过浅，无法捕获复杂特征。\n\n### **二、调整方向**\n#### 1. **检查学习率（关键！）**\n- **现象**：参数更新幅度极小（如 `1e-4` 级），可能学习率设置过低。\n- **调整方法**：\n    - 逐步增大学习率（例如从 `1e-4` → `1e-3` → `3e-3`）。\n    - 使用学习率预热（Warmup）或周期性调度（如 `CosineAnnealingLR`）。\n\n#### 2. **降低权重衰减强度**\n- **现象**：L2 正则化（`weight_decay`）过强，导致参数被过度压缩。\n- **调整方法**：\n    - 减少 `weight_decay` 值（例如从 `1e-3` → `1e-4` 或更低）。\n    - 如果任务允许，尝试暂时关闭权重衰减以验证效果。\n\n#### 3. **优化初始化方法**\n- **现象**：初始化参数范围过小（如误用 `Xavier` 但输入通道极大）。\n- **调整方法**：\n    - 使用 `He初始化`（针对 ReLU 族激活函数）或 `Kaiming Normal`。\n    - 针对卷积核手动设置初始化范围：\n```PYTHON\ntorch.nn.init.normal_(conv.weight, mean=0, std=0.02)  # 增大标准差\n``` \n\n#### 4. **检查梯度流动**\n- **现象**：梯度值极小（可用 `torch.autograd.grad` 检查）。\n- **调整方法**：\n    - 添加 **批归一化（BatchNorm）层** 或 **残差连接**，缓解梯度消失。\n    - 更换激活函数（如用 `Leaky ReLU` 替代 `ReLU` 防止负区间死亡）。\n\n#### 5. **验证数据预处理**\n- **现象**：输入数据未正确归一化（如数值范围被压缩到 `[0, 1]` 但未标准化）。\n- **调整方法**：\n    - 确保输入数据标准化为均值 0、方差 1（例如 `transforms.Normalize(mean=[0.5], std=[0.5])`）。\n    - 避免过度归一化导致数据动态范围过小。\n\n#### 6. **模型复杂度调整**\n- **现象**：模型过于简单（如仅 2~3 层卷积），无法有效提取特征。\n- **调整方法**：\n    - 增加网络深度或宽度（例如添加更多卷积层或通道数）。\n    - 引入注意力机制或更复杂的模块（如 `SE Block`、`Inception`）。\n\n## 单目标视觉跟踪评价指标\n### **1. EAO（Expected Average Overlap）**\n\n#### **核心思想**\n\nEAO 综合了跟踪器的**精度**（预测框与真实框的重叠率）和**鲁棒性**（失败频率），适用于长时跟踪场景（如目标消失后需重启跟踪）。\n\n#### **计算步骤**\n\n1. **实验设计**：\n    \n    - 在视频序列中，跟踪器运行时会因失败（如目标丢失）而自动重启（重新初始化）。\n    - 每个视频会被划分为多个**子序列**，每个子序列长度不同（模拟不同时长的跟踪需求）。\n2. **单次子序列评估**：\n    \n    - 对每个子序列，计算跟踪框与真实框的**平均重叠率（Average Overlap, AO）**：$$AO = \\frac{1}{N} \\sum_{t=1}^{N} \\text{IoU}_t$$​其中 $N$是子序列的帧数， $IoU_t$是第$t$帧的交并比（Intersection over Union）。\n3. **统计建模**：\n    \n    - 对所有子序列的 AO 值进行统计分析，拟合一个**概率分布模型**（如高斯分布）。\n    - 计算不同子序列长度下的 AO 期望值，最终得到**预期平均重叠率（EAO）**：$$EAO = \\frac{1}{L_{\\text{max}}} \\int_{L=1}^{L_{\\text{max}}} \\text{AO}(L) \\, dL$$其中 $L_{\\text{max}}$​ 是最大子序列长度，$\\text{AO}(L)$ 是长度为$L$的子序列的平均重叠率。\n\n#### **特点**\n\n- **惩罚失败**：跟踪器失败后需重启，重启次数越多，EAO 越低。\n- **综合性强**：既反映精度（IoU），又反映鲁棒性（失败频率）。\n\n### **2. Accuracy**\n\n#### **核心思想**\n\nAccuracy 衡量跟踪器在单次运行中的**平均精度**，通常有两种计算方式：\n\n#### **方式 1：平均重叠率（Average IoU）**\n\n$$\\text{Accuracy} = \\frac{1}{T} \\sum_{t=1}^{T} \\text{IoU}_t$$​\n\n- $T$是视频总帧数，$IoU_t$是第$t$帧的交并比。\n- **缺点**：未考虑失败帧（若跟踪失败，$IoU$ 直接计为 0，可能低估性能）。\n\n#### **方式 2：成功率（Success Rate）**\n\n- 定义：重叠率超过阈值（如 0.5）的帧占比。\n    \n- 计算步骤：\n    \n    1. 对每帧计算 $IoU$。\n    2. 统计满足 $\\text{IoU}_t \\geq ​θ$ 的帧数（$θ$是阈值）。\n    3. 成功率 = 满足条件的帧数 / 总帧数。\n- **曲线形式**：通常会绘制不同阈值下的成功率曲线（Success Plot），计算曲线下面积（AUC）。\n    \n#### **特点**\n- **忽略失败处理**：假设跟踪器始终运行，失败帧的重叠率直接计为 0。\n- **侧重瞬时精度**：无法反映跟踪器是否需要重启。\n\n### **3.Failure（失败次数）**\n\n#### **定义与计算**\n\n- **失败条件**：  \n    当跟踪器预测的边界框与真实标注框的**交并比（IoU）**降至 **0** 时，判定为一次失败（不同VOT版本可能略有差异，但核心逻辑一致）。\n    \n- **处理流程**：\n    \n    1. 跟踪器在视频序列中运行，逐帧输出预测框。\n    2. 若某帧的 IoU = 0，视为失败，记录失败次数并触发**重新初始化**：\n        - 在后续的 **5帧**（VOT标准协议）中，使用真实标注框重置跟踪器。\n        - 重置后继续跟踪，直到再次失败或视频结束。\n- **最终指标**：\n    \n    - **失败次数** = 整个视频中触发重新初始化的总次数。\n    - **鲁棒性体现**：失败次数越少，算法在遮挡、形变等复杂场景下的稳定性越强。\n\n### **4.EFO（等效滤波操作）**\n\n#### **定义与目的**\n\n- **核心思想**：  \n    消除硬件差异对速度评估的影响，通过将算法速度与一个标准化的滤波操作时间对比，衡量计算效率。\n    \n- **基准操作**：  \n    在 **600×600像素** 的图像上，执行 **30次高斯滤波**（具体参数：核大小 30×30，标准差 0.25）。\n\n#### **计算步骤**\n\n1. **测量基准时间**：\n    \n    - 在同一台测试机器上，运行上述高斯滤波操作，记录耗时 $T_{\\text{ref}}​$（单位：秒）。\n2. **测量算法时间**：\n    \n    - 跟踪算法处理每帧的平均时间为 $T_{\\text{alg}}$（单位：秒/帧）。\n3. **计算EFO**：\n    \n    $\\text{EFO} = \\frac{T_{\\text{ref}}}{T_{\\text{alg}}} \\times 30$\n    - **解释**：\n        - $T_{\\text{ref}} / T_{\\text{alg}}$ 表示算法每帧耗时相当于多少次基准滤波操作。\n        - 乘以30是因为基准操作包含30次滤波。\n\n- **意义**：\n    - EFO值越高，算法速度越快（例如，EFO=100表示算法每帧处理速度相当于100次基准滤波操作）。\n\n### **5.Robustness（ 鲁棒性）**\n\n#### **定义**\n\n综合失败次数和跟踪时长的归一化评分，常见于VOT挑战赛。\n\n- **公式**：\n$$\\text{Robustness} = \\exp\\left(-\\frac{\\text{失败次数}}{\\text{视频总帧数}} \\cdot \\lambda\\right)$$\n    - \\lambdaλ 为调节因子（如VOT2016中$λ=50$）。\n    - 评分范围：0（完全失败）到1（无失败）。\n\n#### **示例**\n\n- 失败次数：3次\n- 视频总帧数：100帧\n- **Robustness** = $\\exp(-3/100 \\times 50) = \\exp(-1.5) \\approx 0.223$\n\n### **6.FLOPs**\n在 PyTorch 中计算模型的 **FLOPs（Floating Point Operations，浮点运算次数）** 可以通过第三方库或手动实现。以下是具体方法及代码示例：\n\n---\n#### **1. 使用现有工具库（推荐）**\n\n#### **(1) 安装工具库**\n\n常用库包括 `thop`、`ptflops` 或 `torchstat`，这里以 `thop` 为例：\n```bash\npip install thop\n```\n\n#### **(2) 计算 FLOPs 的代码示例**\n\n```python\nimport torch\nfrom torchvision.models import resnet18\nfrom thop import profile\n\n# 定义模型和输入\nmodel = resnet18()\ninput = torch.randn(1, 3, 224, 224)  # (batch_size, channels, H, W)\n\n# 计算 FLOPs 和参数量\nflops, params = profile(model, inputs=(input,))\nprint(f\"FLOPs: {flops / 1e9:.2f} G\")  # 输出示例：FLOPs: 1.82 G\nprint(f\"Params: {params / 1e6:.2f} M\")  # 输出示例：Params: 11.69 M\n```\n#### **(3) 工具库原理**\n\n- **`thop`**：通过遍历模型的计算图，统计每一层的 FLOPs（如卷积、全连接等），累加得到总次数。\n- **支持的层类型**：卷积、池化、激活函数、全连接等常见层。\n\n---\n\n#### **2. 手动计算（理解原理）**\n\n#### **(1) 卷积层的 FLOPs 公式**\n\n对于卷积层，FLOPs 计算公式为：\n\n$$\\text{FLOPs} = \\underbrace{H_{\\text{out}} \\cdot W_{\\text{out}}}_{\\text{输出特征图大小}} \\cdot \\underbrace{(C_{\\text{in}} \\cdot K_h \\cdot K_w)}_{\\text{每个输出点的计算量}} \\cdot \\underbrace{C_{\\text{out}}}_{\\text{输出通道数}} \\div \\text{groups}​​​$$\n\n- $K_h$, $K_w$​：卷积核高和宽\n- $C_{\\text{in}}, C_{\\text{out}}$：输入/输出通道数\n- `groups`：分组卷积的分组数\n\n#### **(2) 全连接层的 FLOPs 公式**\n\n$$\\text{FLOPs} = \\text{输入维度} \\cdot \\text{输出维度}$$\n#### **(3) 代码实现示例**\n\n```python\ndef count_conv_flops(module, input, output):\n    # 获取卷积层参数\n    in_channels = module.in_channels\n    out_channels = module.out_channels\n    kernel_size = module.kernel_size\n    groups = module.groups\n    \n    # 计算单个位置的计算量\n    flops_per_position = in_channels // groups * kernel_size[0] * kernel_size[1]\n    \n    # 总 FLOPs\n    output_size = output.size(2) * output.size(3)  # H_out * W_out\n    total_flops = output_size * out_channels * flops_per_position\n    \n    return total_flops\n\n# 注册钩子统计各层 FLOPs\ntotal_flops = 0\ndef hook_fn(module, input, output):\n    global total_flops\n    if isinstance(module, torch.nn.Conv2d):\n        total_flops += count_conv_flops(module, input, output)\n\nmodel = resnet18()\nfor layer in model.modules():\n    layer.register_forward_hook(hook_fn)\n\n# 前向传播触发计算\ninput = torch.randn(1, 3, 224, 224)\nmodel(input)\nprint(f\"Total FLOPs: {total_flops / 1e9:.2f} G\")\n```\n\n---\n\n#### **3. 注意事项**\n\n1. **工具库差异**：\n    \n    - `thop` 和 `ptflops` 结果可能因实现细节不同（如是否统计激活函数）。\n    - 推荐使用同一工具库进行模型间对比。\n2. **动态计算图**：\n    \n    - 若模型包含动态分支（如条件判断），工具库可能无法准确统计，需手动修正。\n3. **硬件无关性**：\n    \n    - FLOPs 是理论计算量，实际速度还受内存带宽、并行度等硬件因素影响。\n\n---\n\n#### **4. 其他工具**\n\n- **`torchinfo`**：可视化模型结构并统计 FLOPs（需配合 `thop`）：\n```bash\npip install torchinfo\n```\n\n```python\nfrom torchinfo import summary\nsummary(model, input_size=(1, 3, 224, 224), col_names=[\"input_size\", \"output_size\", \"num_params\", \"flops\"])\n```\n    \n- **`fvcore`**（Facebook 官方库）：\n```python\nfrom fvcore.nn import FlopCountAnalysis\nflops = FlopCountAnalysis(model, input)\nprint(flops.total())\n```","slug":"2025-06-01-AI的智慧","published":1,"__permalink":"ai的智慧/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0mn0002zovd38cx1kr9","content":"<h2 id=\"卷积核数量级小于10-3e\"><a href=\"#卷积核数量级小于10-3e\" class=\"headerlink\" title=\"卷积核数量级小于10-3e\"></a>卷积核数量级小于10-3e</h2><h3 id=\"一、是否合理？\"><a href=\"#一、是否合理？\" class=\"headerlink\" title=\"一、是否合理？\"></a><strong>一、是否合理？</strong></h3><h4 id=\"合理的情况\"><a href=\"#合理的情况\" class=\"headerlink\" title=\"合理的情况\"></a><strong>合理的情况</strong></h4><ul>\n<li><strong>轻量级模型 + 强正则化</strong>：若模型设计极简（如轻量化边缘设备模型）且使用了强 L2 正则化（如 <code>weight_decay=1e-3</code>），参数可能被压缩到该范围。</li>\n<li><strong>输入数据尺度极小</strong>：若输入数据已归一化到 <code>[0, 0.1]</code>，卷积核参数可能自然较小。</li>\n</ul>\n<h4 id=\"不合理的情况\"><a href=\"#不合理的情况\" class=\"headerlink\" title=\"不合理的情况\"></a><strong>不合理的情况</strong></h4><ul>\n<li><strong>多数场景下</strong>：参数范围过小（如 <code>1e-4</code> 以下）可能表明：<ol>\n<li><strong>学习率过低</strong>：参数更新步幅不足，无法有效学习。</li>\n<li><strong>梯度消失</strong>：激活函数或初始化不当，导致反向传播梯度趋近于零。</li>\n<li><strong>权重衰减过强</strong>：正则化过度惩罚大权重，抑制模型表达能力。</li>\n<li><strong>模型设计缺陷</strong>：网络结构过于简单或层次过浅，无法捕获复杂特征。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"二、调整方向\"><a href=\"#二、调整方向\" class=\"headerlink\" title=\"二、调整方向\"></a><strong>二、调整方向</strong></h3><h4 id=\"1-检查学习率（关键！）\"><a href=\"#1-检查学习率（关键！）\" class=\"headerlink\" title=\"1. 检查学习率（关键！）\"></a>1. <strong>检查学习率（关键！）</strong></h4><ul>\n<li><strong>现象</strong>：参数更新幅度极小（如 <code>1e-4</code> 级），可能学习率设置过低。</li>\n<li><strong>调整方法</strong>：<ul>\n<li>逐步增大学习率（例如从 <code>1e-4</code> → <code>1e-3</code> → <code>3e-3</code>）。</li>\n<li>使用学习率预热（Warmup）或周期性调度（如 <code>CosineAnnealingLR</code>）。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-降低权重衰减强度\"><a href=\"#2-降低权重衰减强度\" class=\"headerlink\" title=\"2. 降低权重衰减强度\"></a>2. <strong>降低权重衰减强度</strong></h4><ul>\n<li><strong>现象</strong>：L2 正则化（<code>weight_decay</code>）过强，导致参数被过度压缩。</li>\n<li><strong>调整方法</strong>：<ul>\n<li>减少 <code>weight_decay</code> 值（例如从 <code>1e-3</code> → <code>1e-4</code> 或更低）。</li>\n<li>如果任务允许，尝试暂时关闭权重衰减以验证效果。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-优化初始化方法\"><a href=\"#3-优化初始化方法\" class=\"headerlink\" title=\"3. 优化初始化方法\"></a>3. <strong>优化初始化方法</strong></h4><ul>\n<li><strong>现象</strong>：初始化参数范围过小（如误用 <code>Xavier</code> 但输入通道极大）。</li>\n<li><strong>调整方法</strong>：<ul>\n<li>使用 <code>He初始化</code>（针对 ReLU 族激活函数）或 <code>Kaiming Normal</code>。</li>\n<li>针对卷积核手动设置初始化范围：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">torch.nn.init.normal_(conv.weight, mean=<span class=\"number\">0</span>, std=<span class=\"number\">0.02</span>)  <span class=\"comment\"># 增大标准差</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"4-检查梯度流动\"><a href=\"#4-检查梯度流动\" class=\"headerlink\" title=\"4. 检查梯度流动\"></a>4. <strong>检查梯度流动</strong></h4><ul>\n<li><strong>现象</strong>：梯度值极小（可用 <code>torch.autograd.grad</code> 检查）。</li>\n<li><strong>调整方法</strong>：<ul>\n<li>添加 <strong>批归一化（BatchNorm）层</strong> 或 <strong>残差连接</strong>，缓解梯度消失。</li>\n<li>更换激活函数（如用 <code>Leaky ReLU</code> 替代 <code>ReLU</code> 防止负区间死亡）。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"5-验证数据预处理\"><a href=\"#5-验证数据预处理\" class=\"headerlink\" title=\"5. 验证数据预处理\"></a>5. <strong>验证数据预处理</strong></h4><ul>\n<li><strong>现象</strong>：输入数据未正确归一化（如数值范围被压缩到 <code>[0, 1]</code> 但未标准化）。</li>\n<li><strong>调整方法</strong>：<ul>\n<li>确保输入数据标准化为均值 0、方差 1（例如 <code>transforms.Normalize(mean=[0.5], std=[0.5])</code>）。</li>\n<li>避免过度归一化导致数据动态范围过小。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6-模型复杂度调整\"><a href=\"#6-模型复杂度调整\" class=\"headerlink\" title=\"6. 模型复杂度调整\"></a>6. <strong>模型复杂度调整</strong></h4><ul>\n<li><strong>现象</strong>：模型过于简单（如仅 2~3 层卷积），无法有效提取特征。</li>\n<li><strong>调整方法</strong>：<ul>\n<li>增加网络深度或宽度（例如添加更多卷积层或通道数）。</li>\n<li>引入注意力机制或更复杂的模块（如 <code>SE Block</code>、<code>Inception</code>）。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"单目标视觉跟踪评价指标\"><a href=\"#单目标视觉跟踪评价指标\" class=\"headerlink\" title=\"单目标视觉跟踪评价指标\"></a>单目标视觉跟踪评价指标</h2><h3 id=\"1-EAO（Expected-Average-Overlap）\"><a href=\"#1-EAO（Expected-Average-Overlap）\" class=\"headerlink\" title=\"1. EAO（Expected Average Overlap）\"></a><strong>1. EAO（Expected Average Overlap）</strong></h3><h4 id=\"核心思想\"><a href=\"#核心思想\" class=\"headerlink\" title=\"核心思想\"></a><strong>核心思想</strong></h4><p>EAO 综合了跟踪器的<strong>精度</strong>（预测框与真实框的重叠率）和<strong>鲁棒性</strong>（失败频率），适用于长时跟踪场景（如目标消失后需重启跟踪）。</p>\n<h4 id=\"计算步骤\"><a href=\"#计算步骤\" class=\"headerlink\" title=\"计算步骤\"></a><strong>计算步骤</strong></h4><ol>\n<li><p><strong>实验设计</strong>：</p>\n<ul>\n<li>在视频序列中，跟踪器运行时会因失败（如目标丢失）而自动重启（重新初始化）。</li>\n<li>每个视频会被划分为多个<strong>子序列</strong>，每个子序列长度不同（模拟不同时长的跟踪需求）。</li>\n</ul>\n</li>\n<li><p><strong>单次子序列评估</strong>：</p>\n<ul>\n<li>对每个子序列，计算跟踪框与真实框的<strong>平均重叠率（Average Overlap, AO）</strong>：$$AO &#x3D; \\frac{1}{N} \\sum_{t&#x3D;1}^{N} \\text{IoU}_t$$​其中 $N$是子序列的帧数， $IoU_t$是第$t$帧的交并比（Intersection over Union）。</li>\n</ul>\n</li>\n<li><p><strong>统计建模</strong>：</p>\n<ul>\n<li>对所有子序列的 AO 值进行统计分析，拟合一个<strong>概率分布模型</strong>（如高斯分布）。</li>\n<li>计算不同子序列长度下的 AO 期望值，最终得到<strong>预期平均重叠率（EAO）</strong>：$$EAO &#x3D; \\frac{1}{L_{\\text{max}}} \\int_{L&#x3D;1}^{L_{\\text{max}}} \\text{AO}(L) , dL$$其中 $L_{\\text{max}}$​ 是最大子序列长度，$\\text{AO}(L)$ 是长度为$L$的子序列的平均重叠率。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a><strong>特点</strong></h4><ul>\n<li><strong>惩罚失败</strong>：跟踪器失败后需重启，重启次数越多，EAO 越低。</li>\n<li><strong>综合性强</strong>：既反映精度（IoU），又反映鲁棒性（失败频率）。</li>\n</ul>\n<h3 id=\"2-Accuracy\"><a href=\"#2-Accuracy\" class=\"headerlink\" title=\"2. Accuracy\"></a><strong>2. Accuracy</strong></h3><h4 id=\"核心思想-1\"><a href=\"#核心思想-1\" class=\"headerlink\" title=\"核心思想\"></a><strong>核心思想</strong></h4><p>Accuracy 衡量跟踪器在单次运行中的<strong>平均精度</strong>，通常有两种计算方式：</p>\n<h4 id=\"方式-1：平均重叠率（Average-IoU）\"><a href=\"#方式-1：平均重叠率（Average-IoU）\" class=\"headerlink\" title=\"方式 1：平均重叠率（Average IoU）\"></a><strong>方式 1：平均重叠率（Average IoU）</strong></h4><p>$$\\text{Accuracy} &#x3D; \\frac{1}{T} \\sum_{t&#x3D;1}^{T} \\text{IoU}_t$$​</p>\n<ul>\n<li>$T$是视频总帧数，$IoU_t$是第$t$帧的交并比。</li>\n<li><strong>缺点</strong>：未考虑失败帧（若跟踪失败，$IoU$ 直接计为 0，可能低估性能）。</li>\n</ul>\n<h4 id=\"方式-2：成功率（Success-Rate）\"><a href=\"#方式-2：成功率（Success-Rate）\" class=\"headerlink\" title=\"方式 2：成功率（Success Rate）\"></a><strong>方式 2：成功率（Success Rate）</strong></h4><ul>\n<li><p>定义：重叠率超过阈值（如 0.5）的帧占比。</p>\n</li>\n<li><p>计算步骤：</p>\n<ol>\n<li>对每帧计算 $IoU$。</li>\n<li>统计满足 $\\text{IoU}_t \\geq ​θ$ 的帧数（$θ$是阈值）。</li>\n<li>成功率 &#x3D; 满足条件的帧数 &#x2F; 总帧数。</li>\n</ol>\n</li>\n<li><p><strong>曲线形式</strong>：通常会绘制不同阈值下的成功率曲线（Success Plot），计算曲线下面积（AUC）。</p>\n</li>\n</ul>\n<h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a><strong>特点</strong></h4><ul>\n<li><strong>忽略失败处理</strong>：假设跟踪器始终运行，失败帧的重叠率直接计为 0。</li>\n<li><strong>侧重瞬时精度</strong>：无法反映跟踪器是否需要重启。</li>\n</ul>\n<h3 id=\"3-Failure（失败次数）\"><a href=\"#3-Failure（失败次数）\" class=\"headerlink\" title=\"3.Failure（失败次数）\"></a><strong>3.Failure（失败次数）</strong></h3><h4 id=\"定义与计算\"><a href=\"#定义与计算\" class=\"headerlink\" title=\"定义与计算\"></a><strong>定义与计算</strong></h4><ul>\n<li><p><strong>失败条件</strong>：<br>  当跟踪器预测的边界框与真实标注框的<strong>交并比（IoU）</strong>降至 <strong>0</strong> 时，判定为一次失败（不同VOT版本可能略有差异，但核心逻辑一致）。</p>\n</li>\n<li><p><strong>处理流程</strong>：</p>\n<ol>\n<li>跟踪器在视频序列中运行，逐帧输出预测框。</li>\n<li>若某帧的 IoU &#x3D; 0，视为失败，记录失败次数并触发<strong>重新初始化</strong>：<ul>\n<li>在后续的 <strong>5帧</strong>（VOT标准协议）中，使用真实标注框重置跟踪器。</li>\n<li>重置后继续跟踪，直到再次失败或视频结束。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p><strong>最终指标</strong>：</p>\n<ul>\n<li><strong>失败次数</strong> &#x3D; 整个视频中触发重新初始化的总次数。</li>\n<li><strong>鲁棒性体现</strong>：失败次数越少，算法在遮挡、形变等复杂场景下的稳定性越强。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-EFO（等效滤波操作）\"><a href=\"#4-EFO（等效滤波操作）\" class=\"headerlink\" title=\"4.EFO（等效滤波操作）\"></a><strong>4.EFO（等效滤波操作）</strong></h3><h4 id=\"定义与目的\"><a href=\"#定义与目的\" class=\"headerlink\" title=\"定义与目的\"></a><strong>定义与目的</strong></h4><ul>\n<li><p><strong>核心思想</strong>：<br>  消除硬件差异对速度评估的影响，通过将算法速度与一个标准化的滤波操作时间对比，衡量计算效率。</p>\n</li>\n<li><p><strong>基准操作</strong>：<br>  在 <strong>600×600像素</strong> 的图像上，执行 <strong>30次高斯滤波</strong>（具体参数：核大小 30×30，标准差 0.25）。</p>\n</li>\n</ul>\n<h4 id=\"计算步骤-1\"><a href=\"#计算步骤-1\" class=\"headerlink\" title=\"计算步骤\"></a><strong>计算步骤</strong></h4><ol>\n<li><p><strong>测量基准时间</strong>：</p>\n<ul>\n<li>在同一台测试机器上，运行上述高斯滤波操作，记录耗时 $T_{\\text{ref}}​$（单位：秒）。</li>\n</ul>\n</li>\n<li><p><strong>测量算法时间</strong>：</p>\n<ul>\n<li>跟踪算法处理每帧的平均时间为 $T_{\\text{alg}}$（单位：秒&#x2F;帧）。</li>\n</ul>\n</li>\n<li><p><strong>计算EFO</strong>：</p>\n<p> $\\text{EFO} &#x3D; \\frac{T_{\\text{ref}}}{T_{\\text{alg}}} \\times 30$</p>\n<ul>\n<li><strong>解释</strong>：<ul>\n<li>$T_{\\text{ref}} &#x2F; T_{\\text{alg}}$ 表示算法每帧耗时相当于多少次基准滤波操作。</li>\n<li>乘以30是因为基准操作包含30次滤波。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><strong>意义</strong>：<ul>\n<li>EFO值越高，算法速度越快（例如，EFO&#x3D;100表示算法每帧处理速度相当于100次基准滤波操作）。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-Robustness（-鲁棒性）\"><a href=\"#5-Robustness（-鲁棒性）\" class=\"headerlink\" title=\"5.Robustness（ 鲁棒性）\"></a><strong>5.Robustness（ 鲁棒性）</strong></h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a><strong>定义</strong></h4><p>综合失败次数和跟踪时长的归一化评分，常见于VOT挑战赛。</p>\n<ul>\n<li><strong>公式</strong>：<br>$$\\text{Robustness} &#x3D; \\exp\\left(-\\frac{\\text{失败次数}}{\\text{视频总帧数}} \\cdot \\lambda\\right)$$<ul>\n<li>\\lambdaλ 为调节因子（如VOT2016中$λ&#x3D;50$）。</li>\n<li>评分范围：0（完全失败）到1（无失败）。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a><strong>示例</strong></h4><ul>\n<li>失败次数：3次</li>\n<li>视频总帧数：100帧</li>\n<li><strong>Robustness</strong> &#x3D; $\\exp(-3&#x2F;100 \\times 50) &#x3D; \\exp(-1.5) \\approx 0.223$</li>\n</ul>\n<h3 id=\"6-FLOPs\"><a href=\"#6-FLOPs\" class=\"headerlink\" title=\"6.FLOPs\"></a><strong>6.FLOPs</strong></h3><p>在 PyTorch 中计算模型的 <strong>FLOPs（Floating Point Operations，浮点运算次数）</strong> 可以通过第三方库或手动实现。以下是具体方法及代码示例：</p>\n<hr>\n<h4 id=\"1-使用现有工具库（推荐）\"><a href=\"#1-使用现有工具库（推荐）\" class=\"headerlink\" title=\"1. 使用现有工具库（推荐）\"></a><strong>1. 使用现有工具库（推荐）</strong></h4><h4 id=\"1-安装工具库\"><a href=\"#1-安装工具库\" class=\"headerlink\" title=\"(1) 安装工具库\"></a><strong>(1) 安装工具库</strong></h4><p>常用库包括 <code>thop</code>、<code>ptflops</code> 或 <code>torchstat</code>，这里以 <code>thop</code> 为例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install thop</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-计算-FLOPs-的代码示例\"><a href=\"#2-计算-FLOPs-的代码示例\" class=\"headerlink\" title=\"(2) 计算 FLOPs 的代码示例\"></a><strong>(2) 计算 FLOPs 的代码示例</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">from</span> torchvision.models <span class=\"keyword\">import</span> resnet18</span><br><span class=\"line\"><span class=\"keyword\">from</span> thop <span class=\"keyword\">import</span> profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义模型和输入</span></span><br><span class=\"line\">model = resnet18()</span><br><span class=\"line\"><span class=\"built_in\">input</span> = torch.randn(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">224</span>, <span class=\"number\">224</span>)  <span class=\"comment\"># (batch_size, channels, H, W)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算 FLOPs 和参数量</span></span><br><span class=\"line\">flops, params = profile(model, inputs=(<span class=\"built_in\">input</span>,))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;FLOPs: <span class=\"subst\">&#123;flops / <span class=\"number\">1e9</span>:<span class=\"number\">.2</span>f&#125;</span> G&quot;</span>)  <span class=\"comment\"># 输出示例：FLOPs: 1.82 G</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Params: <span class=\"subst\">&#123;params / <span class=\"number\">1e6</span>:<span class=\"number\">.2</span>f&#125;</span> M&quot;</span>)  <span class=\"comment\"># 输出示例：Params: 11.69 M</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-工具库原理\"><a href=\"#3-工具库原理\" class=\"headerlink\" title=\"(3) 工具库原理\"></a><strong>(3) 工具库原理</strong></h4><ul>\n<li>**<code>thop</code>**：通过遍历模型的计算图，统计每一层的 FLOPs（如卷积、全连接等），累加得到总次数。</li>\n<li><strong>支持的层类型</strong>：卷积、池化、激活函数、全连接等常见层。</li>\n</ul>\n<hr>\n<h4 id=\"2-手动计算（理解原理）\"><a href=\"#2-手动计算（理解原理）\" class=\"headerlink\" title=\"2. 手动计算（理解原理）\"></a><strong>2. 手动计算（理解原理）</strong></h4><h4 id=\"1-卷积层的-FLOPs-公式\"><a href=\"#1-卷积层的-FLOPs-公式\" class=\"headerlink\" title=\"(1) 卷积层的 FLOPs 公式\"></a><strong>(1) 卷积层的 FLOPs 公式</strong></h4><p>对于卷积层，FLOPs 计算公式为：</p>\n<p>$$\\text{FLOPs} &#x3D; \\underbrace{H_{\\text{out}} \\cdot W_{\\text{out}}}<em>{\\text{输出特征图大小}} \\cdot \\underbrace{(C</em>{\\text{in}} \\cdot K_h \\cdot K_w)}<em>{\\text{每个输出点的计算量}} \\cdot \\underbrace{C</em>{\\text{out}}}_{\\text{输出通道数}} \\div \\text{groups}​​​$$</p>\n<ul>\n<li>$K_h$, $K_w$​：卷积核高和宽</li>\n<li>$C_{\\text{in}}, C_{\\text{out}}$：输入&#x2F;输出通道数</li>\n<li><code>groups</code>：分组卷积的分组数</li>\n</ul>\n<h4 id=\"2-全连接层的-FLOPs-公式\"><a href=\"#2-全连接层的-FLOPs-公式\" class=\"headerlink\" title=\"(2) 全连接层的 FLOPs 公式\"></a><strong>(2) 全连接层的 FLOPs 公式</strong></h4><p>$$\\text{FLOPs} &#x3D; \\text{输入维度} \\cdot \\text{输出维度}$$</p>\n<h4 id=\"3-代码实现示例\"><a href=\"#3-代码实现示例\" class=\"headerlink\" title=\"(3) 代码实现示例\"></a><strong>(3) 代码实现示例</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">count_conv_flops</span>(<span class=\"params\">module, <span class=\"built_in\">input</span>, output</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 获取卷积层参数</span></span><br><span class=\"line\">    in_channels = module.in_channels</span><br><span class=\"line\">    out_channels = module.out_channels</span><br><span class=\"line\">    kernel_size = module.kernel_size</span><br><span class=\"line\">    groups = module.groups</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 计算单个位置的计算量</span></span><br><span class=\"line\">    flops_per_position = in_channels // groups * kernel_size[<span class=\"number\">0</span>] * kernel_size[<span class=\"number\">1</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 总 FLOPs</span></span><br><span class=\"line\">    output_size = output.size(<span class=\"number\">2</span>) * output.size(<span class=\"number\">3</span>)  <span class=\"comment\"># H_out * W_out</span></span><br><span class=\"line\">    total_flops = output_size * out_channels * flops_per_position</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> total_flops</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注册钩子统计各层 FLOPs</span></span><br><span class=\"line\">total_flops = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hook_fn</span>(<span class=\"params\">module, <span class=\"built_in\">input</span>, output</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> total_flops</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(module, torch.nn.Conv2d):</span><br><span class=\"line\">        total_flops += count_conv_flops(module, <span class=\"built_in\">input</span>, output)</span><br><span class=\"line\"></span><br><span class=\"line\">model = resnet18()</span><br><span class=\"line\"><span class=\"keyword\">for</span> layer <span class=\"keyword\">in</span> model.modules():</span><br><span class=\"line\">    layer.register_forward_hook(hook_fn)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 前向传播触发计算</span></span><br><span class=\"line\"><span class=\"built_in\">input</span> = torch.randn(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">224</span>, <span class=\"number\">224</span>)</span><br><span class=\"line\">model(<span class=\"built_in\">input</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Total FLOPs: <span class=\"subst\">&#123;total_flops / <span class=\"number\">1e9</span>:<span class=\"number\">.2</span>f&#125;</span> G&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"3-注意事项\"><a href=\"#3-注意事项\" class=\"headerlink\" title=\"3. 注意事项\"></a><strong>3. 注意事项</strong></h4><ol>\n<li><p><strong>工具库差异</strong>：</p>\n<ul>\n<li><code>thop</code> 和 <code>ptflops</code> 结果可能因实现细节不同（如是否统计激活函数）。</li>\n<li>推荐使用同一工具库进行模型间对比。</li>\n</ul>\n</li>\n<li><p><strong>动态计算图</strong>：</p>\n<ul>\n<li>若模型包含动态分支（如条件判断），工具库可能无法准确统计，需手动修正。</li>\n</ul>\n</li>\n<li><p><strong>硬件无关性</strong>：</p>\n<ul>\n<li>FLOPs 是理论计算量，实际速度还受内存带宽、并行度等硬件因素影响。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h4 id=\"4-其他工具\"><a href=\"#4-其他工具\" class=\"headerlink\" title=\"4. 其他工具\"></a><strong>4. 其他工具</strong></h4><ul>\n<li>**<code>torchinfo</code>**：可视化模型结构并统计 FLOPs（需配合 <code>thop</code>）：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install torchinfo</span><br></pre></td></tr></table></figure></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torchinfo <span class=\"keyword\">import</span> summary</span><br><span class=\"line\">summary(model, input_size=(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">224</span>, <span class=\"number\">224</span>), col_names=[<span class=\"string\">&quot;input_size&quot;</span>, <span class=\"string\">&quot;output_size&quot;</span>, <span class=\"string\">&quot;num_params&quot;</span>, <span class=\"string\">&quot;flops&quot;</span>])</span><br></pre></td></tr></table></figure>\n<ul>\n<li>**<code>fvcore</code>**（Facebook 官方库）：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fvcore.nn <span class=\"keyword\">import</span> FlopCountAnalysis</span><br><span class=\"line\">flops = FlopCountAnalysis(model, <span class=\"built_in\">input</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flops.total())</span><br></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"卷积核数量级小于10-3e\"><a href=\"#卷积核数量级小于10-3e\" class=\"headerlink\" title=\"卷积核数量级小于10-3e\"></a>卷积核数量级小于10-3e</h2><h3 id=\"一、是否合理？\"><a href=\"#一、是否合理？\" class=\"headerlink\" title=\"一、是否合理？\"></a><strong>一、是否合理？</strong></h3><h4 id=\"合理的情况\"><a href=\"#合理的情况\" class=\"headerlink\" title=\"合理的情况\"></a><strong>合理的情况</strong></h4><ul>\n<li><strong>轻量级模型 + 强正则化</strong>：若模型设计极简（如轻量化边缘设备模型）且使用了强 L2 正则化（如 <code>weight_decay=1e-3</code>），参数可能被压缩到该范围。</li>\n<li><strong>输入数据尺度极小</strong>：若输入数据已归一化到 <code>[0, 0.1]</code>，卷积核参数可能自然较小。</li>\n</ul>\n<h4 id=\"不合理的情况\"><a href=\"#不合理的情况\" class=\"headerlink\" title=\"不合理的情况\"></a><strong>不合理的情况</strong></h4><ul>\n<li><strong>多数场景下</strong>：参数范围过小（如 <code>1e-4</code> 以下）可能表明：<ol>\n<li><strong>学习率过低</strong>：参数更新步幅不足，无法有效学习。</li>\n<li><strong>梯度消失</strong>：激活函数或初始化不当，导致反向传播梯度趋近于零。</li>\n<li><strong>权重衰减过强</strong>：正则化过度惩罚大权重，抑制模型表达能力。</li>\n<li><strong>模型设计缺陷</strong>：网络结构过于简单或层次过浅，无法捕获复杂特征。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"二、调整方向\"><a href=\"#二、调整方向\" class=\"headerlink\" title=\"二、调整方向\"></a><strong>二、调整方向</strong></h3><h4 id=\"1-检查学习率（关键！）\"><a href=\"#1-检查学习率（关键！）\" class=\"headerlink\" title=\"1. 检查学习率（关键！）\"></a>1. <strong>检查学习率（关键！）</strong></h4><ul>\n<li><strong>现象</strong>：参数更新幅度极小（如 <code>1e-4</code> 级），可能学习率设置过低。</li>\n<li><strong>调整方法</strong>：<ul>\n<li>逐步增大学习率（例如从 <code>1e-4</code> → <code>1e-3</code> → <code>3e-3</code>）。</li>\n<li>使用学习率预热（Warmup）或周期性调度（如 <code>CosineAnnealingLR</code>）。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-降低权重衰减强度\"><a href=\"#2-降低权重衰减强度\" class=\"headerlink\" title=\"2. 降低权重衰减强度\"></a>2. <strong>降低权重衰减强度</strong></h4><ul>\n<li><strong>现象</strong>：L2 正则化（<code>weight_decay</code>）过强，导致参数被过度压缩。</li>\n<li><strong>调整方法</strong>：<ul>\n<li>减少 <code>weight_decay</code> 值（例如从 <code>1e-3</code> → <code>1e-4</code> 或更低）。</li>\n<li>如果任务允许，尝试暂时关闭权重衰减以验证效果。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-优化初始化方法\"><a href=\"#3-优化初始化方法\" class=\"headerlink\" title=\"3. 优化初始化方法\"></a>3. <strong>优化初始化方法</strong></h4><ul>\n<li><strong>现象</strong>：初始化参数范围过小（如误用 <code>Xavier</code> 但输入通道极大）。</li>\n<li><strong>调整方法</strong>：<ul>\n<li>使用 <code>He初始化</code>（针对 ReLU 族激活函数）或 <code>Kaiming Normal</code>。</li>\n<li>针对卷积核手动设置初始化范围：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">torch.nn.init.normal_(conv.weight, mean=<span class=\"number\">0</span>, std=<span class=\"number\">0.02</span>)  <span class=\"comment\"># 增大标准差</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"4-检查梯度流动\"><a href=\"#4-检查梯度流动\" class=\"headerlink\" title=\"4. 检查梯度流动\"></a>4. <strong>检查梯度流动</strong></h4><ul>\n<li><strong>现象</strong>：梯度值极小（可用 <code>torch.autograd.grad</code> 检查）。</li>\n<li><strong>调整方法</strong>：<ul>\n<li>添加 <strong>批归一化（BatchNorm）层</strong> 或 <strong>残差连接</strong>，缓解梯度消失。</li>\n<li>更换激活函数（如用 <code>Leaky ReLU</code> 替代 <code>ReLU</code> 防止负区间死亡）。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"5-验证数据预处理\"><a href=\"#5-验证数据预处理\" class=\"headerlink\" title=\"5. 验证数据预处理\"></a>5. <strong>验证数据预处理</strong></h4><ul>\n<li><strong>现象</strong>：输入数据未正确归一化（如数值范围被压缩到 <code>[0, 1]</code> 但未标准化）。</li>\n<li><strong>调整方法</strong>：<ul>\n<li>确保输入数据标准化为均值 0、方差 1（例如 <code>transforms.Normalize(mean=[0.5], std=[0.5])</code>）。</li>\n<li>避免过度归一化导致数据动态范围过小。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6-模型复杂度调整\"><a href=\"#6-模型复杂度调整\" class=\"headerlink\" title=\"6. 模型复杂度调整\"></a>6. <strong>模型复杂度调整</strong></h4><ul>\n<li><strong>现象</strong>：模型过于简单（如仅 2~3 层卷积），无法有效提取特征。</li>\n<li><strong>调整方法</strong>：<ul>\n<li>增加网络深度或宽度（例如添加更多卷积层或通道数）。</li>\n<li>引入注意力机制或更复杂的模块（如 <code>SE Block</code>、<code>Inception</code>）。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"单目标视觉跟踪评价指标\"><a href=\"#单目标视觉跟踪评价指标\" class=\"headerlink\" title=\"单目标视觉跟踪评价指标\"></a>单目标视觉跟踪评价指标</h2><h3 id=\"1-EAO（Expected-Average-Overlap）\"><a href=\"#1-EAO（Expected-Average-Overlap）\" class=\"headerlink\" title=\"1. EAO（Expected Average Overlap）\"></a><strong>1. EAO（Expected Average Overlap）</strong></h3><h4 id=\"核心思想\"><a href=\"#核心思想\" class=\"headerlink\" title=\"核心思想\"></a><strong>核心思想</strong></h4><p>EAO 综合了跟踪器的<strong>精度</strong>（预测框与真实框的重叠率）和<strong>鲁棒性</strong>（失败频率），适用于长时跟踪场景（如目标消失后需重启跟踪）。</p>\n<h4 id=\"计算步骤\"><a href=\"#计算步骤\" class=\"headerlink\" title=\"计算步骤\"></a><strong>计算步骤</strong></h4><ol>\n<li><p><strong>实验设计</strong>：</p>\n<ul>\n<li>在视频序列中，跟踪器运行时会因失败（如目标丢失）而自动重启（重新初始化）。</li>\n<li>每个视频会被划分为多个<strong>子序列</strong>，每个子序列长度不同（模拟不同时长的跟踪需求）。</li>\n</ul>\n</li>\n<li><p><strong>单次子序列评估</strong>：</p>\n<ul>\n<li>对每个子序列，计算跟踪框与真实框的<strong>平均重叠率（Average Overlap, AO）</strong>：$$AO &#x3D; \\frac{1}{N} \\sum_{t&#x3D;1}^{N} \\text{IoU}_t$$​其中 $N$是子序列的帧数， $IoU_t$是第$t$帧的交并比（Intersection over Union）。</li>\n</ul>\n</li>\n<li><p><strong>统计建模</strong>：</p>\n<ul>\n<li>对所有子序列的 AO 值进行统计分析，拟合一个<strong>概率分布模型</strong>（如高斯分布）。</li>\n<li>计算不同子序列长度下的 AO 期望值，最终得到<strong>预期平均重叠率（EAO）</strong>：$$EAO &#x3D; \\frac{1}{L_{\\text{max}}} \\int_{L&#x3D;1}^{L_{\\text{max}}} \\text{AO}(L) , dL$$其中 $L_{\\text{max}}$​ 是最大子序列长度，$\\text{AO}(L)$ 是长度为$L$的子序列的平均重叠率。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a><strong>特点</strong></h4><ul>\n<li><strong>惩罚失败</strong>：跟踪器失败后需重启，重启次数越多，EAO 越低。</li>\n<li><strong>综合性强</strong>：既反映精度（IoU），又反映鲁棒性（失败频率）。</li>\n</ul>\n<h3 id=\"2-Accuracy\"><a href=\"#2-Accuracy\" class=\"headerlink\" title=\"2. Accuracy\"></a><strong>2. Accuracy</strong></h3><h4 id=\"核心思想-1\"><a href=\"#核心思想-1\" class=\"headerlink\" title=\"核心思想\"></a><strong>核心思想</strong></h4><p>Accuracy 衡量跟踪器在单次运行中的<strong>平均精度</strong>，通常有两种计算方式：</p>\n<h4 id=\"方式-1：平均重叠率（Average-IoU）\"><a href=\"#方式-1：平均重叠率（Average-IoU）\" class=\"headerlink\" title=\"方式 1：平均重叠率（Average IoU）\"></a><strong>方式 1：平均重叠率（Average IoU）</strong></h4><p>$$\\text{Accuracy} &#x3D; \\frac{1}{T} \\sum_{t&#x3D;1}^{T} \\text{IoU}_t$$​</p>\n<ul>\n<li>$T$是视频总帧数，$IoU_t$是第$t$帧的交并比。</li>\n<li><strong>缺点</strong>：未考虑失败帧（若跟踪失败，$IoU$ 直接计为 0，可能低估性能）。</li>\n</ul>\n<h4 id=\"方式-2：成功率（Success-Rate）\"><a href=\"#方式-2：成功率（Success-Rate）\" class=\"headerlink\" title=\"方式 2：成功率（Success Rate）\"></a><strong>方式 2：成功率（Success Rate）</strong></h4><ul>\n<li><p>定义：重叠率超过阈值（如 0.5）的帧占比。</p>\n</li>\n<li><p>计算步骤：</p>\n<ol>\n<li>对每帧计算 $IoU$。</li>\n<li>统计满足 $\\text{IoU}_t \\geq ​θ$ 的帧数（$θ$是阈值）。</li>\n<li>成功率 &#x3D; 满足条件的帧数 &#x2F; 总帧数。</li>\n</ol>\n</li>\n<li><p><strong>曲线形式</strong>：通常会绘制不同阈值下的成功率曲线（Success Plot），计算曲线下面积（AUC）。</p>\n</li>\n</ul>\n<h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a><strong>特点</strong></h4><ul>\n<li><strong>忽略失败处理</strong>：假设跟踪器始终运行，失败帧的重叠率直接计为 0。</li>\n<li><strong>侧重瞬时精度</strong>：无法反映跟踪器是否需要重启。</li>\n</ul>\n<h3 id=\"3-Failure（失败次数）\"><a href=\"#3-Failure（失败次数）\" class=\"headerlink\" title=\"3.Failure（失败次数）\"></a><strong>3.Failure（失败次数）</strong></h3><h4 id=\"定义与计算\"><a href=\"#定义与计算\" class=\"headerlink\" title=\"定义与计算\"></a><strong>定义与计算</strong></h4><ul>\n<li><p><strong>失败条件</strong>：<br>  当跟踪器预测的边界框与真实标注框的<strong>交并比（IoU）</strong>降至 <strong>0</strong> 时，判定为一次失败（不同VOT版本可能略有差异，但核心逻辑一致）。</p>\n</li>\n<li><p><strong>处理流程</strong>：</p>\n<ol>\n<li>跟踪器在视频序列中运行，逐帧输出预测框。</li>\n<li>若某帧的 IoU &#x3D; 0，视为失败，记录失败次数并触发<strong>重新初始化</strong>：<ul>\n<li>在后续的 <strong>5帧</strong>（VOT标准协议）中，使用真实标注框重置跟踪器。</li>\n<li>重置后继续跟踪，直到再次失败或视频结束。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p><strong>最终指标</strong>：</p>\n<ul>\n<li><strong>失败次数</strong> &#x3D; 整个视频中触发重新初始化的总次数。</li>\n<li><strong>鲁棒性体现</strong>：失败次数越少，算法在遮挡、形变等复杂场景下的稳定性越强。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-EFO（等效滤波操作）\"><a href=\"#4-EFO（等效滤波操作）\" class=\"headerlink\" title=\"4.EFO（等效滤波操作）\"></a><strong>4.EFO（等效滤波操作）</strong></h3><h4 id=\"定义与目的\"><a href=\"#定义与目的\" class=\"headerlink\" title=\"定义与目的\"></a><strong>定义与目的</strong></h4><ul>\n<li><p><strong>核心思想</strong>：<br>  消除硬件差异对速度评估的影响，通过将算法速度与一个标准化的滤波操作时间对比，衡量计算效率。</p>\n</li>\n<li><p><strong>基准操作</strong>：<br>  在 <strong>600×600像素</strong> 的图像上，执行 <strong>30次高斯滤波</strong>（具体参数：核大小 30×30，标准差 0.25）。</p>\n</li>\n</ul>\n<h4 id=\"计算步骤-1\"><a href=\"#计算步骤-1\" class=\"headerlink\" title=\"计算步骤\"></a><strong>计算步骤</strong></h4><ol>\n<li><p><strong>测量基准时间</strong>：</p>\n<ul>\n<li>在同一台测试机器上，运行上述高斯滤波操作，记录耗时 $T_{\\text{ref}}​$（单位：秒）。</li>\n</ul>\n</li>\n<li><p><strong>测量算法时间</strong>：</p>\n<ul>\n<li>跟踪算法处理每帧的平均时间为 $T_{\\text{alg}}$（单位：秒&#x2F;帧）。</li>\n</ul>\n</li>\n<li><p><strong>计算EFO</strong>：</p>\n<p> $\\text{EFO} &#x3D; \\frac{T_{\\text{ref}}}{T_{\\text{alg}}} \\times 30$</p>\n<ul>\n<li><strong>解释</strong>：<ul>\n<li>$T_{\\text{ref}} &#x2F; T_{\\text{alg}}$ 表示算法每帧耗时相当于多少次基准滤波操作。</li>\n<li>乘以30是因为基准操作包含30次滤波。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><strong>意义</strong>：<ul>\n<li>EFO值越高，算法速度越快（例如，EFO&#x3D;100表示算法每帧处理速度相当于100次基准滤波操作）。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-Robustness（-鲁棒性）\"><a href=\"#5-Robustness（-鲁棒性）\" class=\"headerlink\" title=\"5.Robustness（ 鲁棒性）\"></a><strong>5.Robustness（ 鲁棒性）</strong></h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a><strong>定义</strong></h4><p>综合失败次数和跟踪时长的归一化评分，常见于VOT挑战赛。</p>\n<ul>\n<li><strong>公式</strong>：<br>$$\\text{Robustness} &#x3D; \\exp\\left(-\\frac{\\text{失败次数}}{\\text{视频总帧数}} \\cdot \\lambda\\right)$$<ul>\n<li>\\lambdaλ 为调节因子（如VOT2016中$λ&#x3D;50$）。</li>\n<li>评分范围：0（完全失败）到1（无失败）。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a><strong>示例</strong></h4><ul>\n<li>失败次数：3次</li>\n<li>视频总帧数：100帧</li>\n<li><strong>Robustness</strong> &#x3D; $\\exp(-3&#x2F;100 \\times 50) &#x3D; \\exp(-1.5) \\approx 0.223$</li>\n</ul>\n<h3 id=\"6-FLOPs\"><a href=\"#6-FLOPs\" class=\"headerlink\" title=\"6.FLOPs\"></a><strong>6.FLOPs</strong></h3><p>在 PyTorch 中计算模型的 <strong>FLOPs（Floating Point Operations，浮点运算次数）</strong> 可以通过第三方库或手动实现。以下是具体方法及代码示例：</p>\n<hr>\n<h4 id=\"1-使用现有工具库（推荐）\"><a href=\"#1-使用现有工具库（推荐）\" class=\"headerlink\" title=\"1. 使用现有工具库（推荐）\"></a><strong>1. 使用现有工具库（推荐）</strong></h4><h4 id=\"1-安装工具库\"><a href=\"#1-安装工具库\" class=\"headerlink\" title=\"(1) 安装工具库\"></a><strong>(1) 安装工具库</strong></h4><p>常用库包括 <code>thop</code>、<code>ptflops</code> 或 <code>torchstat</code>，这里以 <code>thop</code> 为例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install thop</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-计算-FLOPs-的代码示例\"><a href=\"#2-计算-FLOPs-的代码示例\" class=\"headerlink\" title=\"(2) 计算 FLOPs 的代码示例\"></a><strong>(2) 计算 FLOPs 的代码示例</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">from</span> torchvision.models <span class=\"keyword\">import</span> resnet18</span><br><span class=\"line\"><span class=\"keyword\">from</span> thop <span class=\"keyword\">import</span> profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义模型和输入</span></span><br><span class=\"line\">model = resnet18()</span><br><span class=\"line\"><span class=\"built_in\">input</span> = torch.randn(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">224</span>, <span class=\"number\">224</span>)  <span class=\"comment\"># (batch_size, channels, H, W)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算 FLOPs 和参数量</span></span><br><span class=\"line\">flops, params = profile(model, inputs=(<span class=\"built_in\">input</span>,))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;FLOPs: <span class=\"subst\">&#123;flops / <span class=\"number\">1e9</span>:<span class=\"number\">.2</span>f&#125;</span> G&quot;</span>)  <span class=\"comment\"># 输出示例：FLOPs: 1.82 G</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Params: <span class=\"subst\">&#123;params / <span class=\"number\">1e6</span>:<span class=\"number\">.2</span>f&#125;</span> M&quot;</span>)  <span class=\"comment\"># 输出示例：Params: 11.69 M</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-工具库原理\"><a href=\"#3-工具库原理\" class=\"headerlink\" title=\"(3) 工具库原理\"></a><strong>(3) 工具库原理</strong></h4><ul>\n<li>**<code>thop</code>**：通过遍历模型的计算图，统计每一层的 FLOPs（如卷积、全连接等），累加得到总次数。</li>\n<li><strong>支持的层类型</strong>：卷积、池化、激活函数、全连接等常见层。</li>\n</ul>\n<hr>\n<h4 id=\"2-手动计算（理解原理）\"><a href=\"#2-手动计算（理解原理）\" class=\"headerlink\" title=\"2. 手动计算（理解原理）\"></a><strong>2. 手动计算（理解原理）</strong></h4><h4 id=\"1-卷积层的-FLOPs-公式\"><a href=\"#1-卷积层的-FLOPs-公式\" class=\"headerlink\" title=\"(1) 卷积层的 FLOPs 公式\"></a><strong>(1) 卷积层的 FLOPs 公式</strong></h4><p>对于卷积层，FLOPs 计算公式为：</p>\n<p>$$\\text{FLOPs} &#x3D; \\underbrace{H_{\\text{out}} \\cdot W_{\\text{out}}}<em>{\\text{输出特征图大小}} \\cdot \\underbrace{(C</em>{\\text{in}} \\cdot K_h \\cdot K_w)}<em>{\\text{每个输出点的计算量}} \\cdot \\underbrace{C</em>{\\text{out}}}_{\\text{输出通道数}} \\div \\text{groups}​​​$$</p>\n<ul>\n<li>$K_h$, $K_w$​：卷积核高和宽</li>\n<li>$C_{\\text{in}}, C_{\\text{out}}$：输入&#x2F;输出通道数</li>\n<li><code>groups</code>：分组卷积的分组数</li>\n</ul>\n<h4 id=\"2-全连接层的-FLOPs-公式\"><a href=\"#2-全连接层的-FLOPs-公式\" class=\"headerlink\" title=\"(2) 全连接层的 FLOPs 公式\"></a><strong>(2) 全连接层的 FLOPs 公式</strong></h4><p>$$\\text{FLOPs} &#x3D; \\text{输入维度} \\cdot \\text{输出维度}$$</p>\n<h4 id=\"3-代码实现示例\"><a href=\"#3-代码实现示例\" class=\"headerlink\" title=\"(3) 代码实现示例\"></a><strong>(3) 代码实现示例</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">count_conv_flops</span>(<span class=\"params\">module, <span class=\"built_in\">input</span>, output</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 获取卷积层参数</span></span><br><span class=\"line\">    in_channels = module.in_channels</span><br><span class=\"line\">    out_channels = module.out_channels</span><br><span class=\"line\">    kernel_size = module.kernel_size</span><br><span class=\"line\">    groups = module.groups</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 计算单个位置的计算量</span></span><br><span class=\"line\">    flops_per_position = in_channels // groups * kernel_size[<span class=\"number\">0</span>] * kernel_size[<span class=\"number\">1</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 总 FLOPs</span></span><br><span class=\"line\">    output_size = output.size(<span class=\"number\">2</span>) * output.size(<span class=\"number\">3</span>)  <span class=\"comment\"># H_out * W_out</span></span><br><span class=\"line\">    total_flops = output_size * out_channels * flops_per_position</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> total_flops</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注册钩子统计各层 FLOPs</span></span><br><span class=\"line\">total_flops = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hook_fn</span>(<span class=\"params\">module, <span class=\"built_in\">input</span>, output</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> total_flops</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(module, torch.nn.Conv2d):</span><br><span class=\"line\">        total_flops += count_conv_flops(module, <span class=\"built_in\">input</span>, output)</span><br><span class=\"line\"></span><br><span class=\"line\">model = resnet18()</span><br><span class=\"line\"><span class=\"keyword\">for</span> layer <span class=\"keyword\">in</span> model.modules():</span><br><span class=\"line\">    layer.register_forward_hook(hook_fn)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 前向传播触发计算</span></span><br><span class=\"line\"><span class=\"built_in\">input</span> = torch.randn(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">224</span>, <span class=\"number\">224</span>)</span><br><span class=\"line\">model(<span class=\"built_in\">input</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Total FLOPs: <span class=\"subst\">&#123;total_flops / <span class=\"number\">1e9</span>:<span class=\"number\">.2</span>f&#125;</span> G&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"3-注意事项\"><a href=\"#3-注意事项\" class=\"headerlink\" title=\"3. 注意事项\"></a><strong>3. 注意事项</strong></h4><ol>\n<li><p><strong>工具库差异</strong>：</p>\n<ul>\n<li><code>thop</code> 和 <code>ptflops</code> 结果可能因实现细节不同（如是否统计激活函数）。</li>\n<li>推荐使用同一工具库进行模型间对比。</li>\n</ul>\n</li>\n<li><p><strong>动态计算图</strong>：</p>\n<ul>\n<li>若模型包含动态分支（如条件判断），工具库可能无法准确统计，需手动修正。</li>\n</ul>\n</li>\n<li><p><strong>硬件无关性</strong>：</p>\n<ul>\n<li>FLOPs 是理论计算量，实际速度还受内存带宽、并行度等硬件因素影响。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h4 id=\"4-其他工具\"><a href=\"#4-其他工具\" class=\"headerlink\" title=\"4. 其他工具\"></a><strong>4. 其他工具</strong></h4><ul>\n<li>**<code>torchinfo</code>**：可视化模型结构并统计 FLOPs（需配合 <code>thop</code>）：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install torchinfo</span><br></pre></td></tr></table></figure></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torchinfo <span class=\"keyword\">import</span> summary</span><br><span class=\"line\">summary(model, input_size=(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">224</span>, <span class=\"number\">224</span>), col_names=[<span class=\"string\">&quot;input_size&quot;</span>, <span class=\"string\">&quot;output_size&quot;</span>, <span class=\"string\">&quot;num_params&quot;</span>, <span class=\"string\">&quot;flops&quot;</span>])</span><br></pre></td></tr></table></figure>\n<ul>\n<li>**<code>fvcore</code>**（Facebook 官方库）：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fvcore.nn <span class=\"keyword\">import</span> FlopCountAnalysis</span><br><span class=\"line\">flops = FlopCountAnalysis(model, <span class=\"built_in\">input</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flops.total())</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Conda","date":"2025-06-01T02:34:58.000Z","updated":"2025-07-28T05:34:48.000Z","_content":"\n## miniconda安装\n\n### 方法一\n\n> [!NOTE] 操作环境\n> Ubuntu 20.04 LTS 服务器\n\n以下参考[【Conda】【Anaconda】Linux下安装Anaconda_anaconda linux the license agreement wasn't approv-CSDN博客](https://blog.csdn.net/RadiantJeral/article/details/110288050)\n==$表示当前用户（root用户为#），为直观展示出进入虚拟环境后多了(环境名) $。注意不要输到命令行。==\n1. 从官网上下载miniconda文件，Miniconda3-latest-Linux-x86_64.sh，并上传到服务器中。\n安装指令：\n```bash\n$ bash Miniconda3-latest-Linux-x86_64.sh\n```\n\n2. 激活base虚拟环境：\n```bash\n$ source ~/miniconda3/bin/activate\n(base) $\n```\n\n3. 初始化设置：\n```bash\n(base) $ conda init\n```\n\n4. 设置启动bash时不激活base环境：\n```bash\n(base) $ conda config --set auto_activate_base false\n```\n\n5. 重新启动后测试：\n```bash\nconda -V\n```\n\n6. 最后输出版本信息。\n\n### 方法二\n\n> [!NOTE] 操作环境\n> Ubuntu-22.04.3 server 树莓派4\n\n参考：[Miniconda — miniconda documentation](https://docs.conda.io/projects/miniconda/en/latest/)\n\n```bash\nmkdir -p ~/miniconda3\nwget https://repo.anaconda.com/miniconda/Miniconda3-py38_4.9.2-Linux-aarch64.sh -O ~/miniconda3/miniconda.sh\nbash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3\nrm -rf ~/miniconda3/miniconda.sh\n~/miniconda3/bin/conda init bash\n```\n\n## anaconda安装\n\n> [!NOTE] 操作环境\n> Ubuntu 22.04 LTS 服务器\n\n来源于：[Linux系统安装Anaconda / 创建Python虚拟环境_anaconda linux-CSDN博客](https://blog.csdn.net/NSJim/article/details/134515198)\n到官网[Unleash AI Innovation and Value | Anaconda](https://www.anaconda.com/)下载指定版本的文件，这边下载的文件名为Anaconda3-2024.02-1-Linux-x86_64.sh。\n上传到服务器，输入：\n```bash\nbash Anaconda3-2024.02-1-Linux-x86_64.sh\n```\n\n安装完成后，出现是否初始化的选项。\n![anaconda_init.png](/images/anaconda_init.png)\n\n推荐输入yes，初始化完成后重新打开一个shell。这时会发现bash环境被激活。输入：\n```bash\nconda config --set auto_activate_base false\n```\n\n使得开机时不会激活bash环境。\n输入下面指令退出环境：\n```bash\nconda deactivate\n```\n\n运行下面指令可以查看安装的conda版本：\n```bash\nconda -V\n```\n\n## 虚拟环境\n\n创建虚拟环境\n```bash\nconda create -n myenv python=3.8\n```\n一些参数：\n`-n` 虚拟环境名称\n`-p` 指定虚拟环境路径\n`-file` 从文本文件中读取包列表来安装\n\n激活虚拟环境\n```bash\nconda activate myenv\n```\n\n退出虚拟环境\n```bash\nconda deactivate\n```\n\n删除虚拟环境\n```bash\nconda remove -n myenv --all\n```\n\n查看当前环境中已经安装的包\n```bash\nconda list\n```\n\n查看所有的虚拟环境\n```bash\nconda env list\n```\n\n两个虚拟环境的包对比：\n步骤 1：导出 YML 文件\n```bash\n# 导出第一个环境  \nconda env export --name env1 > env1.yml \n# 导出第二个环境 \nconda env export --name env2 > env2.yml\n```\n\n或者用TXT对比：\n```bash\n# 激活第一个环境 \nconda activate env1 conda list > env1_packages.txt \n# 激活第二个环境 \nconda activate env2 conda list > env2_packages.txt\n```\n\n步骤 2：对比 YML 文件\n使用文本编辑器（如 VS Code）或命令行工具对比：\n```bash\ndiff env1.yml env2.yml\n```\ndiff会逐行对比差异，结果很乱不太好用\n\n所以写了个python脚本\n```bash\ndef read_pip_list(file_path):\n    with open(file_path, \"r\") as f:\n        return [line.strip().split() for line in f if not line.startswith((\"Package\", \"---\"))]\n\ndef compare_pip_lists(list1, list2):\n    set1 = {pkg[0]: pkg[1] for pkg in list1}\n    set2 = {pkg[0]: pkg[1] for pkg in list2}\n\n    added = set(set2.keys()) - set(set1.keys())\n    removed = set(set1.keys()) - set(set2.keys())\n    changed = {pkg for pkg in set1 if pkg in set2 and set1[pkg] != set2[pkg]}\n\n    print(\"新增的包:\")\n    for pkg in sorted(added):\n        print(f\"  + {pkg} == {set2[pkg]}\")\n\n    print(\"\\n删除的包:\")\n    for pkg in sorted(removed):\n        print(f\"  - {pkg} == {set1[pkg]}\")\n\n    print(\"\\n版本变化的包:\")\n    for pkg in sorted(changed):\n        print(f\"  ⇄ {pkg} == {set1[pkg]} → {set2[pkg]}\")\n\n# 替换为你的文件路径\nlist1 = read_pip_list(\"siamlat_pip.txt\")\nlist2 = read_pip_list(\"plat_pip.txt\")\ncompare_pip_lists(list1, list2)\n\n```\n\n注意：YML 文件可能包含以下差异：\n- 构建版本（如 py38h5...），建议使用 --no-builds 忽略：\n```bash\nconda env export --name env1 --no-builds > env1.yml\n```\n\n## 虚拟环境常用指令\n更新虚拟环境的python版本\n\n可以在当前环境中直接修改版本\n```shell\nconda install python=3.8\n```","source":"_posts/2025-06-01-Conda.md","raw":"---\ntitle: Conda\ndate: 2025-06-01 10:34:58\nupdated: 2025-07-28 13:34:48\ncategories:\n  - [服务器&嵌入式平台操作, 基础配置]\ntags:\npermalink: conda/\n---\n\n## miniconda安装\n\n### 方法一\n\n> [!NOTE] 操作环境\n> Ubuntu 20.04 LTS 服务器\n\n以下参考[【Conda】【Anaconda】Linux下安装Anaconda_anaconda linux the license agreement wasn't approv-CSDN博客](https://blog.csdn.net/RadiantJeral/article/details/110288050)\n==$表示当前用户（root用户为#），为直观展示出进入虚拟环境后多了(环境名) $。注意不要输到命令行。==\n1. 从官网上下载miniconda文件，Miniconda3-latest-Linux-x86_64.sh，并上传到服务器中。\n安装指令：\n```bash\n$ bash Miniconda3-latest-Linux-x86_64.sh\n```\n\n2. 激活base虚拟环境：\n```bash\n$ source ~/miniconda3/bin/activate\n(base) $\n```\n\n3. 初始化设置：\n```bash\n(base) $ conda init\n```\n\n4. 设置启动bash时不激活base环境：\n```bash\n(base) $ conda config --set auto_activate_base false\n```\n\n5. 重新启动后测试：\n```bash\nconda -V\n```\n\n6. 最后输出版本信息。\n\n### 方法二\n\n> [!NOTE] 操作环境\n> Ubuntu-22.04.3 server 树莓派4\n\n参考：[Miniconda — miniconda documentation](https://docs.conda.io/projects/miniconda/en/latest/)\n\n```bash\nmkdir -p ~/miniconda3\nwget https://repo.anaconda.com/miniconda/Miniconda3-py38_4.9.2-Linux-aarch64.sh -O ~/miniconda3/miniconda.sh\nbash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3\nrm -rf ~/miniconda3/miniconda.sh\n~/miniconda3/bin/conda init bash\n```\n\n## anaconda安装\n\n> [!NOTE] 操作环境\n> Ubuntu 22.04 LTS 服务器\n\n来源于：[Linux系统安装Anaconda / 创建Python虚拟环境_anaconda linux-CSDN博客](https://blog.csdn.net/NSJim/article/details/134515198)\n到官网[Unleash AI Innovation and Value | Anaconda](https://www.anaconda.com/)下载指定版本的文件，这边下载的文件名为Anaconda3-2024.02-1-Linux-x86_64.sh。\n上传到服务器，输入：\n```bash\nbash Anaconda3-2024.02-1-Linux-x86_64.sh\n```\n\n安装完成后，出现是否初始化的选项。\n![anaconda_init.png](/images/anaconda_init.png)\n\n推荐输入yes，初始化完成后重新打开一个shell。这时会发现bash环境被激活。输入：\n```bash\nconda config --set auto_activate_base false\n```\n\n使得开机时不会激活bash环境。\n输入下面指令退出环境：\n```bash\nconda deactivate\n```\n\n运行下面指令可以查看安装的conda版本：\n```bash\nconda -V\n```\n\n## 虚拟环境\n\n创建虚拟环境\n```bash\nconda create -n myenv python=3.8\n```\n一些参数：\n`-n` 虚拟环境名称\n`-p` 指定虚拟环境路径\n`-file` 从文本文件中读取包列表来安装\n\n激活虚拟环境\n```bash\nconda activate myenv\n```\n\n退出虚拟环境\n```bash\nconda deactivate\n```\n\n删除虚拟环境\n```bash\nconda remove -n myenv --all\n```\n\n查看当前环境中已经安装的包\n```bash\nconda list\n```\n\n查看所有的虚拟环境\n```bash\nconda env list\n```\n\n两个虚拟环境的包对比：\n步骤 1：导出 YML 文件\n```bash\n# 导出第一个环境  \nconda env export --name env1 > env1.yml \n# 导出第二个环境 \nconda env export --name env2 > env2.yml\n```\n\n或者用TXT对比：\n```bash\n# 激活第一个环境 \nconda activate env1 conda list > env1_packages.txt \n# 激活第二个环境 \nconda activate env2 conda list > env2_packages.txt\n```\n\n步骤 2：对比 YML 文件\n使用文本编辑器（如 VS Code）或命令行工具对比：\n```bash\ndiff env1.yml env2.yml\n```\ndiff会逐行对比差异，结果很乱不太好用\n\n所以写了个python脚本\n```bash\ndef read_pip_list(file_path):\n    with open(file_path, \"r\") as f:\n        return [line.strip().split() for line in f if not line.startswith((\"Package\", \"---\"))]\n\ndef compare_pip_lists(list1, list2):\n    set1 = {pkg[0]: pkg[1] for pkg in list1}\n    set2 = {pkg[0]: pkg[1] for pkg in list2}\n\n    added = set(set2.keys()) - set(set1.keys())\n    removed = set(set1.keys()) - set(set2.keys())\n    changed = {pkg for pkg in set1 if pkg in set2 and set1[pkg] != set2[pkg]}\n\n    print(\"新增的包:\")\n    for pkg in sorted(added):\n        print(f\"  + {pkg} == {set2[pkg]}\")\n\n    print(\"\\n删除的包:\")\n    for pkg in sorted(removed):\n        print(f\"  - {pkg} == {set1[pkg]}\")\n\n    print(\"\\n版本变化的包:\")\n    for pkg in sorted(changed):\n        print(f\"  ⇄ {pkg} == {set1[pkg]} → {set2[pkg]}\")\n\n# 替换为你的文件路径\nlist1 = read_pip_list(\"siamlat_pip.txt\")\nlist2 = read_pip_list(\"plat_pip.txt\")\ncompare_pip_lists(list1, list2)\n\n```\n\n注意：YML 文件可能包含以下差异：\n- 构建版本（如 py38h5...），建议使用 --no-builds 忽略：\n```bash\nconda env export --name env1 --no-builds > env1.yml\n```\n\n## 虚拟环境常用指令\n更新虚拟环境的python版本\n\n可以在当前环境中直接修改版本\n```shell\nconda install python=3.8\n```","slug":"2025-06-01-Conda","published":1,"__permalink":"conda/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0mo0003zovddllvc9f6","content":"<h2 id=\"miniconda安装\"><a href=\"#miniconda安装\" class=\"headerlink\" title=\"miniconda安装\"></a>miniconda安装</h2><h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu 20.04 LTS 服务器</p>\n</blockquote>\n<p>以下参考<a href=\"https://blog.csdn.net/RadiantJeral/article/details/110288050\">【Conda】【Anaconda】Linux下安装Anaconda_anaconda linux the license agreement wasn’t approv-CSDN博客</a><br>&#x3D;&#x3D;$表示当前用户（root用户为#），为直观展示出进入虚拟环境后多了(环境名) $。注意不要输到命令行。&#x3D;&#x3D;</p>\n<ol>\n<li><p>从官网上下载miniconda文件，Miniconda3-latest-Linux-x86_64.sh，并上传到服务器中。<br>安装指令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bash Miniconda3-latest-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>激活base虚拟环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> ~/miniconda3/bin/activate</span><br><span class=\"line\">(base) $</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化设置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(base) $ conda init</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置启动bash时不激活base环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(base) $ conda config --<span class=\"built_in\">set</span> auto_activate_base <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重新启动后测试：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda -V</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最后输出版本信息。</p>\n</li>\n</ol>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu-22.04.3 server 树莓派4</p>\n</blockquote>\n<p>参考：<a href=\"https://docs.conda.io/projects/miniconda/en/latest/\">Miniconda — miniconda documentation</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p ~/miniconda3</span><br><span class=\"line\">wget https://repo.anaconda.com/miniconda/Miniconda3-py38_4.9.2-Linux-aarch64.sh -O ~/miniconda3/miniconda.sh</span><br><span class=\"line\">bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf ~/miniconda3/miniconda.sh</span><br><span class=\"line\">~/miniconda3/bin/conda init bash</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"anaconda安装\"><a href=\"#anaconda安装\" class=\"headerlink\" title=\"anaconda安装\"></a>anaconda安装</h2><blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu 22.04 LTS 服务器</p>\n</blockquote>\n<p>来源于：<a href=\"https://blog.csdn.net/NSJim/article/details/134515198\">Linux系统安装Anaconda &#x2F; 创建Python虚拟环境_anaconda linux-CSDN博客</a><br>到官网<a href=\"https://www.anaconda.com/\">Unleash AI Innovation and Value | Anaconda</a>下载指定版本的文件，这边下载的文件名为Anaconda3-2024.02-1-Linux-x86_64.sh。<br>上传到服务器，输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash Anaconda3-2024.02-1-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，出现是否初始化的选项。<br><img src=\"/418blog/images/anaconda_init.png\" alt=\"anaconda_init.png\"></p>\n<p>推荐输入yes，初始化完成后重新打开一个shell。这时会发现bash环境被激活。输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda config --<span class=\"built_in\">set</span> auto_activate_base <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>使得开机时不会激活bash环境。<br>输入下面指令退出环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda deactivate</span><br></pre></td></tr></table></figure>\n\n<p>运行下面指令可以查看安装的conda版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda -V</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"虚拟环境\"><a href=\"#虚拟环境\" class=\"headerlink\" title=\"虚拟环境\"></a>虚拟环境</h2><p>创建虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n myenv python=3.8</span><br></pre></td></tr></table></figure>\n<p>一些参数：<br><code>-n</code> 虚拟环境名称<br><code>-p</code> 指定虚拟环境路径<br><code>-file</code> 从文本文件中读取包列表来安装</p>\n<p>激活虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda activate myenv</span><br></pre></td></tr></table></figure>\n\n<p>退出虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda deactivate</span><br></pre></td></tr></table></figure>\n\n<p>删除虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda remove -n myenv --all</span><br></pre></td></tr></table></figure>\n\n<p>查看当前环境中已经安装的包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda list</span><br></pre></td></tr></table></figure>\n\n<p>查看所有的虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda <span class=\"built_in\">env</span> list</span><br></pre></td></tr></table></figure>\n\n<p>两个虚拟环境的包对比：<br>步骤 1：导出 YML 文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导出第一个环境  </span></span><br><span class=\"line\">conda <span class=\"built_in\">env</span> <span class=\"built_in\">export</span> --name env1 &gt; env1.yml </span><br><span class=\"line\"><span class=\"comment\"># 导出第二个环境 </span></span><br><span class=\"line\">conda <span class=\"built_in\">env</span> <span class=\"built_in\">export</span> --name env2 &gt; env2.yml</span><br></pre></td></tr></table></figure>\n\n<p>或者用TXT对比：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 激活第一个环境 </span></span><br><span class=\"line\">conda activate env1 conda list &gt; env1_packages.txt </span><br><span class=\"line\"><span class=\"comment\"># 激活第二个环境 </span></span><br><span class=\"line\">conda activate env2 conda list &gt; env2_packages.txt</span><br></pre></td></tr></table></figure>\n\n<p>步骤 2：对比 YML 文件<br>使用文本编辑器（如 VS Code）或命令行工具对比：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diff env1.yml env2.yml</span><br></pre></td></tr></table></figure>\n<p>diff会逐行对比差异，结果很乱不太好用</p>\n<p>所以写了个python脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def read_pip_list(file_path):</span><br><span class=\"line\">    with open(file_path, <span class=\"string\">&quot;r&quot;</span>) as f:</span><br><span class=\"line\">        <span class=\"built_in\">return</span> [line.strip().<span class=\"built_in\">split</span>() <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f <span class=\"keyword\">if</span> not line.startswith((&quot;Package&quot;, &quot;---&quot;))]</span><br><span class=\"line\"></span><br><span class=\"line\">def compare_pip_lists(list1, list2):</span><br><span class=\"line\">    set1 = &#123;pkg[0]: pkg[1] <span class=\"keyword\">for</span> pkg <span class=\"keyword\">in</span> list1&#125;</span><br><span class=\"line\">    set2 = &#123;pkg[0]: pkg[1] <span class=\"keyword\">for</span> pkg <span class=\"keyword\">in</span> list2&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    added = <span class=\"built_in\">set</span>(set2.keys()) - <span class=\"built_in\">set</span>(set1.keys())</span><br><span class=\"line\">    removed = <span class=\"built_in\">set</span>(set1.keys()) - <span class=\"built_in\">set</span>(set2.keys())</span><br><span class=\"line\">    changed = &#123;pkg <span class=\"keyword\">for</span> pkg <span class=\"keyword\">in</span> set1 <span class=\"keyword\">if</span> pkg <span class=\"keyword\">in</span> set2 and set1[pkg] != set2[pkg]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;新增的包:&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> pkg <span class=\"keyword\">in</span> sorted(added):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(f<span class=\"string\">&quot;  + &#123;pkg&#125; == &#123;set2[pkg]&#125;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n删除的包:&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> pkg <span class=\"keyword\">in</span> sorted(removed):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(f<span class=\"string\">&quot;  - &#123;pkg&#125; == &#123;set1[pkg]&#125;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n版本变化的包:&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> pkg <span class=\"keyword\">in</span> sorted(changed):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(f<span class=\"string\">&quot;  ⇄ &#123;pkg&#125; == &#123;set1[pkg]&#125; → &#123;set2[pkg]&#125;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 替换为你的文件路径</span></span><br><span class=\"line\">list1 = read_pip_list(<span class=\"string\">&quot;siamlat_pip.txt&quot;</span>)</span><br><span class=\"line\">list2 = read_pip_list(<span class=\"string\">&quot;plat_pip.txt&quot;</span>)</span><br><span class=\"line\">compare_pip_lists(list1, list2)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注意：YML 文件可能包含以下差异：</p>\n<ul>\n<li>构建版本（如 py38h5…），建议使用 –no-builds 忽略：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda <span class=\"built_in\">env</span> <span class=\"built_in\">export</span> --name env1 --no-builds &gt; env1.yml</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"虚拟环境常用指令\"><a href=\"#虚拟环境常用指令\" class=\"headerlink\" title=\"虚拟环境常用指令\"></a>虚拟环境常用指令</h2><p>更新虚拟环境的python版本</p>\n<p>可以在当前环境中直接修改版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install python=3.8</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"miniconda安装\"><a href=\"#miniconda安装\" class=\"headerlink\" title=\"miniconda安装\"></a>miniconda安装</h2><h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu 20.04 LTS 服务器</p>\n</blockquote>\n<p>以下参考<a href=\"https://blog.csdn.net/RadiantJeral/article/details/110288050\">【Conda】【Anaconda】Linux下安装Anaconda_anaconda linux the license agreement wasn’t approv-CSDN博客</a><br>&#x3D;&#x3D;$表示当前用户（root用户为#），为直观展示出进入虚拟环境后多了(环境名) $。注意不要输到命令行。&#x3D;&#x3D;</p>\n<ol>\n<li><p>从官网上下载miniconda文件，Miniconda3-latest-Linux-x86_64.sh，并上传到服务器中。<br>安装指令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bash Miniconda3-latest-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>激活base虚拟环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> ~/miniconda3/bin/activate</span><br><span class=\"line\">(base) $</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化设置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(base) $ conda init</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置启动bash时不激活base环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(base) $ conda config --<span class=\"built_in\">set</span> auto_activate_base <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重新启动后测试：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda -V</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最后输出版本信息。</p>\n</li>\n</ol>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu-22.04.3 server 树莓派4</p>\n</blockquote>\n<p>参考：<a href=\"https://docs.conda.io/projects/miniconda/en/latest/\">Miniconda — miniconda documentation</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p ~/miniconda3</span><br><span class=\"line\">wget https://repo.anaconda.com/miniconda/Miniconda3-py38_4.9.2-Linux-aarch64.sh -O ~/miniconda3/miniconda.sh</span><br><span class=\"line\">bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf ~/miniconda3/miniconda.sh</span><br><span class=\"line\">~/miniconda3/bin/conda init bash</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"anaconda安装\"><a href=\"#anaconda安装\" class=\"headerlink\" title=\"anaconda安装\"></a>anaconda安装</h2><blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu 22.04 LTS 服务器</p>\n</blockquote>\n<p>来源于：<a href=\"https://blog.csdn.net/NSJim/article/details/134515198\">Linux系统安装Anaconda &#x2F; 创建Python虚拟环境_anaconda linux-CSDN博客</a><br>到官网<a href=\"https://www.anaconda.com/\">Unleash AI Innovation and Value | Anaconda</a>下载指定版本的文件，这边下载的文件名为Anaconda3-2024.02-1-Linux-x86_64.sh。<br>上传到服务器，输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash Anaconda3-2024.02-1-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，出现是否初始化的选项。<br><img src=\"/418blog/images/anaconda_init.png\" alt=\"anaconda_init.png\"></p>\n<p>推荐输入yes，初始化完成后重新打开一个shell。这时会发现bash环境被激活。输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda config --<span class=\"built_in\">set</span> auto_activate_base <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>使得开机时不会激活bash环境。<br>输入下面指令退出环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda deactivate</span><br></pre></td></tr></table></figure>\n\n<p>运行下面指令可以查看安装的conda版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda -V</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"虚拟环境\"><a href=\"#虚拟环境\" class=\"headerlink\" title=\"虚拟环境\"></a>虚拟环境</h2><p>创建虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n myenv python=3.8</span><br></pre></td></tr></table></figure>\n<p>一些参数：<br><code>-n</code> 虚拟环境名称<br><code>-p</code> 指定虚拟环境路径<br><code>-file</code> 从文本文件中读取包列表来安装</p>\n<p>激活虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda activate myenv</span><br></pre></td></tr></table></figure>\n\n<p>退出虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda deactivate</span><br></pre></td></tr></table></figure>\n\n<p>删除虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda remove -n myenv --all</span><br></pre></td></tr></table></figure>\n\n<p>查看当前环境中已经安装的包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda list</span><br></pre></td></tr></table></figure>\n\n<p>查看所有的虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda <span class=\"built_in\">env</span> list</span><br></pre></td></tr></table></figure>\n\n<p>两个虚拟环境的包对比：<br>步骤 1：导出 YML 文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导出第一个环境  </span></span><br><span class=\"line\">conda <span class=\"built_in\">env</span> <span class=\"built_in\">export</span> --name env1 &gt; env1.yml </span><br><span class=\"line\"><span class=\"comment\"># 导出第二个环境 </span></span><br><span class=\"line\">conda <span class=\"built_in\">env</span> <span class=\"built_in\">export</span> --name env2 &gt; env2.yml</span><br></pre></td></tr></table></figure>\n\n<p>或者用TXT对比：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 激活第一个环境 </span></span><br><span class=\"line\">conda activate env1 conda list &gt; env1_packages.txt </span><br><span class=\"line\"><span class=\"comment\"># 激活第二个环境 </span></span><br><span class=\"line\">conda activate env2 conda list &gt; env2_packages.txt</span><br></pre></td></tr></table></figure>\n\n<p>步骤 2：对比 YML 文件<br>使用文本编辑器（如 VS Code）或命令行工具对比：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diff env1.yml env2.yml</span><br></pre></td></tr></table></figure>\n<p>diff会逐行对比差异，结果很乱不太好用</p>\n<p>所以写了个python脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def read_pip_list(file_path):</span><br><span class=\"line\">    with open(file_path, <span class=\"string\">&quot;r&quot;</span>) as f:</span><br><span class=\"line\">        <span class=\"built_in\">return</span> [line.strip().<span class=\"built_in\">split</span>() <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f <span class=\"keyword\">if</span> not line.startswith((&quot;Package&quot;, &quot;---&quot;))]</span><br><span class=\"line\"></span><br><span class=\"line\">def compare_pip_lists(list1, list2):</span><br><span class=\"line\">    set1 = &#123;pkg[0]: pkg[1] <span class=\"keyword\">for</span> pkg <span class=\"keyword\">in</span> list1&#125;</span><br><span class=\"line\">    set2 = &#123;pkg[0]: pkg[1] <span class=\"keyword\">for</span> pkg <span class=\"keyword\">in</span> list2&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    added = <span class=\"built_in\">set</span>(set2.keys()) - <span class=\"built_in\">set</span>(set1.keys())</span><br><span class=\"line\">    removed = <span class=\"built_in\">set</span>(set1.keys()) - <span class=\"built_in\">set</span>(set2.keys())</span><br><span class=\"line\">    changed = &#123;pkg <span class=\"keyword\">for</span> pkg <span class=\"keyword\">in</span> set1 <span class=\"keyword\">if</span> pkg <span class=\"keyword\">in</span> set2 and set1[pkg] != set2[pkg]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;新增的包:&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> pkg <span class=\"keyword\">in</span> sorted(added):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(f<span class=\"string\">&quot;  + &#123;pkg&#125; == &#123;set2[pkg]&#125;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n删除的包:&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> pkg <span class=\"keyword\">in</span> sorted(removed):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(f<span class=\"string\">&quot;  - &#123;pkg&#125; == &#123;set1[pkg]&#125;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n版本变化的包:&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> pkg <span class=\"keyword\">in</span> sorted(changed):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(f<span class=\"string\">&quot;  ⇄ &#123;pkg&#125; == &#123;set1[pkg]&#125; → &#123;set2[pkg]&#125;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 替换为你的文件路径</span></span><br><span class=\"line\">list1 = read_pip_list(<span class=\"string\">&quot;siamlat_pip.txt&quot;</span>)</span><br><span class=\"line\">list2 = read_pip_list(<span class=\"string\">&quot;plat_pip.txt&quot;</span>)</span><br><span class=\"line\">compare_pip_lists(list1, list2)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注意：YML 文件可能包含以下差异：</p>\n<ul>\n<li>构建版本（如 py38h5…），建议使用 –no-builds 忽略：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda <span class=\"built_in\">env</span> <span class=\"built_in\">export</span> --name env1 --no-builds &gt; env1.yml</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"虚拟环境常用指令\"><a href=\"#虚拟环境常用指令\" class=\"headerlink\" title=\"虚拟环境常用指令\"></a>虚拟环境常用指令</h2><p>更新虚拟环境的python版本</p>\n<p>可以在当前环境中直接修改版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install python=3.8</span><br></pre></td></tr></table></figure>"},{"title":"Github-Q&A","date":"2025-06-01T02:34:58.000Z","updated":"2025-04-25T09:31:55.000Z","_content":"\n> [!NOTE] 操作环境\n> Ubuntu-22.04.3 server 树莓派4\n\n### clash\n#### 1.下载clash\n参考[Ubuntu 22.04 安装 Clash | EagleBear2002 的博客](https://eaglebear2002.github.io/%E6%8A%80%E6%9C%AF%E7%A7%91%E6%99%AE/Ubuntu%2022.04%20%E5%AE%89%E8%A3%85%20Clash/)\nGithub 上的 clash 官方仓库已经删库跑路。可以在[Releases · doreamon-design/clash (github.com)](https://github.com/doreamon-design/clash/releases)下载与自己系统架构符合的压缩包。\n这里选择`clash_2.0.24_linux_arm64.tar.gz`\n\n首先创建clash目录，这里我在root目录下创建的：\n```bash\nsudo mkdir /root/clash\ncd clash\n```\n将压缩包上传到clash目录下，并解压：\n```bash\ntar -zxvf clash_2.0.24_linux_arm64.tar.gz\n```\n或者指定解压目录：\n```bash\ntar -zxvf clash_2.0.24_linux_arm64.tar.gz -C /root/clash\n```\n添加可执行权限：\n```bash\nchmod +x clash\n```\n在clash目录下，运行文件clash：\n```bash\nroot@ubuntu:~/clash# ./clash -d .\nINFO[0000] Can't find config, create a initial config file \nINFO[0000] Can't find MMDB, start download              \nINFO[0005] inbound mixed://127.0.0.1:7890 created successfully \n```\n此时目录下会多出几个文件，`Ctrl+C`先停止运行。\n#### 2.配置clash目录下的文件\n参考：[linux服务器使用clash代理 - 飞书云文档 (feishu.cn)](https://uestc.feishu.cn/wiki/LOZVwBcNciHdJIkeLDlcwSWdnMf)\n[linux环境使用clash实现网络代理访问外网 | 码农家园 (codenong.com)](https://www.codenong.com/cs110925767/)\n[在 Linux 中使用 Clash | CodeSwift (iswiftai.com)](https://blog.iswiftai.com/posts/clash-linux/)\n\n 1. config.yaml\n参考[Ubuntu22.04桌面版配置Clash for Linux - 编程猎人 (programminghunter.com)](https://www.programminghunter.com/article/89132472759/)\n这是clash的配置文件，需要自己找机场，拿到`订阅链接`。我用的是[https://mojie.me/#/register?code=7KH7LcII]。\n注意订阅链接需要进行格式转换，转换工具的网址为[在线订阅转换工具 (v1.mk)](https://suburl.v1.mk/)\n![Q&A 1.png](/images/Q&A 1.png)\n复制下方的短链接，下载配置文件config.yaml。如果直接使用上面的长链接，就会出现类似<line 1: cannot unmarshal !!str `dm1lc3M...` into config.RawConfig>的格式错误。\n```bash\n# wget -O config.yaml [订阅链接]\nwget -O config.yaml https://v1.mk/iK0uLgW\n```\n如果配置文件正常，运行clash之后应该是这样的结果：\n```bash\nroot@ubuntu:~/clash# ./clash -d .\nINFO[0000] Start initial compatible provider 🇯🇵 日本节点    \n...  \nINFO[0000] Start initial compatible provider 📲 电报消息     \nINFO[0000] RESTful API listening at: [::]:9090          \nINFO[0000] inbound http://:7890 created successfully    \nINFO[0000] inbound socks://:7891 created successfully \n```\n 2. Country.mmdb\nCountry.mmdb为全球IP库，可以实现各个国家的IP信息解析和地理定位。这里我用第一次运行clash后自动下载的文件没有问题。\n如果出现问题的话可以试试去前面几篇参考网址中找这个文件，然后替换掉。\n提供一个下载的网址[Releases · Dreamacro/maxmind-geoip (github.com)](https://github.com/Dreamacro/maxmind-geoip/releases)\n#### 3.配置仪表盘\n参考：[linux下部署Clash+dashboard - 系统配置和定制 - ParrotSec中文社区 (parrotsec-cn.org)](https://parrotsec-cn.org/t/linux-clash-dashboard/5169)\n\nclash for linux是不带仪表盘界面的，可以用在线的界面[Clash (razord.top)](https://clash.razord.top/#/proxies)。\n也能自己下载并且配置。这里给一个下载地址：[yacd.tar.xz](https://github.com/haishanh/yacd/releases/download/v0.3.7/yacd.tar.xz)。\n可以直接到项目里下载。yacd dashboard的GitHub项目[haishanh/yacd: Yet Another Clash Dashboard (github.com)](https://github.com/haishanh/yacd)\n\n下载完成后上传到clash目录下，解压，将文件目录命名为`dashboard`。\n```bash\ntar -xvf yacd.tar.xz\nmv public dashboard\n```\n\n打开配置文件`config.yaml`：\n```bash\nvim config.yaml\n```\n修改配置文件，添加`external-ui`：\n```bash\nport: 7890 \nsocks-port: 7891 \nallow-lan: true \nmode: Rule \nlog-level: info  `secert:` 123456 # 增加这一行, 如果你希望你的clash web要密码访问可以在这块配置密码, 如果不需要直接注释掉即可\nexternal-ui: dashboard # 增加这一行 后面写入相对路径或绝对路径\nexternal-controller: 0.0.0.0:9090\n```\n保存退出后运行clash，结果如下：\n```bash\nroot@ubuntu:~/clash# ./clash -d .\nINFO[0000] Start initial compatible provider 🇭🇰 香港节点    \n... \nINFO[0000] Start initial compatible provider 🌏 国内媒体     \nINFO[0000] RESTful API listening at: [::]:9090          \nINFO[0000] inbound http://:7890 created successfully    \nINFO[0000] inbound socks://:7891 created successfully\n```\n界面运行在9090端口。注意运行clash要占用当前bash，建议新开一个bash。\n#### 4.设置端口转发在本地打开仪表盘\n参考：[通过 SSH 转发TCP连接数据 - asml - 博客园 (cnblogs.com)](https://www.cnblogs.com/DragonStart/p/7791311.html#:~:text=%E8%AE%BE%E5%AE%9A%20%E9%A6%96%E5%85%88%E5%8F%8C%E6%96%B9%E7%9A%84%2Fetc%2Fssh%2Fsshd_config%E8%AE%BE%E5%AE%9A%E4%BB%A5%E4%B8%8B%E5%9B%9B%E9%A1%B9%3A%20AllowAgentForwarding%20yes%20AllowTcpForwarding%20yes%20GatewayPorts%20yes,ssh%20-R%202000%20%3A%E7%9B%AE%E6%A0%87%E4%B8%BB%E6%9C%BA%3A%20142%20root%40%20%E6%BA%90%E4%B8%BB%E6%9C%BA%20%E8%BF%99%E6%A0%B7%E5%8F%91%E9%80%81%E5%88%B0%E6%BA%90%E4%B8%BB%E6%9C%BA%3A2000%E7%9A%84TCP%E9%93%BE%E6%8E%A5%2C%E5%B0%B1%E4%BC%9A%E8%BD%AC%E5%8F%91%E5%88%B0%E7%9B%AE%E6%A0%87%3A142%2C%E4%BC%9A%E6%89%93%E5%BC%80%E4%B8%80%E4%B8%AAbash%2C%E5%A6%82%E6%9E%9C%E5%85%B3%E9%97%AD%2C%E5%88%99%E4%B8%8D%E5%86%8D%E8%BD%AC%E5%8F%91.)\n首先打开SSH配置文件：\n```bash\nsudo nano /etc/ssh/sshd_config\n```\n确保以下设置开启（建议相关修改直接添加在文件开头，方便查看）\n```text\nAllowAgentForwarding yes\nAllowTcpForwarding yes\nGatewayPorts yes\n```\n保存退出。\n\n本地主机与树莓派处于两个不同的局域网之中，因此需要先将云服务器的9090端口映射到本地的9090端口。注意在云服务器安全组配置中开放9090端口，只开放入方向就可以。\n\n在树莓派上运行指令：\n```bash\nssh -N -R 9090:localhost:9090 root@59.110.168.138\n```  \n指令用于建立一个SSH隧道（tunnel），注意运行时要占用当前bash，建议新开一个bash。具体来说，该指令的含义如下：\n\n- `ssh`: SSH命令的关键字。\n- `-N`: 表示不执行任何远程命令。在这个上下文中，它告诉SSH客户端仅仅建立连接，而不执行任何远程命令。如果没有这句话，会在输入密码后登录远程主机。\n- `-R 9090:localhost:9090`: 这是SSH端口转发的部分。它将远程主机（`59.110.168.138`）的端口 `9090` 映射到本地主机（localhost）的端口 `9090`。这意味着，如果你连接到远程主机的 `9090` 端口，实际上是连接到本地主机的 `9090` 端口。这通常用于在两个主机之间建立一个安全的通信通道。\n- `root@59.110.168.138`: 这是SSH连接的目标地址，其中 `root` 是用户名，`59.110.168.138` 是远程主机的IP地址。\n\n此时，在云服务器运行指令`lsof`可以看到端口9090占用情况：\n```bash\nroot@iZ2zeamp64f3i8d4gvpba8Z:~# lsof -i:9090\nCOMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\nsshd    34205 root    5u  IPv4 616381      0t0  TCP localhost:9090 (LISTEN)\n```\n\n本地主机按Win+R，输入cmd，打开命令提示符，运行指令：\n```shell\nssh -N -L 9090:localhost:9090 root@59.110.168.138\n```\n\n此时在命令提示符中运行指令`netstat`可以看到端口9090占用情况：\n```shell\nC:\\Users\\Administrator>netstat -ano | find \"9090\"\n  TCP    127.0.0.1:9090         0.0.0.0:0              LISTENING       28772\n  TCP    [::1]:9090             [::]:0                 LISTENING       28772\n```\n\n端口转发设置完成后，运行clash（确保仪表盘配置完成）在浏览器中输入[localhost:9090/ui](http://localhost:9090/ui/)即可打开仪表盘界面，对clash节点等进行配置。\n#### 5.测试clash是否能使用\n从前面clash运行的结果可以知道，HTTP Proxy Port是7890端口。\n这段指令会下载rapicam-apps，可以换成自己要用到的指令测试。\n```bash\nroot@ubuntu:~# git clone -c http.proxy=http://127.0.0.1:7890 https://github.com/raspberrypi/rpicam-apps.git\nCloning into 'rpicam-apps'...\nremote: Enumerating objects: 2643, done.\nremote: Counting objects: 100% (1356/1356), done.\nremote: Compressing objects: 100% (340/340), done.\nremote: Total 2643 (delta 1088), reused 1033 (delta 1016), pack-reused 1287\nReceiving objects: 100% (2643/2643), 742.82 KiB | 1.10 MiB/s, done.\nResolving deltas: 100% (1919/1919), done.\n```\n### steamcommunity302\n$Last Edited：2025.02.20/10:33$\n___\n\n针对github的。\n来源于：\n[Linux/Macos环境下使用 steamcommunity 302 教程 – Dogfight360](https://www.dogfight360.com/blog/2319/)\n中间提到了hosts写入的问题，但是我没明白怎么操作，所以就没操作，不过最后也能连上github。\n1. 下载`steamcommunity302`\n\t下载地址：[steamcommunity 302 Ver.12.1.46 – Dogfight360](https://www.dogfight360.com/blog/686/)\n\t使用方法：[steamcommunity302详细功能介绍](https://www.dogfight360.com/blog/knowledge-base/steamcommunity_302_manual/)\n\t下载完成后解压运行，首先在windows系统上配置完成。\n2. 下载`caddy`\n\t下载地址： [https://github.com/caddyserver/caddy/releases/tag/v2.6.4](https://github.com/caddyserver/caddy/releases/tag/v2.6.4)\n\t==注意对应系统版本==，tar.gz/zip的压缩包格式的。\n\t下载完成后解压。\n3. 编辑 `steamcommunity_302.caddy.json`\n\t将端口11417（这个是随机的）批量替换为443。类似：\n```text\nhttps://steamcommunity.com:17417 https://www.steamcommunity.com:17417 {\n\n    tls steamcommunity.crt steamcommunity.key\n\n    @steamcommunityrp {\n\n    }\n```\n4. 将302目录下的文件与caddy一同拷贝到Linux/Macos (一共是6个文件)\n```text\nsteamcommunityCA.pem  \nsteamcommunityCA.key  \nsteamcommunity.key  \nsteamcommunity.crt  \nsteamcommunity_302.caddy.json  \ncaddy\n```\n5. 导入根证书`steamcommunityCA.pem`\n\t**Ubuntu**:  \n```bash\nsudo cp steamcommunityCA.pem /usr/local/share/ca-certificates/steamcommunityCA.crt\nsudo update-ca-certificates\n```\n6. 运行\n```bash\nchmod +x caddy\n./caddy run --config steamcommunity_302.caddy.json --adapter caddyfile\n```\n### hiddify\n$Last Edited：2025.02.27/09:48$\n___\n\n是类似clash的代理工具，需要有机场   我 的`订阅链接`。\n在[Releases · hiddify/hiddify-app](https://github.com/hiddify/hiddify-app/releases)下载系统对应版本，目前只有x64的，因此对于ARM架构的处理器。这种方案不可行。\n\nUnbuntu系统安装方式：\n```bash\ncd 下载文件目录\nsudo dpkg -i Hiddify-Debian-x64.deb\n```\n\n- 桌面版打开程序，通过`订阅链接`下载配置文件，点击`连接`即可运行。图像界面较为简单，此处不再赘述。","source":"_posts/2025-06-01-Github-QA.md","raw":"---\ntitle: Github-Q&A\ndate: 2025-06-01 10:34:58\nupdated: 2025-04-25 17:31:55\ncategories:\n  - [服务器&嵌入式平台操作, Q&A问题及解决汇总]\ntags:\npermalink: github-q&a/\n---\n\n> [!NOTE] 操作环境\n> Ubuntu-22.04.3 server 树莓派4\n\n### clash\n#### 1.下载clash\n参考[Ubuntu 22.04 安装 Clash | EagleBear2002 的博客](https://eaglebear2002.github.io/%E6%8A%80%E6%9C%AF%E7%A7%91%E6%99%AE/Ubuntu%2022.04%20%E5%AE%89%E8%A3%85%20Clash/)\nGithub 上的 clash 官方仓库已经删库跑路。可以在[Releases · doreamon-design/clash (github.com)](https://github.com/doreamon-design/clash/releases)下载与自己系统架构符合的压缩包。\n这里选择`clash_2.0.24_linux_arm64.tar.gz`\n\n首先创建clash目录，这里我在root目录下创建的：\n```bash\nsudo mkdir /root/clash\ncd clash\n```\n将压缩包上传到clash目录下，并解压：\n```bash\ntar -zxvf clash_2.0.24_linux_arm64.tar.gz\n```\n或者指定解压目录：\n```bash\ntar -zxvf clash_2.0.24_linux_arm64.tar.gz -C /root/clash\n```\n添加可执行权限：\n```bash\nchmod +x clash\n```\n在clash目录下，运行文件clash：\n```bash\nroot@ubuntu:~/clash# ./clash -d .\nINFO[0000] Can't find config, create a initial config file \nINFO[0000] Can't find MMDB, start download              \nINFO[0005] inbound mixed://127.0.0.1:7890 created successfully \n```\n此时目录下会多出几个文件，`Ctrl+C`先停止运行。\n#### 2.配置clash目录下的文件\n参考：[linux服务器使用clash代理 - 飞书云文档 (feishu.cn)](https://uestc.feishu.cn/wiki/LOZVwBcNciHdJIkeLDlcwSWdnMf)\n[linux环境使用clash实现网络代理访问外网 | 码农家园 (codenong.com)](https://www.codenong.com/cs110925767/)\n[在 Linux 中使用 Clash | CodeSwift (iswiftai.com)](https://blog.iswiftai.com/posts/clash-linux/)\n\n 1. config.yaml\n参考[Ubuntu22.04桌面版配置Clash for Linux - 编程猎人 (programminghunter.com)](https://www.programminghunter.com/article/89132472759/)\n这是clash的配置文件，需要自己找机场，拿到`订阅链接`。我用的是[https://mojie.me/#/register?code=7KH7LcII]。\n注意订阅链接需要进行格式转换，转换工具的网址为[在线订阅转换工具 (v1.mk)](https://suburl.v1.mk/)\n![Q&A 1.png](/images/Q&A 1.png)\n复制下方的短链接，下载配置文件config.yaml。如果直接使用上面的长链接，就会出现类似<line 1: cannot unmarshal !!str `dm1lc3M...` into config.RawConfig>的格式错误。\n```bash\n# wget -O config.yaml [订阅链接]\nwget -O config.yaml https://v1.mk/iK0uLgW\n```\n如果配置文件正常，运行clash之后应该是这样的结果：\n```bash\nroot@ubuntu:~/clash# ./clash -d .\nINFO[0000] Start initial compatible provider 🇯🇵 日本节点    \n...  \nINFO[0000] Start initial compatible provider 📲 电报消息     \nINFO[0000] RESTful API listening at: [::]:9090          \nINFO[0000] inbound http://:7890 created successfully    \nINFO[0000] inbound socks://:7891 created successfully \n```\n 2. Country.mmdb\nCountry.mmdb为全球IP库，可以实现各个国家的IP信息解析和地理定位。这里我用第一次运行clash后自动下载的文件没有问题。\n如果出现问题的话可以试试去前面几篇参考网址中找这个文件，然后替换掉。\n提供一个下载的网址[Releases · Dreamacro/maxmind-geoip (github.com)](https://github.com/Dreamacro/maxmind-geoip/releases)\n#### 3.配置仪表盘\n参考：[linux下部署Clash+dashboard - 系统配置和定制 - ParrotSec中文社区 (parrotsec-cn.org)](https://parrotsec-cn.org/t/linux-clash-dashboard/5169)\n\nclash for linux是不带仪表盘界面的，可以用在线的界面[Clash (razord.top)](https://clash.razord.top/#/proxies)。\n也能自己下载并且配置。这里给一个下载地址：[yacd.tar.xz](https://github.com/haishanh/yacd/releases/download/v0.3.7/yacd.tar.xz)。\n可以直接到项目里下载。yacd dashboard的GitHub项目[haishanh/yacd: Yet Another Clash Dashboard (github.com)](https://github.com/haishanh/yacd)\n\n下载完成后上传到clash目录下，解压，将文件目录命名为`dashboard`。\n```bash\ntar -xvf yacd.tar.xz\nmv public dashboard\n```\n\n打开配置文件`config.yaml`：\n```bash\nvim config.yaml\n```\n修改配置文件，添加`external-ui`：\n```bash\nport: 7890 \nsocks-port: 7891 \nallow-lan: true \nmode: Rule \nlog-level: info  `secert:` 123456 # 增加这一行, 如果你希望你的clash web要密码访问可以在这块配置密码, 如果不需要直接注释掉即可\nexternal-ui: dashboard # 增加这一行 后面写入相对路径或绝对路径\nexternal-controller: 0.0.0.0:9090\n```\n保存退出后运行clash，结果如下：\n```bash\nroot@ubuntu:~/clash# ./clash -d .\nINFO[0000] Start initial compatible provider 🇭🇰 香港节点    \n... \nINFO[0000] Start initial compatible provider 🌏 国内媒体     \nINFO[0000] RESTful API listening at: [::]:9090          \nINFO[0000] inbound http://:7890 created successfully    \nINFO[0000] inbound socks://:7891 created successfully\n```\n界面运行在9090端口。注意运行clash要占用当前bash，建议新开一个bash。\n#### 4.设置端口转发在本地打开仪表盘\n参考：[通过 SSH 转发TCP连接数据 - asml - 博客园 (cnblogs.com)](https://www.cnblogs.com/DragonStart/p/7791311.html#:~:text=%E8%AE%BE%E5%AE%9A%20%E9%A6%96%E5%85%88%E5%8F%8C%E6%96%B9%E7%9A%84%2Fetc%2Fssh%2Fsshd_config%E8%AE%BE%E5%AE%9A%E4%BB%A5%E4%B8%8B%E5%9B%9B%E9%A1%B9%3A%20AllowAgentForwarding%20yes%20AllowTcpForwarding%20yes%20GatewayPorts%20yes,ssh%20-R%202000%20%3A%E7%9B%AE%E6%A0%87%E4%B8%BB%E6%9C%BA%3A%20142%20root%40%20%E6%BA%90%E4%B8%BB%E6%9C%BA%20%E8%BF%99%E6%A0%B7%E5%8F%91%E9%80%81%E5%88%B0%E6%BA%90%E4%B8%BB%E6%9C%BA%3A2000%E7%9A%84TCP%E9%93%BE%E6%8E%A5%2C%E5%B0%B1%E4%BC%9A%E8%BD%AC%E5%8F%91%E5%88%B0%E7%9B%AE%E6%A0%87%3A142%2C%E4%BC%9A%E6%89%93%E5%BC%80%E4%B8%80%E4%B8%AAbash%2C%E5%A6%82%E6%9E%9C%E5%85%B3%E9%97%AD%2C%E5%88%99%E4%B8%8D%E5%86%8D%E8%BD%AC%E5%8F%91.)\n首先打开SSH配置文件：\n```bash\nsudo nano /etc/ssh/sshd_config\n```\n确保以下设置开启（建议相关修改直接添加在文件开头，方便查看）\n```text\nAllowAgentForwarding yes\nAllowTcpForwarding yes\nGatewayPorts yes\n```\n保存退出。\n\n本地主机与树莓派处于两个不同的局域网之中，因此需要先将云服务器的9090端口映射到本地的9090端口。注意在云服务器安全组配置中开放9090端口，只开放入方向就可以。\n\n在树莓派上运行指令：\n```bash\nssh -N -R 9090:localhost:9090 root@59.110.168.138\n```  \n指令用于建立一个SSH隧道（tunnel），注意运行时要占用当前bash，建议新开一个bash。具体来说，该指令的含义如下：\n\n- `ssh`: SSH命令的关键字。\n- `-N`: 表示不执行任何远程命令。在这个上下文中，它告诉SSH客户端仅仅建立连接，而不执行任何远程命令。如果没有这句话，会在输入密码后登录远程主机。\n- `-R 9090:localhost:9090`: 这是SSH端口转发的部分。它将远程主机（`59.110.168.138`）的端口 `9090` 映射到本地主机（localhost）的端口 `9090`。这意味着，如果你连接到远程主机的 `9090` 端口，实际上是连接到本地主机的 `9090` 端口。这通常用于在两个主机之间建立一个安全的通信通道。\n- `root@59.110.168.138`: 这是SSH连接的目标地址，其中 `root` 是用户名，`59.110.168.138` 是远程主机的IP地址。\n\n此时，在云服务器运行指令`lsof`可以看到端口9090占用情况：\n```bash\nroot@iZ2zeamp64f3i8d4gvpba8Z:~# lsof -i:9090\nCOMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\nsshd    34205 root    5u  IPv4 616381      0t0  TCP localhost:9090 (LISTEN)\n```\n\n本地主机按Win+R，输入cmd，打开命令提示符，运行指令：\n```shell\nssh -N -L 9090:localhost:9090 root@59.110.168.138\n```\n\n此时在命令提示符中运行指令`netstat`可以看到端口9090占用情况：\n```shell\nC:\\Users\\Administrator>netstat -ano | find \"9090\"\n  TCP    127.0.0.1:9090         0.0.0.0:0              LISTENING       28772\n  TCP    [::1]:9090             [::]:0                 LISTENING       28772\n```\n\n端口转发设置完成后，运行clash（确保仪表盘配置完成）在浏览器中输入[localhost:9090/ui](http://localhost:9090/ui/)即可打开仪表盘界面，对clash节点等进行配置。\n#### 5.测试clash是否能使用\n从前面clash运行的结果可以知道，HTTP Proxy Port是7890端口。\n这段指令会下载rapicam-apps，可以换成自己要用到的指令测试。\n```bash\nroot@ubuntu:~# git clone -c http.proxy=http://127.0.0.1:7890 https://github.com/raspberrypi/rpicam-apps.git\nCloning into 'rpicam-apps'...\nremote: Enumerating objects: 2643, done.\nremote: Counting objects: 100% (1356/1356), done.\nremote: Compressing objects: 100% (340/340), done.\nremote: Total 2643 (delta 1088), reused 1033 (delta 1016), pack-reused 1287\nReceiving objects: 100% (2643/2643), 742.82 KiB | 1.10 MiB/s, done.\nResolving deltas: 100% (1919/1919), done.\n```\n### steamcommunity302\n$Last Edited：2025.02.20/10:33$\n___\n\n针对github的。\n来源于：\n[Linux/Macos环境下使用 steamcommunity 302 教程 – Dogfight360](https://www.dogfight360.com/blog/2319/)\n中间提到了hosts写入的问题，但是我没明白怎么操作，所以就没操作，不过最后也能连上github。\n1. 下载`steamcommunity302`\n\t下载地址：[steamcommunity 302 Ver.12.1.46 – Dogfight360](https://www.dogfight360.com/blog/686/)\n\t使用方法：[steamcommunity302详细功能介绍](https://www.dogfight360.com/blog/knowledge-base/steamcommunity_302_manual/)\n\t下载完成后解压运行，首先在windows系统上配置完成。\n2. 下载`caddy`\n\t下载地址： [https://github.com/caddyserver/caddy/releases/tag/v2.6.4](https://github.com/caddyserver/caddy/releases/tag/v2.6.4)\n\t==注意对应系统版本==，tar.gz/zip的压缩包格式的。\n\t下载完成后解压。\n3. 编辑 `steamcommunity_302.caddy.json`\n\t将端口11417（这个是随机的）批量替换为443。类似：\n```text\nhttps://steamcommunity.com:17417 https://www.steamcommunity.com:17417 {\n\n    tls steamcommunity.crt steamcommunity.key\n\n    @steamcommunityrp {\n\n    }\n```\n4. 将302目录下的文件与caddy一同拷贝到Linux/Macos (一共是6个文件)\n```text\nsteamcommunityCA.pem  \nsteamcommunityCA.key  \nsteamcommunity.key  \nsteamcommunity.crt  \nsteamcommunity_302.caddy.json  \ncaddy\n```\n5. 导入根证书`steamcommunityCA.pem`\n\t**Ubuntu**:  \n```bash\nsudo cp steamcommunityCA.pem /usr/local/share/ca-certificates/steamcommunityCA.crt\nsudo update-ca-certificates\n```\n6. 运行\n```bash\nchmod +x caddy\n./caddy run --config steamcommunity_302.caddy.json --adapter caddyfile\n```\n### hiddify\n$Last Edited：2025.02.27/09:48$\n___\n\n是类似clash的代理工具，需要有机场   我 的`订阅链接`。\n在[Releases · hiddify/hiddify-app](https://github.com/hiddify/hiddify-app/releases)下载系统对应版本，目前只有x64的，因此对于ARM架构的处理器。这种方案不可行。\n\nUnbuntu系统安装方式：\n```bash\ncd 下载文件目录\nsudo dpkg -i Hiddify-Debian-x64.deb\n```\n\n- 桌面版打开程序，通过`订阅链接`下载配置文件，点击`连接`即可运行。图像界面较为简单，此处不再赘述。","slug":"2025-06-01-Github-QA","published":1,"__permalink":"github-q&a/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0mr0005zovdc8cgc3eq","content":"<blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu-22.04.3 server 树莓派4</p>\n</blockquote>\n<h3 id=\"clash\"><a href=\"#clash\" class=\"headerlink\" title=\"clash\"></a>clash</h3><h4 id=\"1-下载clash\"><a href=\"#1-下载clash\" class=\"headerlink\" title=\"1.下载clash\"></a>1.下载clash</h4><p>参考<a href=\"https://eaglebear2002.github.io/%E6%8A%80%E6%9C%AF%E7%A7%91%E6%99%AE/Ubuntu%2022.04%20%E5%AE%89%E8%A3%85%20Clash/\">Ubuntu 22.04 安装 Clash | EagleBear2002 的博客</a><br>Github 上的 clash 官方仓库已经删库跑路。可以在<a href=\"https://github.com/doreamon-design/clash/releases\">Releases · doreamon-design&#x2F;clash (github.com)</a>下载与自己系统架构符合的压缩包。<br>这里选择<code>clash_2.0.24_linux_arm64.tar.gz</code></p>\n<p>首先创建clash目录，这里我在root目录下创建的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">mkdir</span> /root/clash</span><br><span class=\"line\"><span class=\"built_in\">cd</span> clash</span><br></pre></td></tr></table></figure>\n<p>将压缩包上传到clash目录下，并解压：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf clash_2.0.24_linux_arm64.tar.gz</span><br></pre></td></tr></table></figure>\n<p>或者指定解压目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf clash_2.0.24_linux_arm64.tar.gz -C /root/clash</span><br></pre></td></tr></table></figure>\n<p>添加可执行权限：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> +x clash</span><br></pre></td></tr></table></figure>\n<p>在clash目录下，运行文件clash：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:~/clash# ./clash -d .</span><br><span class=\"line\">INFO[0000] Can<span class=\"string\">&#x27;t find config, create a initial config file </span></span><br><span class=\"line\"><span class=\"string\">INFO[0000] Can&#x27;</span>t find MMDB, start download              </span><br><span class=\"line\">INFO[0005] inbound mixed://127.0.0.1:7890 created successfully </span><br></pre></td></tr></table></figure>\n<p>此时目录下会多出几个文件，<code>Ctrl+C</code>先停止运行。</p>\n<h4 id=\"2-配置clash目录下的文件\"><a href=\"#2-配置clash目录下的文件\" class=\"headerlink\" title=\"2.配置clash目录下的文件\"></a>2.配置clash目录下的文件</h4><p>参考：<a href=\"https://uestc.feishu.cn/wiki/LOZVwBcNciHdJIkeLDlcwSWdnMf\">linux服务器使用clash代理 - 飞书云文档 (feishu.cn)</a><br><a href=\"https://www.codenong.com/cs110925767/\">linux环境使用clash实现网络代理访问外网 | 码农家园 (codenong.com)</a><br><a href=\"https://blog.iswiftai.com/posts/clash-linux/\">在 Linux 中使用 Clash | CodeSwift (iswiftai.com)</a></p>\n<ol>\n<li>config.yaml<br>参考<a href=\"https://www.programminghunter.com/article/89132472759/\">Ubuntu22.04桌面版配置Clash for Linux - 编程猎人 (programminghunter.com)</a><br>这是clash的配置文件，需要自己找机场，拿到<code>订阅链接</code>。我用的是[<a href=\"https://mojie.me/#/register?code=7KH7LcII]%E3%80%82\">https://mojie.me/#/register?code=7KH7LcII]。</a><br>注意订阅链接需要进行格式转换，转换工具的网址为<a href=\"https://suburl.v1.mk/\">在线订阅转换工具 (v1.mk)</a><br>![Q&amp;A 1.png](&#x2F;images&#x2F;Q&amp;A 1.png)<br>复制下方的短链接，下载配置文件config.yaml。如果直接使用上面的长链接，就会出现类似&lt;line 1: cannot unmarshal !!str <code>dm1lc3M...</code> into config.RawConfig&gt;的格式错误。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># wget -O config.yaml [订阅链接]</span></span><br><span class=\"line\">wget -O config.yaml https://v1.mk/iK0uLgW</span><br></pre></td></tr></table></figure>\n如果配置文件正常，运行clash之后应该是这样的结果：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:~/clash# ./clash -d .</span><br><span class=\"line\">INFO[0000] Start initial compatible provider 🇯🇵 日本节点    </span><br><span class=\"line\">...  </span><br><span class=\"line\">INFO[0000] Start initial compatible provider 📲 电报消息     </span><br><span class=\"line\">INFO[0000] RESTful API listening at: [::]:9090          </span><br><span class=\"line\">INFO[0000] inbound http://:7890 created successfully    </span><br><span class=\"line\">INFO[0000] inbound socks://:7891 created successfully </span><br></pre></td></tr></table></figure></li>\n<li>Country.mmdb<br>Country.mmdb为全球IP库，可以实现各个国家的IP信息解析和地理定位。这里我用第一次运行clash后自动下载的文件没有问题。<br>如果出现问题的话可以试试去前面几篇参考网址中找这个文件，然后替换掉。<br>提供一个下载的网址<a href=\"https://github.com/Dreamacro/maxmind-geoip/releases\">Releases · Dreamacro&#x2F;maxmind-geoip (github.com)</a></li>\n</ol>\n<h4 id=\"3-配置仪表盘\"><a href=\"#3-配置仪表盘\" class=\"headerlink\" title=\"3.配置仪表盘\"></a>3.配置仪表盘</h4><p>参考：<a href=\"https://parrotsec-cn.org/t/linux-clash-dashboard/5169\">linux下部署Clash+dashboard - 系统配置和定制 - ParrotSec中文社区 (parrotsec-cn.org)</a></p>\n<p>clash for linux是不带仪表盘界面的，可以用在线的界面<a href=\"https://clash.razord.top/#/proxies\">Clash (razord.top)</a>。<br>也能自己下载并且配置。这里给一个下载地址：<a href=\"https://github.com/haishanh/yacd/releases/download/v0.3.7/yacd.tar.xz\">yacd.tar.xz</a>。<br>可以直接到项目里下载。yacd dashboard的GitHub项目<a href=\"https://github.com/haishanh/yacd\">haishanh&#x2F;yacd: Yet Another Clash Dashboard (github.com)</a></p>\n<p>下载完成后上传到clash目录下，解压，将文件目录命名为<code>dashboard</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf yacd.tar.xz</span><br><span class=\"line\"><span class=\"built_in\">mv</span> public dashboard</span><br></pre></td></tr></table></figure>\n\n<p>打开配置文件<code>config.yaml</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim config.yaml</span><br></pre></td></tr></table></figure>\n<p>修改配置文件，添加<code>external-ui</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port: 7890 </span><br><span class=\"line\">socks-port: 7891 </span><br><span class=\"line\">allow-lan: <span class=\"literal\">true</span> </span><br><span class=\"line\">mode: Rule </span><br><span class=\"line\">log-level: info  `secert:` 123456 <span class=\"comment\"># 增加这一行, 如果你希望你的clash web要密码访问可以在这块配置密码, 如果不需要直接注释掉即可</span></span><br><span class=\"line\">external-ui: dashboard <span class=\"comment\"># 增加这一行 后面写入相对路径或绝对路径</span></span><br><span class=\"line\">external-controller: 0.0.0.0:9090</span><br></pre></td></tr></table></figure>\n<p>保存退出后运行clash，结果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:~/clash# ./clash -d .</span><br><span class=\"line\">INFO[0000] Start initial compatible provider 🇭🇰 香港节点    </span><br><span class=\"line\">... </span><br><span class=\"line\">INFO[0000] Start initial compatible provider 🌏 国内媒体     </span><br><span class=\"line\">INFO[0000] RESTful API listening at: [::]:9090          </span><br><span class=\"line\">INFO[0000] inbound http://:7890 created successfully    </span><br><span class=\"line\">INFO[0000] inbound socks://:7891 created successfully</span><br></pre></td></tr></table></figure>\n<p>界面运行在9090端口。注意运行clash要占用当前bash，建议新开一个bash。</p>\n<h4 id=\"4-设置端口转发在本地打开仪表盘\"><a href=\"#4-设置端口转发在本地打开仪表盘\" class=\"headerlink\" title=\"4.设置端口转发在本地打开仪表盘\"></a>4.设置端口转发在本地打开仪表盘</h4><p>参考：<a href=\"https://www.cnblogs.com/DragonStart/p/7791311.html#:~:text=%E8%AE%BE%E5%AE%9A%20%E9%A6%96%E5%85%88%E5%8F%8C%E6%96%B9%E7%9A%84%2Fetc%2Fssh%2Fsshd_config%E8%AE%BE%E5%AE%9A%E4%BB%A5%E4%B8%8B%E5%9B%9B%E9%A1%B9%3A%20AllowAgentForwarding%20yes%20AllowTcpForwarding%20yes%20GatewayPorts%20yes,ssh%20-R%202000%20%3A%E7%9B%AE%E6%A0%87%E4%B8%BB%E6%9C%BA%3A%20142%20root%40%20%E6%BA%90%E4%B8%BB%E6%9C%BA%20%E8%BF%99%E6%A0%B7%E5%8F%91%E9%80%81%E5%88%B0%E6%BA%90%E4%B8%BB%E6%9C%BA%3A2000%E7%9A%84TCP%E9%93%BE%E6%8E%A5%2C%E5%B0%B1%E4%BC%9A%E8%BD%AC%E5%8F%91%E5%88%B0%E7%9B%AE%E6%A0%87%3A142%2C%E4%BC%9A%E6%89%93%E5%BC%80%E4%B8%80%E4%B8%AAbash%2C%E5%A6%82%E6%9E%9C%E5%85%B3%E9%97%AD%2C%E5%88%99%E4%B8%8D%E5%86%8D%E8%BD%AC%E5%8F%91.\">通过 SSH 转发TCP连接数据 - asml - 博客园 (cnblogs.com)</a><br>首先打开SSH配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nano /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>\n<p>确保以下设置开启（建议相关修改直接添加在文件开头，方便查看）</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AllowAgentForwarding yes</span><br><span class=\"line\">AllowTcpForwarding yes</span><br><span class=\"line\">GatewayPorts yes</span><br></pre></td></tr></table></figure>\n<p>保存退出。</p>\n<p>本地主机与树莓派处于两个不同的局域网之中，因此需要先将云服务器的9090端口映射到本地的9090端口。注意在云服务器安全组配置中开放9090端口，只开放入方向就可以。</p>\n<p>在树莓派上运行指令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -N -R 9090:localhost:9090 root@59.110.168.138</span><br><span class=\"line\">```  </span><br><span class=\"line\">指令用于建立一个SSH隧道（tunnel），注意运行时要占用当前bash，建议新开一个bash。具体来说，该指令的含义如下：</span><br><span class=\"line\"></span><br><span class=\"line\">- `ssh`: SSH命令的关键字。</span><br><span class=\"line\">- `-N`: 表示不执行任何远程命令。在这个上下文中，它告诉SSH客户端仅仅建立连接，而不执行任何远程命令。如果没有这句话，会在输入密码后登录远程主机。</span><br><span class=\"line\">- `-R 9090:localhost:9090`: 这是SSH端口转发的部分。它将远程主机（`59.110.168.138`）的端口 `9090` 映射到本地主机（localhost）的端口 `9090`。这意味着，如果你连接到远程主机的 `9090` 端口，实际上是连接到本地主机的 `9090` 端口。这通常用于在两个主机之间建立一个安全的通信通道。</span><br><span class=\"line\">- `root@59.110.168.138`: 这是SSH连接的目标地址，其中 `root` 是用户名，`59.110.168.138` 是远程主机的IP地址。</span><br><span class=\"line\"></span><br><span class=\"line\">此时，在云服务器运行指令`lsof`可以看到端口9090占用情况：</span><br><span class=\"line\">```bash</span><br><span class=\"line\">root@iZ2zeamp64f3i8d4gvpba8Z:~# lsof -i:9090</span><br><span class=\"line\">COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">sshd    34205 root    5u  IPv4 616381      0t0  TCP localhost:9090 (LISTEN)</span><br></pre></td></tr></table></figure>\n\n<p>本地主机按Win+R，输入cmd，打开命令提示符，运行指令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -N -L 9090:localhost:9090 root@59.110.168.138</span><br></pre></td></tr></table></figure>\n\n<p>此时在命令提示符中运行指令<code>netstat</code>可以看到端口9090占用情况：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Administrator&gt;netstat -ano | find &quot;9090&quot;</span><br><span class=\"line\">  TCP    127.0.0.1:9090         0.0.0.0:0              LISTENING       28772</span><br><span class=\"line\">  TCP    [::1]:9090             [::]:0                 LISTENING       28772</span><br></pre></td></tr></table></figure>\n\n<p>端口转发设置完成后，运行clash（确保仪表盘配置完成）在浏览器中输入<a href=\"http://localhost:9090/ui/\">localhost:9090&#x2F;ui</a>即可打开仪表盘界面，对clash节点等进行配置。</p>\n<h4 id=\"5-测试clash是否能使用\"><a href=\"#5-测试clash是否能使用\" class=\"headerlink\" title=\"5.测试clash是否能使用\"></a>5.测试clash是否能使用</h4><p>从前面clash运行的结果可以知道，HTTP Proxy Port是7890端口。<br>这段指令会下载rapicam-apps，可以换成自己要用到的指令测试。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:~# git <span class=\"built_in\">clone</span> -c http.proxy=http://127.0.0.1:7890 https://github.com/raspberrypi/rpicam-apps.git</span><br><span class=\"line\">Cloning into <span class=\"string\">&#x27;rpicam-apps&#x27;</span>...</span><br><span class=\"line\">remote: Enumerating objects: 2643, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (1356/1356), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (340/340), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Total 2643 (delta 1088), reused 1033 (delta 1016), pack-reused 1287</span><br><span class=\"line\">Receiving objects: 100% (2643/2643), 742.82 KiB | 1.10 MiB/s, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Resolving deltas: 100% (1919/1919), <span class=\"keyword\">done</span>.</span><br></pre></td></tr></table></figure>\n<h3 id=\"steamcommunity302\"><a href=\"#steamcommunity302\" class=\"headerlink\" title=\"steamcommunity302\"></a>steamcommunity302</h3><p>$Last Edited：2025.02.20&#x2F;10:33$</p>\n<hr>\n<p>针对github的。<br>来源于：<br><a href=\"https://www.dogfight360.com/blog/2319/\">Linux&#x2F;Macos环境下使用 steamcommunity 302 教程 – Dogfight360</a><br>中间提到了hosts写入的问题，但是我没明白怎么操作，所以就没操作，不过最后也能连上github。</p>\n<ol>\n<li>下载<code>steamcommunity302</code><br> 下载地址：<a href=\"https://www.dogfight360.com/blog/686/\">steamcommunity 302 Ver.12.1.46 – Dogfight360</a><br> 使用方法：<a href=\"https://www.dogfight360.com/blog/knowledge-base/steamcommunity_302_manual/\">steamcommunity302详细功能介绍</a><br> 下载完成后解压运行，首先在windows系统上配置完成。</li>\n<li>下载<code>caddy</code><br> 下载地址： <a href=\"https://github.com/caddyserver/caddy/releases/tag/v2.6.4\">https://github.com/caddyserver/caddy/releases/tag/v2.6.4</a><br> &#x3D;&#x3D;注意对应系统版本&#x3D;&#x3D;，tar.gz&#x2F;zip的压缩包格式的。<br> 下载完成后解压。</li>\n<li>编辑 <code>steamcommunity_302.caddy.json</code><br> 将端口11417（这个是随机的）批量替换为443。类似：<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://steamcommunity.com:17417 https://www.steamcommunity.com:17417 &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    tls steamcommunity.crt steamcommunity.key</span><br><span class=\"line\"></span><br><span class=\"line\">    @steamcommunityrp &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n<li>将302目录下的文件与caddy一同拷贝到Linux&#x2F;Macos (一共是6个文件)<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">steamcommunityCA.pem  </span><br><span class=\"line\">steamcommunityCA.key  </span><br><span class=\"line\">steamcommunity.key  </span><br><span class=\"line\">steamcommunity.crt  </span><br><span class=\"line\">steamcommunity_302.caddy.json  </span><br><span class=\"line\">caddy</span><br></pre></td></tr></table></figure></li>\n<li>导入根证书<code>steamcommunityCA.pem</code><br> <strong>Ubuntu</strong>:  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">cp</span> steamcommunityCA.pem /usr/local/share/ca-certificates/steamcommunityCA.crt</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> update-ca-certificates</span><br></pre></td></tr></table></figure></li>\n<li>运行<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> +x caddy</span><br><span class=\"line\">./caddy run --config steamcommunity_302.caddy.json --adapter caddyfile</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"hiddify\"><a href=\"#hiddify\" class=\"headerlink\" title=\"hiddify\"></a>hiddify</h3><p>$Last Edited：2025.02.27&#x2F;09:48$</p>\n<hr>\n<p>是类似clash的代理工具，需要有机场   我 的<code>订阅链接</code>。<br>在<a href=\"https://github.com/hiddify/hiddify-app/releases\">Releases · hiddify&#x2F;hiddify-app</a>下载系统对应版本，目前只有x64的，因此对于ARM架构的处理器。这种方案不可行。</p>\n<p>Unbuntu系统安装方式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> 下载文件目录</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> dpkg -i Hiddify-Debian-x64.deb</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>桌面版打开程序，通过<code>订阅链接</code>下载配置文件，点击<code>连接</code>即可运行。图像界面较为简单，此处不再赘述。</li>\n</ul>\n","excerpt":"","more":"<blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu-22.04.3 server 树莓派4</p>\n</blockquote>\n<h3 id=\"clash\"><a href=\"#clash\" class=\"headerlink\" title=\"clash\"></a>clash</h3><h4 id=\"1-下载clash\"><a href=\"#1-下载clash\" class=\"headerlink\" title=\"1.下载clash\"></a>1.下载clash</h4><p>参考<a href=\"https://eaglebear2002.github.io/%E6%8A%80%E6%9C%AF%E7%A7%91%E6%99%AE/Ubuntu%2022.04%20%E5%AE%89%E8%A3%85%20Clash/\">Ubuntu 22.04 安装 Clash | EagleBear2002 的博客</a><br>Github 上的 clash 官方仓库已经删库跑路。可以在<a href=\"https://github.com/doreamon-design/clash/releases\">Releases · doreamon-design&#x2F;clash (github.com)</a>下载与自己系统架构符合的压缩包。<br>这里选择<code>clash_2.0.24_linux_arm64.tar.gz</code></p>\n<p>首先创建clash目录，这里我在root目录下创建的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">mkdir</span> /root/clash</span><br><span class=\"line\"><span class=\"built_in\">cd</span> clash</span><br></pre></td></tr></table></figure>\n<p>将压缩包上传到clash目录下，并解压：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf clash_2.0.24_linux_arm64.tar.gz</span><br></pre></td></tr></table></figure>\n<p>或者指定解压目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf clash_2.0.24_linux_arm64.tar.gz -C /root/clash</span><br></pre></td></tr></table></figure>\n<p>添加可执行权限：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> +x clash</span><br></pre></td></tr></table></figure>\n<p>在clash目录下，运行文件clash：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:~/clash# ./clash -d .</span><br><span class=\"line\">INFO[0000] Can<span class=\"string\">&#x27;t find config, create a initial config file </span></span><br><span class=\"line\"><span class=\"string\">INFO[0000] Can&#x27;</span>t find MMDB, start download              </span><br><span class=\"line\">INFO[0005] inbound mixed://127.0.0.1:7890 created successfully </span><br></pre></td></tr></table></figure>\n<p>此时目录下会多出几个文件，<code>Ctrl+C</code>先停止运行。</p>\n<h4 id=\"2-配置clash目录下的文件\"><a href=\"#2-配置clash目录下的文件\" class=\"headerlink\" title=\"2.配置clash目录下的文件\"></a>2.配置clash目录下的文件</h4><p>参考：<a href=\"https://uestc.feishu.cn/wiki/LOZVwBcNciHdJIkeLDlcwSWdnMf\">linux服务器使用clash代理 - 飞书云文档 (feishu.cn)</a><br><a href=\"https://www.codenong.com/cs110925767/\">linux环境使用clash实现网络代理访问外网 | 码农家园 (codenong.com)</a><br><a href=\"https://blog.iswiftai.com/posts/clash-linux/\">在 Linux 中使用 Clash | CodeSwift (iswiftai.com)</a></p>\n<ol>\n<li>config.yaml<br>参考<a href=\"https://www.programminghunter.com/article/89132472759/\">Ubuntu22.04桌面版配置Clash for Linux - 编程猎人 (programminghunter.com)</a><br>这是clash的配置文件，需要自己找机场，拿到<code>订阅链接</code>。我用的是[<a href=\"https://mojie.me/#/register?code=7KH7LcII]%E3%80%82\">https://mojie.me/#/register?code=7KH7LcII]。</a><br>注意订阅链接需要进行格式转换，转换工具的网址为<a href=\"https://suburl.v1.mk/\">在线订阅转换工具 (v1.mk)</a><br>![Q&amp;A 1.png](&#x2F;images&#x2F;Q&amp;A 1.png)<br>复制下方的短链接，下载配置文件config.yaml。如果直接使用上面的长链接，就会出现类似&lt;line 1: cannot unmarshal !!str <code>dm1lc3M...</code> into config.RawConfig&gt;的格式错误。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># wget -O config.yaml [订阅链接]</span></span><br><span class=\"line\">wget -O config.yaml https://v1.mk/iK0uLgW</span><br></pre></td></tr></table></figure>\n如果配置文件正常，运行clash之后应该是这样的结果：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:~/clash# ./clash -d .</span><br><span class=\"line\">INFO[0000] Start initial compatible provider 🇯🇵 日本节点    </span><br><span class=\"line\">...  </span><br><span class=\"line\">INFO[0000] Start initial compatible provider 📲 电报消息     </span><br><span class=\"line\">INFO[0000] RESTful API listening at: [::]:9090          </span><br><span class=\"line\">INFO[0000] inbound http://:7890 created successfully    </span><br><span class=\"line\">INFO[0000] inbound socks://:7891 created successfully </span><br></pre></td></tr></table></figure></li>\n<li>Country.mmdb<br>Country.mmdb为全球IP库，可以实现各个国家的IP信息解析和地理定位。这里我用第一次运行clash后自动下载的文件没有问题。<br>如果出现问题的话可以试试去前面几篇参考网址中找这个文件，然后替换掉。<br>提供一个下载的网址<a href=\"https://github.com/Dreamacro/maxmind-geoip/releases\">Releases · Dreamacro&#x2F;maxmind-geoip (github.com)</a></li>\n</ol>\n<h4 id=\"3-配置仪表盘\"><a href=\"#3-配置仪表盘\" class=\"headerlink\" title=\"3.配置仪表盘\"></a>3.配置仪表盘</h4><p>参考：<a href=\"https://parrotsec-cn.org/t/linux-clash-dashboard/5169\">linux下部署Clash+dashboard - 系统配置和定制 - ParrotSec中文社区 (parrotsec-cn.org)</a></p>\n<p>clash for linux是不带仪表盘界面的，可以用在线的界面<a href=\"https://clash.razord.top/#/proxies\">Clash (razord.top)</a>。<br>也能自己下载并且配置。这里给一个下载地址：<a href=\"https://github.com/haishanh/yacd/releases/download/v0.3.7/yacd.tar.xz\">yacd.tar.xz</a>。<br>可以直接到项目里下载。yacd dashboard的GitHub项目<a href=\"https://github.com/haishanh/yacd\">haishanh&#x2F;yacd: Yet Another Clash Dashboard (github.com)</a></p>\n<p>下载完成后上传到clash目录下，解压，将文件目录命名为<code>dashboard</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf yacd.tar.xz</span><br><span class=\"line\"><span class=\"built_in\">mv</span> public dashboard</span><br></pre></td></tr></table></figure>\n\n<p>打开配置文件<code>config.yaml</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim config.yaml</span><br></pre></td></tr></table></figure>\n<p>修改配置文件，添加<code>external-ui</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port: 7890 </span><br><span class=\"line\">socks-port: 7891 </span><br><span class=\"line\">allow-lan: <span class=\"literal\">true</span> </span><br><span class=\"line\">mode: Rule </span><br><span class=\"line\">log-level: info  `secert:` 123456 <span class=\"comment\"># 增加这一行, 如果你希望你的clash web要密码访问可以在这块配置密码, 如果不需要直接注释掉即可</span></span><br><span class=\"line\">external-ui: dashboard <span class=\"comment\"># 增加这一行 后面写入相对路径或绝对路径</span></span><br><span class=\"line\">external-controller: 0.0.0.0:9090</span><br></pre></td></tr></table></figure>\n<p>保存退出后运行clash，结果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:~/clash# ./clash -d .</span><br><span class=\"line\">INFO[0000] Start initial compatible provider 🇭🇰 香港节点    </span><br><span class=\"line\">... </span><br><span class=\"line\">INFO[0000] Start initial compatible provider 🌏 国内媒体     </span><br><span class=\"line\">INFO[0000] RESTful API listening at: [::]:9090          </span><br><span class=\"line\">INFO[0000] inbound http://:7890 created successfully    </span><br><span class=\"line\">INFO[0000] inbound socks://:7891 created successfully</span><br></pre></td></tr></table></figure>\n<p>界面运行在9090端口。注意运行clash要占用当前bash，建议新开一个bash。</p>\n<h4 id=\"4-设置端口转发在本地打开仪表盘\"><a href=\"#4-设置端口转发在本地打开仪表盘\" class=\"headerlink\" title=\"4.设置端口转发在本地打开仪表盘\"></a>4.设置端口转发在本地打开仪表盘</h4><p>参考：<a href=\"https://www.cnblogs.com/DragonStart/p/7791311.html#:~:text=%E8%AE%BE%E5%AE%9A%20%E9%A6%96%E5%85%88%E5%8F%8C%E6%96%B9%E7%9A%84%2Fetc%2Fssh%2Fsshd_config%E8%AE%BE%E5%AE%9A%E4%BB%A5%E4%B8%8B%E5%9B%9B%E9%A1%B9%3A%20AllowAgentForwarding%20yes%20AllowTcpForwarding%20yes%20GatewayPorts%20yes,ssh%20-R%202000%20%3A%E7%9B%AE%E6%A0%87%E4%B8%BB%E6%9C%BA%3A%20142%20root%40%20%E6%BA%90%E4%B8%BB%E6%9C%BA%20%E8%BF%99%E6%A0%B7%E5%8F%91%E9%80%81%E5%88%B0%E6%BA%90%E4%B8%BB%E6%9C%BA%3A2000%E7%9A%84TCP%E9%93%BE%E6%8E%A5%2C%E5%B0%B1%E4%BC%9A%E8%BD%AC%E5%8F%91%E5%88%B0%E7%9B%AE%E6%A0%87%3A142%2C%E4%BC%9A%E6%89%93%E5%BC%80%E4%B8%80%E4%B8%AAbash%2C%E5%A6%82%E6%9E%9C%E5%85%B3%E9%97%AD%2C%E5%88%99%E4%B8%8D%E5%86%8D%E8%BD%AC%E5%8F%91.\">通过 SSH 转发TCP连接数据 - asml - 博客园 (cnblogs.com)</a><br>首先打开SSH配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nano /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>\n<p>确保以下设置开启（建议相关修改直接添加在文件开头，方便查看）</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AllowAgentForwarding yes</span><br><span class=\"line\">AllowTcpForwarding yes</span><br><span class=\"line\">GatewayPorts yes</span><br></pre></td></tr></table></figure>\n<p>保存退出。</p>\n<p>本地主机与树莓派处于两个不同的局域网之中，因此需要先将云服务器的9090端口映射到本地的9090端口。注意在云服务器安全组配置中开放9090端口，只开放入方向就可以。</p>\n<p>在树莓派上运行指令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -N -R 9090:localhost:9090 root@59.110.168.138</span><br><span class=\"line\">```  </span><br><span class=\"line\">指令用于建立一个SSH隧道（tunnel），注意运行时要占用当前bash，建议新开一个bash。具体来说，该指令的含义如下：</span><br><span class=\"line\"></span><br><span class=\"line\">- `ssh`: SSH命令的关键字。</span><br><span class=\"line\">- `-N`: 表示不执行任何远程命令。在这个上下文中，它告诉SSH客户端仅仅建立连接，而不执行任何远程命令。如果没有这句话，会在输入密码后登录远程主机。</span><br><span class=\"line\">- `-R 9090:localhost:9090`: 这是SSH端口转发的部分。它将远程主机（`59.110.168.138`）的端口 `9090` 映射到本地主机（localhost）的端口 `9090`。这意味着，如果你连接到远程主机的 `9090` 端口，实际上是连接到本地主机的 `9090` 端口。这通常用于在两个主机之间建立一个安全的通信通道。</span><br><span class=\"line\">- `root@59.110.168.138`: 这是SSH连接的目标地址，其中 `root` 是用户名，`59.110.168.138` 是远程主机的IP地址。</span><br><span class=\"line\"></span><br><span class=\"line\">此时，在云服务器运行指令`lsof`可以看到端口9090占用情况：</span><br><span class=\"line\">```bash</span><br><span class=\"line\">root@iZ2zeamp64f3i8d4gvpba8Z:~# lsof -i:9090</span><br><span class=\"line\">COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">sshd    34205 root    5u  IPv4 616381      0t0  TCP localhost:9090 (LISTEN)</span><br></pre></td></tr></table></figure>\n\n<p>本地主机按Win+R，输入cmd，打开命令提示符，运行指令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -N -L 9090:localhost:9090 root@59.110.168.138</span><br></pre></td></tr></table></figure>\n\n<p>此时在命令提示符中运行指令<code>netstat</code>可以看到端口9090占用情况：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Administrator&gt;netstat -ano | find &quot;9090&quot;</span><br><span class=\"line\">  TCP    127.0.0.1:9090         0.0.0.0:0              LISTENING       28772</span><br><span class=\"line\">  TCP    [::1]:9090             [::]:0                 LISTENING       28772</span><br></pre></td></tr></table></figure>\n\n<p>端口转发设置完成后，运行clash（确保仪表盘配置完成）在浏览器中输入<a href=\"http://localhost:9090/ui/\">localhost:9090&#x2F;ui</a>即可打开仪表盘界面，对clash节点等进行配置。</p>\n<h4 id=\"5-测试clash是否能使用\"><a href=\"#5-测试clash是否能使用\" class=\"headerlink\" title=\"5.测试clash是否能使用\"></a>5.测试clash是否能使用</h4><p>从前面clash运行的结果可以知道，HTTP Proxy Port是7890端口。<br>这段指令会下载rapicam-apps，可以换成自己要用到的指令测试。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:~# git <span class=\"built_in\">clone</span> -c http.proxy=http://127.0.0.1:7890 https://github.com/raspberrypi/rpicam-apps.git</span><br><span class=\"line\">Cloning into <span class=\"string\">&#x27;rpicam-apps&#x27;</span>...</span><br><span class=\"line\">remote: Enumerating objects: 2643, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (1356/1356), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (340/340), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Total 2643 (delta 1088), reused 1033 (delta 1016), pack-reused 1287</span><br><span class=\"line\">Receiving objects: 100% (2643/2643), 742.82 KiB | 1.10 MiB/s, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Resolving deltas: 100% (1919/1919), <span class=\"keyword\">done</span>.</span><br></pre></td></tr></table></figure>\n<h3 id=\"steamcommunity302\"><a href=\"#steamcommunity302\" class=\"headerlink\" title=\"steamcommunity302\"></a>steamcommunity302</h3><p>$Last Edited：2025.02.20&#x2F;10:33$</p>\n<hr>\n<p>针对github的。<br>来源于：<br><a href=\"https://www.dogfight360.com/blog/2319/\">Linux&#x2F;Macos环境下使用 steamcommunity 302 教程 – Dogfight360</a><br>中间提到了hosts写入的问题，但是我没明白怎么操作，所以就没操作，不过最后也能连上github。</p>\n<ol>\n<li>下载<code>steamcommunity302</code><br> 下载地址：<a href=\"https://www.dogfight360.com/blog/686/\">steamcommunity 302 Ver.12.1.46 – Dogfight360</a><br> 使用方法：<a href=\"https://www.dogfight360.com/blog/knowledge-base/steamcommunity_302_manual/\">steamcommunity302详细功能介绍</a><br> 下载完成后解压运行，首先在windows系统上配置完成。</li>\n<li>下载<code>caddy</code><br> 下载地址： <a href=\"https://github.com/caddyserver/caddy/releases/tag/v2.6.4\">https://github.com/caddyserver/caddy/releases/tag/v2.6.4</a><br> &#x3D;&#x3D;注意对应系统版本&#x3D;&#x3D;，tar.gz&#x2F;zip的压缩包格式的。<br> 下载完成后解压。</li>\n<li>编辑 <code>steamcommunity_302.caddy.json</code><br> 将端口11417（这个是随机的）批量替换为443。类似：<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://steamcommunity.com:17417 https://www.steamcommunity.com:17417 &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    tls steamcommunity.crt steamcommunity.key</span><br><span class=\"line\"></span><br><span class=\"line\">    @steamcommunityrp &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n<li>将302目录下的文件与caddy一同拷贝到Linux&#x2F;Macos (一共是6个文件)<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">steamcommunityCA.pem  </span><br><span class=\"line\">steamcommunityCA.key  </span><br><span class=\"line\">steamcommunity.key  </span><br><span class=\"line\">steamcommunity.crt  </span><br><span class=\"line\">steamcommunity_302.caddy.json  </span><br><span class=\"line\">caddy</span><br></pre></td></tr></table></figure></li>\n<li>导入根证书<code>steamcommunityCA.pem</code><br> <strong>Ubuntu</strong>:  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">cp</span> steamcommunityCA.pem /usr/local/share/ca-certificates/steamcommunityCA.crt</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> update-ca-certificates</span><br></pre></td></tr></table></figure></li>\n<li>运行<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> +x caddy</span><br><span class=\"line\">./caddy run --config steamcommunity_302.caddy.json --adapter caddyfile</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"hiddify\"><a href=\"#hiddify\" class=\"headerlink\" title=\"hiddify\"></a>hiddify</h3><p>$Last Edited：2025.02.27&#x2F;09:48$</p>\n<hr>\n<p>是类似clash的代理工具，需要有机场   我 的<code>订阅链接</code>。<br>在<a href=\"https://github.com/hiddify/hiddify-app/releases\">Releases · hiddify&#x2F;hiddify-app</a>下载系统对应版本，目前只有x64的，因此对于ARM架构的处理器。这种方案不可行。</p>\n<p>Unbuntu系统安装方式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> 下载文件目录</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> dpkg -i Hiddify-Debian-x64.deb</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>桌面版打开程序，通过<code>订阅链接</code>下载配置文件，点击<code>连接</code>即可运行。图像界面较为简单，此处不再赘述。</li>\n</ul>\n"},{"title":"Jupyter-Q&A","date":"2025-06-01T02:34:58.000Z","updated":"2025-04-25T09:30:42.000Z","_content":"\n## 远程使用\n\n> [!NOTE] 操作环境\n> Ubuntu 20.04 LTS 服务器\n### 方法一失败\n来源于：[【科研利器】在服务器上也能使用jupyter？学它！-腾讯云开发者社区-腾讯云 (tencent.com)](https://cloud.tencent.com/developer/article/2135573)\n```bash\njupyter notebook --no-browser\n```\n\n本地主机按Win+R，输入cmd，打开命令提示符，在其中输入：\n```bash\nssh -N -L localhost:8888:localhost:8888 lijc@43.138.43.34\n```\n\n*失败！分析有两个问题：一是配置文件的问题，比如没有设置所有ip可登录；二是成教服务器是经由腾讯云服务器ssh登录的，因此这条端口转发指令只是在本地计算机上打开了腾讯云服务器上的8888端口*\n### 方法二失败\n来源于：[【精选】科研第二步：远程在服务器上跑程序jupyter使用_服务器使用jupyter-CSDN博客](https://blog.csdn.net/fs1341825137/article/details/109683965)\n生成配置文件，并给jupyter账户设置一个密码：\n```bash\njupyter notebook --generate-config\n```\n\n设置密码：\n```bash\njupyter notebook password\n```\n\n打开位于.jupyter文件夹下的配置文件：\n```bash\nvim jupyter_notebook_config.py\n```\n\n设置远程IP可访问：\n``c.NotebookApp.ip = '*'    `允许所有ip访问，很重要`\n``c.NotebookApp.open_browser = False    `不打开浏览器`\n``c.NotebookApp.port = 8888             `端口为8888，可以自己设置`\n在本地浏览器端输入``43.138.43.34:8888``即可进入jupyter notebook\n*失败！应该是没有成教服务器到腾讯云服务器的端口转发，而且因为云服务器设置的原因，公网ip不一定能直接登录*\n### 方法三成功\n使用VScode，下载Romote SSH插件，利用端口转发功能，可以在本地相应端口查看jupyter notebook文件。","source":"_posts/2025-06-01-Jupyter-QA.md","raw":"---\ntitle: Jupyter-Q&A\ndate: 2025-06-01 10:34:58\nupdated: 2025-04-25 17:30:42\ncategories:\n  - [服务器&嵌入式平台操作, Q&A问题及解决汇总]\ntags:\npermalink: jupyter-q&a/\n---\n\n## 远程使用\n\n> [!NOTE] 操作环境\n> Ubuntu 20.04 LTS 服务器\n### 方法一失败\n来源于：[【科研利器】在服务器上也能使用jupyter？学它！-腾讯云开发者社区-腾讯云 (tencent.com)](https://cloud.tencent.com/developer/article/2135573)\n```bash\njupyter notebook --no-browser\n```\n\n本地主机按Win+R，输入cmd，打开命令提示符，在其中输入：\n```bash\nssh -N -L localhost:8888:localhost:8888 lijc@43.138.43.34\n```\n\n*失败！分析有两个问题：一是配置文件的问题，比如没有设置所有ip可登录；二是成教服务器是经由腾讯云服务器ssh登录的，因此这条端口转发指令只是在本地计算机上打开了腾讯云服务器上的8888端口*\n### 方法二失败\n来源于：[【精选】科研第二步：远程在服务器上跑程序jupyter使用_服务器使用jupyter-CSDN博客](https://blog.csdn.net/fs1341825137/article/details/109683965)\n生成配置文件，并给jupyter账户设置一个密码：\n```bash\njupyter notebook --generate-config\n```\n\n设置密码：\n```bash\njupyter notebook password\n```\n\n打开位于.jupyter文件夹下的配置文件：\n```bash\nvim jupyter_notebook_config.py\n```\n\n设置远程IP可访问：\n``c.NotebookApp.ip = '*'    `允许所有ip访问，很重要`\n``c.NotebookApp.open_browser = False    `不打开浏览器`\n``c.NotebookApp.port = 8888             `端口为8888，可以自己设置`\n在本地浏览器端输入``43.138.43.34:8888``即可进入jupyter notebook\n*失败！应该是没有成教服务器到腾讯云服务器的端口转发，而且因为云服务器设置的原因，公网ip不一定能直接登录*\n### 方法三成功\n使用VScode，下载Romote SSH插件，利用端口转发功能，可以在本地相应端口查看jupyter notebook文件。","slug":"2025-06-01-Jupyter-QA","published":1,"__permalink":"jupyter-q&a/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0ms0006zovd1nv2dk98","content":"<h2 id=\"远程使用\"><a href=\"#远程使用\" class=\"headerlink\" title=\"远程使用\"></a>远程使用</h2><blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu 20.04 LTS 服务器</p>\n</blockquote>\n<h3 id=\"方法一失败\"><a href=\"#方法一失败\" class=\"headerlink\" title=\"方法一失败\"></a>方法一失败</h3><p>来源于：<a href=\"https://cloud.tencent.com/developer/article/2135573\">【科研利器】在服务器上也能使用jupyter？学它！-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jupyter notebook --no-browser</span><br></pre></td></tr></table></figure>\n\n<p>本地主机按Win+R，输入cmd，打开命令提示符，在其中输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -N -L localhost:8888:localhost:8888 lijc@43.138.43.34</span><br></pre></td></tr></table></figure>\n\n<p><em>失败！分析有两个问题：一是配置文件的问题，比如没有设置所有ip可登录；二是成教服务器是经由腾讯云服务器ssh登录的，因此这条端口转发指令只是在本地计算机上打开了腾讯云服务器上的8888端口</em></p>\n<h3 id=\"方法二失败\"><a href=\"#方法二失败\" class=\"headerlink\" title=\"方法二失败\"></a>方法二失败</h3><p>来源于：<a href=\"https://blog.csdn.net/fs1341825137/article/details/109683965\">【精选】科研第二步：远程在服务器上跑程序jupyter使用_服务器使用jupyter-CSDN博客</a><br>生成配置文件，并给jupyter账户设置一个密码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure>\n\n<p>设置密码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jupyter notebook password</span><br></pre></td></tr></table></figure>\n\n<p>打开位于.jupyter文件夹下的配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim jupyter_notebook_config.py</span><br></pre></td></tr></table></figure>\n\n<p>设置远程IP可访问：<br><code>c.NotebookApp.ip = &#39;*&#39;    `允许所有ip访问，很重要` </code>c.NotebookApp.open_browser &#x3D; False    <code>不打开浏览器</code><br><code>c.NotebookApp.port = 8888             `端口为8888，可以自己设置` 在本地浏览器端输入</code>43.138.43.34:8888&#96;&#96;即可进入jupyter notebook<br><em>失败！应该是没有成教服务器到腾讯云服务器的端口转发，而且因为云服务器设置的原因，公网ip不一定能直接登录</em></p>\n<h3 id=\"方法三成功\"><a href=\"#方法三成功\" class=\"headerlink\" title=\"方法三成功\"></a>方法三成功</h3><p>使用VScode，下载Romote SSH插件，利用端口转发功能，可以在本地相应端口查看jupyter notebook文件。</p>\n","excerpt":"","more":"<h2 id=\"远程使用\"><a href=\"#远程使用\" class=\"headerlink\" title=\"远程使用\"></a>远程使用</h2><blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu 20.04 LTS 服务器</p>\n</blockquote>\n<h3 id=\"方法一失败\"><a href=\"#方法一失败\" class=\"headerlink\" title=\"方法一失败\"></a>方法一失败</h3><p>来源于：<a href=\"https://cloud.tencent.com/developer/article/2135573\">【科研利器】在服务器上也能使用jupyter？学它！-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jupyter notebook --no-browser</span><br></pre></td></tr></table></figure>\n\n<p>本地主机按Win+R，输入cmd，打开命令提示符，在其中输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -N -L localhost:8888:localhost:8888 lijc@43.138.43.34</span><br></pre></td></tr></table></figure>\n\n<p><em>失败！分析有两个问题：一是配置文件的问题，比如没有设置所有ip可登录；二是成教服务器是经由腾讯云服务器ssh登录的，因此这条端口转发指令只是在本地计算机上打开了腾讯云服务器上的8888端口</em></p>\n<h3 id=\"方法二失败\"><a href=\"#方法二失败\" class=\"headerlink\" title=\"方法二失败\"></a>方法二失败</h3><p>来源于：<a href=\"https://blog.csdn.net/fs1341825137/article/details/109683965\">【精选】科研第二步：远程在服务器上跑程序jupyter使用_服务器使用jupyter-CSDN博客</a><br>生成配置文件，并给jupyter账户设置一个密码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure>\n\n<p>设置密码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jupyter notebook password</span><br></pre></td></tr></table></figure>\n\n<p>打开位于.jupyter文件夹下的配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim jupyter_notebook_config.py</span><br></pre></td></tr></table></figure>\n\n<p>设置远程IP可访问：<br><code>c.NotebookApp.ip = &#39;*&#39;    `允许所有ip访问，很重要` </code>c.NotebookApp.open_browser &#x3D; False    <code>不打开浏览器</code><br><code>c.NotebookApp.port = 8888             `端口为8888，可以自己设置` 在本地浏览器端输入</code>43.138.43.34:8888&#96;&#96;即可进入jupyter notebook<br><em>失败！应该是没有成教服务器到腾讯云服务器的端口转发，而且因为云服务器设置的原因，公网ip不一定能直接登录</em></p>\n<h3 id=\"方法三成功\"><a href=\"#方法三成功\" class=\"headerlink\" title=\"方法三成功\"></a>方法三成功</h3><p>使用VScode，下载Romote SSH插件，利用端口转发功能，可以在本地相应端口查看jupyter notebook文件。</p>\n"},{"title":"OpenCV-Q&A","date":"2025-06-01T02:34:58.000Z","updated":"2025-04-25T09:37:37.000Z","_content":"\n## import cv2——ImportError: libGL.so.1: cannot open shared object file: No such file or directory\n\n$Last Edited：2025.04.24/15:45$\n___\n\n安装这个库:\n```bash\npip install opencv-python-headless\n```\n\n`opencv-python-headless` 不支持图形界面相关的功能（如 `cv2.imshow`）。如果代码中使用了这些功能，即使安装了 `opencv-python-headless`，也会导致错误。","source":"_posts/2025-06-01-OpenCV-QA.md","raw":"---\ntitle: OpenCV-Q&A\ndate: 2025-06-01 10:34:58\nupdated: 2025-04-25 17:37:37\ncategories:\n  - [服务器&嵌入式平台操作, Q&A问题及解决汇总]\ntags:\npermalink: opencv-q&a/\n---\n\n## import cv2——ImportError: libGL.so.1: cannot open shared object file: No such file or directory\n\n$Last Edited：2025.04.24/15:45$\n___\n\n安装这个库:\n```bash\npip install opencv-python-headless\n```\n\n`opencv-python-headless` 不支持图形界面相关的功能（如 `cv2.imshow`）。如果代码中使用了这些功能，即使安装了 `opencv-python-headless`，也会导致错误。","slug":"2025-06-01-OpenCV-QA","published":1,"__permalink":"opencv-q&a/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0mt0008zovd64sogaid","content":"<h2 id=\"import-cv2——ImportError-libGL-so-1-cannot-open-shared-object-file-No-such-file-or-directory\"><a href=\"#import-cv2——ImportError-libGL-so-1-cannot-open-shared-object-file-No-such-file-or-directory\" class=\"headerlink\" title=\"import cv2——ImportError: libGL.so.1: cannot open shared object file: No such file or directory\"></a>import cv2——ImportError: libGL.so.1: cannot open shared object file: No such file or directory</h2><p>$Last Edited：2025.04.24&#x2F;15:45$</p>\n<hr>\n<p>安装这个库:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install opencv-python-headless</span><br></pre></td></tr></table></figure>\n\n<p><code>opencv-python-headless</code> 不支持图形界面相关的功能（如 <code>cv2.imshow</code>）。如果代码中使用了这些功能，即使安装了 <code>opencv-python-headless</code>，也会导致错误。</p>\n","excerpt":"","more":"<h2 id=\"import-cv2——ImportError-libGL-so-1-cannot-open-shared-object-file-No-such-file-or-directory\"><a href=\"#import-cv2——ImportError-libGL-so-1-cannot-open-shared-object-file-No-such-file-or-directory\" class=\"headerlink\" title=\"import cv2——ImportError: libGL.so.1: cannot open shared object file: No such file or directory\"></a>import cv2——ImportError: libGL.so.1: cannot open shared object file: No such file or directory</h2><p>$Last Edited：2025.04.24&#x2F;15:45$</p>\n<hr>\n<p>安装这个库:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install opencv-python-headless</span><br></pre></td></tr></table></figure>\n\n<p><code>opencv-python-headless</code> 不支持图形界面相关的功能（如 <code>cv2.imshow</code>）。如果代码中使用了这些功能，即使安装了 <code>opencv-python-headless</code>，也会导致错误。</p>\n"},{"title":"Python-Q&A","date":"2025-06-01T02:34:58.000Z","updated":"2025-07-28T05:49:38.000Z","_content":"\n## 缺少zlib模块 # No module named 'zlib'\nzlib是一套通用的解压缩开源库\n```bash\nsudo apt-get install zlib1g-dev\n```\n## 缺少_ctypes模块 ModuleNotFoundError: No module named '_ ctypes'\nctypes 是 Python 的外部函数库。它提供了与 C 兼容的数据类型，并允许调用 DLL 或共享库中的函数。\n```bash\napt-get install libffi-dev\n```\n从./configure开始重新安装Python\n（没试过不重装，不知道能不能解决问题）\n\n## 安装新版本python后，找不到之前的module或者apt安装的module\n\n$Last Edited：2025.07.14/10:49$\n___\n\n这个问题是我在用apt安装pipx时发现的：\n```bash\n/usudo apt install pipx\n```\n\n可以用这个指令检查一下目前的sys.path\n```bash\n/usr/bin/python3 -c \"import sys; print(sys.path)\"\n```\n输出是：\n```text\n['', \n '/usr/local/lib/python310.zip', \n '/usr/local/lib/python3.10', \n '/usr/local/lib/python3.10/lib-dynload', \n '/home/orangepi/.local/lib/python3.10/site-packages', \n '/usr/local/lib/python3.10/site-packages']\n```\n\n再检查一下pipx的实际安装位置：\n```bash\nsudo find / -name pipx -type d 2>/dev/null\n```\n发现在：\n```text\n/usr/lib/python3/dist-packages/pipx\n```\n\n可以看出系统 Python 的 `dist-packages` 路径 (`/usr/lib/python3/dist-packages`) **没有**出现在 `sys.path` 中\n\n因为系统 Python 没有自动包含 Debian 的标准包路径 `/usr/lib/python3/dist-packages`，需要手动添加它：\n```bash\n# 1. 创建正确的 .pth 文件\necho \"/usr/lib/python3/dist-packages\" | sudo tee /usr/local/lib/python3.10/site-packages/dist-packages.pth\n\n# 2. 验证是否生效\n/usr/bin/python3 -c \"import sys; print('\\n'.join(sys.path))\" | grep dist-packages\n```\n关于 `.pth` 文件：\n`.pth` 文件是 Python 的路径配置文件：\n1. **作用**：在 Python 启动时自动将指定路径添加到 `sys.path`\n2. **位置**：必须放在 Python 搜索的特定目录中\n3. **格式**：每行一个路径\n4. **命名**：可以是任何名称，但必须以 `.pth` 结尾\n\n总之就是在site-packages目录下创建.pth文件，下面这个操作也可以：\n```bash\n# 1. 找到 site-packages 目录\nSITE_DIR=$(/usr/bin/python3 -c \"import site; print(site.getsitepackages()[0])\")\n\n# 2. 创建 .pth 文件\necho \"/usr/lib/python3/dist-packages\" | sudo tee \"$SITE_DIR/dist-packages.pth\"\n\n# 3. 验证\n/usr/bin/python3 -c \"import sys; print('/usr/lib/python3/dist-packages' in sys.path)\"\n```\n\n## 从源码编译安装python并修改软连接后，py3clean 和 py3compile 缺失，可能导致apt update失败\n最简单的办法就是不要改pyhon3的软连接，只改python和pip的就没问题。\n或者用`update-alternatives`管理不同版本的python，需要的时候进行切换。[Python&pip#6.切换python版本](Python&pip#6.切换python版本)\n\n下面这个是Deepseek给出的方法，目前还没试过。\n### `apt_pkg` 模块缺失修复\n\n#### 1. 手动修复 `apt_pkg` 符号链接\n\n找到系统原有 `apt_pkg.so` 并链接到新 Python 版本目录 ：\n```bash\n# 查找现有 apt_pkg 模块\ncd /usr/lib/python3/dist-packages\nls | grep apt_pkg          # 输出如 apt_pkg.cpython-38-x86_64-linux-gnu.so\n\n# 创建符号链接（替换 310 为你的 Python 版本号）\nsudo ln -s \\\n  apt_pkg.cpython-38-x86_64-linux-gnu.so \\\n  apt_pkg.cpython-310-x86_64-linux-gnu.so\n```\n#### 2. 重建 Python 字节码缓存\n\n执行编译命令，确保模块可被识别 ：\n```bash\nsudo python3.10 -m compileall /usr/lib/python3/dist-packages/apt_pkg*\n\n```\n\n> [!important] 关键注意事项\n> \n> - **系统 Python 不可替换**  \n>     Ubuntu 的核心组件（如 APT、桌面环境）依赖默认 Python 版本。直接替换 `/usr/bin/python3` 将导致崩溃。\n>     \n> - **编译选项的重要性**  \n>     源码编译时需包含 `--enable-shared` 并指定 `prefix=/usr/local`，避免覆盖系统文件：\n>     \n>     bash\n>     \n>     复制\n>     \n>     ```bash\n>     ./configure --enable-optimizations --enable-shared --prefix=/usr/local\n>     make -j$(nproc)\n>     sudo make altinstall      # 关键！使用 altinstall 而非 install\n>     ```\n>     \n> - **版本兼容性问题**  \n>     `python3-apt` 仅支持官方仓库对应的 Python 版本。强行搭配 3.10 需自行编译适配，风险极高。\n>\n\n### 让自建 Python 3.10 也能使用系统 `py3clean` / `py3compile`\n\n> [!tip] 一句话总结  \n> 通过「兼容性包装器」或「直接修改 shebang」两条路线，让系统工具继续用默认 Python，而自建 3.10 环境无缝调用。\n\n---\n\n#### 方案 A：创建兼容性包装器（推荐，不改动系统文件）\n\n##### 1. 创建 `py3clean` 包装脚本\n```bash\nsudo nano /usr/local/bin/py3clean\n```\n\n内容：\n```bash `!/bin/bash`\n# Py3clean wrapper for custom Python 3.10\n# Delegate to system py3clean with correct Python version\n\n/usr/bin/python3.8 /usr/bin/py3clean \"$@\"   # 把 3.8 换成系统默认版本\n```\n\n##### 2. 创建 `py3compile` 包装脚本\n```bash\nsudo nano /usr/local/bin/py3compile\n```\n\n内容：\n```bash `!/bin/bash`\n# Py3compile wrapper for custom Python 3.10\n# Delegate to system py3compile with correct Python version\n\n/usr/bin/python3.8 /usr/bin/py3compile \"$@\"  # 把 3.8 换成系统默认版本\n```\n\n##### 3. 赋予执行权限\n```bash\nsudo chmod +x /usr/local/bin/py3clean /usr/local/bin/py3compile\n```\n\n---\n\n#### 方案 B：直接修改工具 shebang（快速但会动系统文件）\n\n##### 1. 编辑 `py3clean`\n```bash\nsudo nano /usr/bin/py3clean\n```\n\n把第一行改成：\n```bash `!/usr/bin/python3.8`   # 保持使用系统 Python\n```\n\n##### 2. 编辑 `py3compile`\n```bash\nsudo nano /usr/bin/py3compile\n```\n\n同样修改第一行为：\n```bash `!/usr/bin/python3.8`   # 保持使用系统 Python\n```\n\n---\n\n> [!question] 为什么这么做有效？\n> \n> - **隔离执行环境**  \n>     包装器或 shebang 强制系统工具继续用 **系统自带 Python**，而不是 3.10。\n>     \n> - **保持兼容性**  \n>     系统工具依赖的库版本与自建 3.10 无关，避免兼容性坑。\n>     \n> - **无缝集成**  \n>     `apt`、`dpkg` 等系统级脚本调用 `py3clean/py3compile` 时不受影响，自建 3.10 也能正常用。\n>     \n\n---\n\n#### [#验证解决方案](#验证解决方案)\n\nbash\n\n复制\n\n```bash\n# 测试包装器\n/usr/local/bin/py3clean --version\n/usr/local/bin/py3compile --help\n\n# 检查系统 apt 功能\nsudo apt update\nsudo apt install --reinstall python3-apt\n```\n\n一切正常即表明方案成功。","source":"_posts/2025-06-01-Python-QA.md","raw":"---\ntitle: Python-Q&A\ndate: 2025-06-01 10:34:58\nupdated: 2025-07-28 13:49:38\ncategories:\n  - [服务器&嵌入式平台操作, Q&A问题及解决汇总]\ntags:\npermalink: python-q&a/\n---\n\n## 缺少zlib模块 # No module named 'zlib'\nzlib是一套通用的解压缩开源库\n```bash\nsudo apt-get install zlib1g-dev\n```\n## 缺少_ctypes模块 ModuleNotFoundError: No module named '_ ctypes'\nctypes 是 Python 的外部函数库。它提供了与 C 兼容的数据类型，并允许调用 DLL 或共享库中的函数。\n```bash\napt-get install libffi-dev\n```\n从./configure开始重新安装Python\n（没试过不重装，不知道能不能解决问题）\n\n## 安装新版本python后，找不到之前的module或者apt安装的module\n\n$Last Edited：2025.07.14/10:49$\n___\n\n这个问题是我在用apt安装pipx时发现的：\n```bash\n/usudo apt install pipx\n```\n\n可以用这个指令检查一下目前的sys.path\n```bash\n/usr/bin/python3 -c \"import sys; print(sys.path)\"\n```\n输出是：\n```text\n['', \n '/usr/local/lib/python310.zip', \n '/usr/local/lib/python3.10', \n '/usr/local/lib/python3.10/lib-dynload', \n '/home/orangepi/.local/lib/python3.10/site-packages', \n '/usr/local/lib/python3.10/site-packages']\n```\n\n再检查一下pipx的实际安装位置：\n```bash\nsudo find / -name pipx -type d 2>/dev/null\n```\n发现在：\n```text\n/usr/lib/python3/dist-packages/pipx\n```\n\n可以看出系统 Python 的 `dist-packages` 路径 (`/usr/lib/python3/dist-packages`) **没有**出现在 `sys.path` 中\n\n因为系统 Python 没有自动包含 Debian 的标准包路径 `/usr/lib/python3/dist-packages`，需要手动添加它：\n```bash\n# 1. 创建正确的 .pth 文件\necho \"/usr/lib/python3/dist-packages\" | sudo tee /usr/local/lib/python3.10/site-packages/dist-packages.pth\n\n# 2. 验证是否生效\n/usr/bin/python3 -c \"import sys; print('\\n'.join(sys.path))\" | grep dist-packages\n```\n关于 `.pth` 文件：\n`.pth` 文件是 Python 的路径配置文件：\n1. **作用**：在 Python 启动时自动将指定路径添加到 `sys.path`\n2. **位置**：必须放在 Python 搜索的特定目录中\n3. **格式**：每行一个路径\n4. **命名**：可以是任何名称，但必须以 `.pth` 结尾\n\n总之就是在site-packages目录下创建.pth文件，下面这个操作也可以：\n```bash\n# 1. 找到 site-packages 目录\nSITE_DIR=$(/usr/bin/python3 -c \"import site; print(site.getsitepackages()[0])\")\n\n# 2. 创建 .pth 文件\necho \"/usr/lib/python3/dist-packages\" | sudo tee \"$SITE_DIR/dist-packages.pth\"\n\n# 3. 验证\n/usr/bin/python3 -c \"import sys; print('/usr/lib/python3/dist-packages' in sys.path)\"\n```\n\n## 从源码编译安装python并修改软连接后，py3clean 和 py3compile 缺失，可能导致apt update失败\n最简单的办法就是不要改pyhon3的软连接，只改python和pip的就没问题。\n或者用`update-alternatives`管理不同版本的python，需要的时候进行切换。[Python&pip#6.切换python版本](Python&pip#6.切换python版本)\n\n下面这个是Deepseek给出的方法，目前还没试过。\n### `apt_pkg` 模块缺失修复\n\n#### 1. 手动修复 `apt_pkg` 符号链接\n\n找到系统原有 `apt_pkg.so` 并链接到新 Python 版本目录 ：\n```bash\n# 查找现有 apt_pkg 模块\ncd /usr/lib/python3/dist-packages\nls | grep apt_pkg          # 输出如 apt_pkg.cpython-38-x86_64-linux-gnu.so\n\n# 创建符号链接（替换 310 为你的 Python 版本号）\nsudo ln -s \\\n  apt_pkg.cpython-38-x86_64-linux-gnu.so \\\n  apt_pkg.cpython-310-x86_64-linux-gnu.so\n```\n#### 2. 重建 Python 字节码缓存\n\n执行编译命令，确保模块可被识别 ：\n```bash\nsudo python3.10 -m compileall /usr/lib/python3/dist-packages/apt_pkg*\n\n```\n\n> [!important] 关键注意事项\n> \n> - **系统 Python 不可替换**  \n>     Ubuntu 的核心组件（如 APT、桌面环境）依赖默认 Python 版本。直接替换 `/usr/bin/python3` 将导致崩溃。\n>     \n> - **编译选项的重要性**  \n>     源码编译时需包含 `--enable-shared` 并指定 `prefix=/usr/local`，避免覆盖系统文件：\n>     \n>     bash\n>     \n>     复制\n>     \n>     ```bash\n>     ./configure --enable-optimizations --enable-shared --prefix=/usr/local\n>     make -j$(nproc)\n>     sudo make altinstall      # 关键！使用 altinstall 而非 install\n>     ```\n>     \n> - **版本兼容性问题**  \n>     `python3-apt` 仅支持官方仓库对应的 Python 版本。强行搭配 3.10 需自行编译适配，风险极高。\n>\n\n### 让自建 Python 3.10 也能使用系统 `py3clean` / `py3compile`\n\n> [!tip] 一句话总结  \n> 通过「兼容性包装器」或「直接修改 shebang」两条路线，让系统工具继续用默认 Python，而自建 3.10 环境无缝调用。\n\n---\n\n#### 方案 A：创建兼容性包装器（推荐，不改动系统文件）\n\n##### 1. 创建 `py3clean` 包装脚本\n```bash\nsudo nano /usr/local/bin/py3clean\n```\n\n内容：\n```bash `!/bin/bash`\n# Py3clean wrapper for custom Python 3.10\n# Delegate to system py3clean with correct Python version\n\n/usr/bin/python3.8 /usr/bin/py3clean \"$@\"   # 把 3.8 换成系统默认版本\n```\n\n##### 2. 创建 `py3compile` 包装脚本\n```bash\nsudo nano /usr/local/bin/py3compile\n```\n\n内容：\n```bash `!/bin/bash`\n# Py3compile wrapper for custom Python 3.10\n# Delegate to system py3compile with correct Python version\n\n/usr/bin/python3.8 /usr/bin/py3compile \"$@\"  # 把 3.8 换成系统默认版本\n```\n\n##### 3. 赋予执行权限\n```bash\nsudo chmod +x /usr/local/bin/py3clean /usr/local/bin/py3compile\n```\n\n---\n\n#### 方案 B：直接修改工具 shebang（快速但会动系统文件）\n\n##### 1. 编辑 `py3clean`\n```bash\nsudo nano /usr/bin/py3clean\n```\n\n把第一行改成：\n```bash `!/usr/bin/python3.8`   # 保持使用系统 Python\n```\n\n##### 2. 编辑 `py3compile`\n```bash\nsudo nano /usr/bin/py3compile\n```\n\n同样修改第一行为：\n```bash `!/usr/bin/python3.8`   # 保持使用系统 Python\n```\n\n---\n\n> [!question] 为什么这么做有效？\n> \n> - **隔离执行环境**  \n>     包装器或 shebang 强制系统工具继续用 **系统自带 Python**，而不是 3.10。\n>     \n> - **保持兼容性**  \n>     系统工具依赖的库版本与自建 3.10 无关，避免兼容性坑。\n>     \n> - **无缝集成**  \n>     `apt`、`dpkg` 等系统级脚本调用 `py3clean/py3compile` 时不受影响，自建 3.10 也能正常用。\n>     \n\n---\n\n#### [#验证解决方案](#验证解决方案)\n\nbash\n\n复制\n\n```bash\n# 测试包装器\n/usr/local/bin/py3clean --version\n/usr/local/bin/py3compile --help\n\n# 检查系统 apt 功能\nsudo apt update\nsudo apt install --reinstall python3-apt\n```\n\n一切正常即表明方案成功。","slug":"2025-06-01-Python-QA","published":1,"__permalink":"python-q&a/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0mz0009zovdeak26lzy","content":"<h2 id=\"缺少zlib模块-No-module-named-‘zlib’\"><a href=\"#缺少zlib模块-No-module-named-‘zlib’\" class=\"headerlink\" title=\"缺少zlib模块 # No module named ‘zlib’\"></a>缺少zlib模块 # No module named ‘zlib’</h2><p>zlib是一套通用的解压缩开源库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install zlib1g-dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"缺少-ctypes模块-ModuleNotFoundError-No-module-named-‘-ctypes’\"><a href=\"#缺少-ctypes模块-ModuleNotFoundError-No-module-named-‘-ctypes’\" class=\"headerlink\" title=\"缺少_ctypes模块 ModuleNotFoundError: No module named ‘_ ctypes’\"></a>缺少_ctypes模块 ModuleNotFoundError: No module named ‘_ ctypes’</h2><p>ctypes 是 Python 的外部函数库。它提供了与 C 兼容的数据类型，并允许调用 DLL 或共享库中的函数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install libffi-dev</span><br></pre></td></tr></table></figure>\n<p>从.&#x2F;configure开始重新安装Python<br>（没试过不重装，不知道能不能解决问题）</p>\n<h2 id=\"安装新版本python后，找不到之前的module或者apt安装的module\"><a href=\"#安装新版本python后，找不到之前的module或者apt安装的module\" class=\"headerlink\" title=\"安装新版本python后，找不到之前的module或者apt安装的module\"></a>安装新版本python后，找不到之前的module或者apt安装的module</h2><p>$Last Edited：2025.07.14&#x2F;10:49$</p>\n<hr>\n<p>这个问题是我在用apt安装pipx时发现的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usudo apt install pipx</span><br></pre></td></tr></table></figure>\n\n<p>可以用这个指令检查一下目前的sys.path</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/python3 -c <span class=\"string\">&quot;import sys; print(sys.path)&quot;</span></span><br></pre></td></tr></table></figure>\n<p>输出是：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#x27;&#x27;, </span><br><span class=\"line\"> &#x27;/usr/local/lib/python310.zip&#x27;, </span><br><span class=\"line\"> &#x27;/usr/local/lib/python3.10&#x27;, </span><br><span class=\"line\"> &#x27;/usr/local/lib/python3.10/lib-dynload&#x27;, </span><br><span class=\"line\"> &#x27;/home/orangepi/.local/lib/python3.10/site-packages&#x27;, </span><br><span class=\"line\"> &#x27;/usr/local/lib/python3.10/site-packages&#x27;]</span><br></pre></td></tr></table></figure>\n\n<p>再检查一下pipx的实际安装位置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> find / -name pipx -<span class=\"built_in\">type</span> d 2&gt;/dev/null</span><br></pre></td></tr></table></figure>\n<p>发现在：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/lib/python3/dist-packages/pipx</span><br></pre></td></tr></table></figure>\n\n<p>可以看出系统 Python 的 <code>dist-packages</code> 路径 (<code>/usr/lib/python3/dist-packages</code>) <strong>没有</strong>出现在 <code>sys.path</code> 中</p>\n<p>因为系统 Python 没有自动包含 Debian 的标准包路径 <code>/usr/lib/python3/dist-packages</code>，需要手动添加它：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 创建正确的 .pth 文件</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;/usr/lib/python3/dist-packages&quot;</span> | <span class=\"built_in\">sudo</span> <span class=\"built_in\">tee</span> /usr/local/lib/python3.10/site-packages/dist-packages.pth</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 验证是否生效</span></span><br><span class=\"line\">/usr/bin/python3 -c <span class=\"string\">&quot;import sys; print(&#x27;\\n&#x27;.join(sys.path))&quot;</span> | grep dist-packages</span><br></pre></td></tr></table></figure>\n<p>关于 <code>.pth</code> 文件：<br><code>.pth</code> 文件是 Python 的路径配置文件：</p>\n<ol>\n<li><strong>作用</strong>：在 Python 启动时自动将指定路径添加到 <code>sys.path</code></li>\n<li><strong>位置</strong>：必须放在 Python 搜索的特定目录中</li>\n<li><strong>格式</strong>：每行一个路径</li>\n<li><strong>命名</strong>：可以是任何名称，但必须以 <code>.pth</code> 结尾</li>\n</ol>\n<p>总之就是在site-packages目录下创建.pth文件，下面这个操作也可以：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 找到 site-packages 目录</span></span><br><span class=\"line\">SITE_DIR=$(/usr/bin/python3 -c <span class=\"string\">&quot;import site; print(site.getsitepackages()[0])&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 创建 .pth 文件</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;/usr/lib/python3/dist-packages&quot;</span> | <span class=\"built_in\">sudo</span> <span class=\"built_in\">tee</span> <span class=\"string\">&quot;<span class=\"variable\">$SITE_DIR</span>/dist-packages.pth&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 验证</span></span><br><span class=\"line\">/usr/bin/python3 -c <span class=\"string\">&quot;import sys; print(&#x27;/usr/lib/python3/dist-packages&#x27; in sys.path)&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从源码编译安装python并修改软连接后，py3clean-和-py3compile-缺失，可能导致apt-update失败\"><a href=\"#从源码编译安装python并修改软连接后，py3clean-和-py3compile-缺失，可能导致apt-update失败\" class=\"headerlink\" title=\"从源码编译安装python并修改软连接后，py3clean 和 py3compile 缺失，可能导致apt update失败\"></a>从源码编译安装python并修改软连接后，py3clean 和 py3compile 缺失，可能导致apt update失败</h2><p>最简单的办法就是不要改pyhon3的软连接，只改python和pip的就没问题。<br>或者用<code>update-alternatives</code>管理不同版本的python，需要的时候进行切换。<a href=\"Python&pip#6.%E5%88%87%E6%8D%A2python%E7%89%88%E6%9C%AC\">Python&amp;pip#6.切换python版本</a></p>\n<p>下面这个是Deepseek给出的方法，目前还没试过。</p>\n<h3 id=\"apt-pkg-模块缺失修复\"><a href=\"#apt-pkg-模块缺失修复\" class=\"headerlink\" title=\"apt_pkg 模块缺失修复\"></a><code>apt_pkg</code> 模块缺失修复</h3><h4 id=\"1-手动修复-apt-pkg-符号链接\"><a href=\"#1-手动修复-apt-pkg-符号链接\" class=\"headerlink\" title=\"1. 手动修复 apt_pkg 符号链接\"></a>1. 手动修复 <code>apt_pkg</code> 符号链接</h4><p>找到系统原有 <code>apt_pkg.so</code> 并链接到新 Python 版本目录 ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查找现有 apt_pkg 模块</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/lib/python3/dist-packages</span><br><span class=\"line\"><span class=\"built_in\">ls</span> | grep apt_pkg          <span class=\"comment\"># 输出如 apt_pkg.cpython-38-x86_64-linux-gnu.so</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建符号链接（替换 310 为你的 Python 版本号）</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">ln</span> -s \\</span><br><span class=\"line\">  apt_pkg.cpython-38-x86_64-linux-gnu.so \\</span><br><span class=\"line\">  apt_pkg.cpython-310-x86_64-linux-gnu.so</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-重建-Python-字节码缓存\"><a href=\"#2-重建-Python-字节码缓存\" class=\"headerlink\" title=\"2. 重建 Python 字节码缓存\"></a>2. 重建 Python 字节码缓存</h4><p>执行编译命令，确保模块可被识别 ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> python3.10 -m compileall /usr/lib/python3/dist-packages/apt_pkg*</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>[!important] 关键注意事项</p>\n<ul>\n<li><p><strong>系统 Python 不可替换</strong><br>  Ubuntu 的核心组件（如 APT、桌面环境）依赖默认 Python 版本。直接替换 <code>/usr/bin/python3</code> 将导致崩溃。</p>\n</li>\n<li><p><strong>编译选项的重要性</strong><br>  源码编译时需包含 <code>--enable-shared</code> 并指定 <code>prefix=/usr/local</code>，避免覆盖系统文件：</p>\n<p>  bash</p>\n<p>  复制</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --enable-optimizations --enable-shared --prefix=/usr/local</span><br><span class=\"line\">make -j$(<span class=\"built_in\">nproc</span>)</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> make altinstall      <span class=\"comment\"># 关键！使用 altinstall 而非 install</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>版本兼容性问题</strong><br>  <code>python3-apt</code> 仅支持官方仓库对应的 Python 版本。强行搭配 3.10 需自行编译适配，风险极高。</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"让自建-Python-3-10-也能使用系统-py3clean-py3compile\"><a href=\"#让自建-Python-3-10-也能使用系统-py3clean-py3compile\" class=\"headerlink\" title=\"让自建 Python 3.10 也能使用系统 py3clean &#x2F; py3compile\"></a>让自建 Python 3.10 也能使用系统 <code>py3clean</code> &#x2F; <code>py3compile</code></h3><blockquote>\n<p>[!tip] 一句话总结<br>通过「兼容性包装器」或「直接修改 shebang」两条路线，让系统工具继续用默认 Python，而自建 3.10 环境无缝调用。</p>\n</blockquote>\n<hr>\n<h4 id=\"方案-A：创建兼容性包装器（推荐，不改动系统文件）\"><a href=\"#方案-A：创建兼容性包装器（推荐，不改动系统文件）\" class=\"headerlink\" title=\"方案 A：创建兼容性包装器（推荐，不改动系统文件）\"></a>方案 A：创建兼容性包装器（推荐，不改动系统文件）</h4><h5 id=\"1-创建-py3clean-包装脚本\"><a href=\"#1-创建-py3clean-包装脚本\" class=\"headerlink\" title=\"1. 创建 py3clean 包装脚本\"></a>1. 创建 <code>py3clean</code> 包装脚本</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nano /usr/local/bin/py3clean</span><br></pre></td></tr></table></figure>\n\n<p>内容：<br>&#96;&#96;&#96;bash <code>!/bin/bash</code></p>\n<h1 id=\"Py3clean-wrapper-for-custom-Python-3-10\"><a href=\"#Py3clean-wrapper-for-custom-Python-3-10\" class=\"headerlink\" title=\"Py3clean wrapper for custom Python 3.10\"></a>Py3clean wrapper for custom Python 3.10</h1><h1 id=\"Delegate-to-system-py3clean-with-correct-Python-version\"><a href=\"#Delegate-to-system-py3clean-with-correct-Python-version\" class=\"headerlink\" title=\"Delegate to system py3clean with correct Python version\"></a>Delegate to system py3clean with correct Python version</h1><p>&#x2F;usr&#x2F;bin&#x2F;python3.8 &#x2F;usr&#x2F;bin&#x2F;py3clean “$@”   # 把 3.8 换成系统默认版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">##### 2. 创建 `py3compile` 包装脚本</span><br><span class=\"line\">```bash</span><br><span class=\"line\">sudo nano /usr/local/bin/py3compile</span><br></pre></td></tr></table></figure>\n\n<p>内容：<br>&#96;&#96;&#96;bash <code>!/bin/bash</code></p>\n<h1 id=\"Py3compile-wrapper-for-custom-Python-3-10\"><a href=\"#Py3compile-wrapper-for-custom-Python-3-10\" class=\"headerlink\" title=\"Py3compile wrapper for custom Python 3.10\"></a>Py3compile wrapper for custom Python 3.10</h1><h1 id=\"Delegate-to-system-py3compile-with-correct-Python-version\"><a href=\"#Delegate-to-system-py3compile-with-correct-Python-version\" class=\"headerlink\" title=\"Delegate to system py3compile with correct Python version\"></a>Delegate to system py3compile with correct Python version</h1><p>&#x2F;usr&#x2F;bin&#x2F;python3.8 &#x2F;usr&#x2F;bin&#x2F;py3compile “$@”  # 把 3.8 换成系统默认版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">##### 3. 赋予执行权限</span><br><span class=\"line\">```bash</span><br><span class=\"line\">sudo chmod +x /usr/local/bin/py3clean /usr/local/bin/py3compile</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"方案-B：直接修改工具-shebang（快速但会动系统文件）\"><a href=\"#方案-B：直接修改工具-shebang（快速但会动系统文件）\" class=\"headerlink\" title=\"方案 B：直接修改工具 shebang（快速但会动系统文件）\"></a>方案 B：直接修改工具 shebang（快速但会动系统文件）</h4><h5 id=\"1-编辑-py3clean\"><a href=\"#1-编辑-py3clean\" class=\"headerlink\" title=\"1. 编辑 py3clean\"></a>1. 编辑 <code>py3clean</code></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nano /usr/bin/py3clean</span><br></pre></td></tr></table></figure>\n\n<p>把第一行改成：</p>\n<figure class=\"highlight bash\"><figcaption><span>`!/usr/bin/python3.8`   # 保持使用系统 Python</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##### 2. 编辑 `py3compile`</span></span><br><span class=\"line\">```bash</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> nano /usr/bin/py3compile</span><br></pre></td></tr></table></figure>\n\n<p>同样修改第一行为：</p>\n<figure class=\"highlight bash\"><figcaption><span>`!/usr/bin/python3.8`   # 保持使用系统 Python</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; [!question] 为什么这么做有效？</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt; - **隔离执行环境**  </span><br><span class=\"line\">&gt;     包装器或 shebang 强制系统工具继续用 **系统自带 Python**，而不是 3.10。</span><br><span class=\"line\">&gt;     </span><br><span class=\"line\">&gt; - **保持兼容性**  </span><br><span class=\"line\">&gt;     系统工具依赖的库版本与自建 3.10 无关，避免兼容性坑。</span><br><span class=\"line\">&gt;     </span><br><span class=\"line\">&gt; - **无缝集成**  </span><br><span class=\"line\">&gt;     `apt`、`dpkg` 等系统级脚本调用 `py3clean/py3compile` 时不受影响，自建 3.10 也能正常用。</span><br><span class=\"line\">&gt;     </span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#### [#验证解决方案](#验证解决方案)</span></span><br><span class=\"line\"></span><br><span class=\"line\">bash</span><br><span class=\"line\"></span><br><span class=\"line\">复制</span><br><span class=\"line\"></span><br><span class=\"line\">```bash</span><br><span class=\"line\"><span class=\"comment\"># 测试包装器</span></span><br><span class=\"line\">/usr/local/bin/py3clean --version</span><br><span class=\"line\">/usr/local/bin/py3compile --<span class=\"built_in\">help</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查系统 apt 功能</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt update</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt install --reinstall python3-apt</span><br></pre></td></tr></table></figure>\n\n<p>一切正常即表明方案成功。</p>\n","excerpt":"","more":"<h2 id=\"缺少zlib模块-No-module-named-‘zlib’\"><a href=\"#缺少zlib模块-No-module-named-‘zlib’\" class=\"headerlink\" title=\"缺少zlib模块 # No module named ‘zlib’\"></a>缺少zlib模块 # No module named ‘zlib’</h2><p>zlib是一套通用的解压缩开源库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install zlib1g-dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"缺少-ctypes模块-ModuleNotFoundError-No-module-named-‘-ctypes’\"><a href=\"#缺少-ctypes模块-ModuleNotFoundError-No-module-named-‘-ctypes’\" class=\"headerlink\" title=\"缺少_ctypes模块 ModuleNotFoundError: No module named ‘_ ctypes’\"></a>缺少_ctypes模块 ModuleNotFoundError: No module named ‘_ ctypes’</h2><p>ctypes 是 Python 的外部函数库。它提供了与 C 兼容的数据类型，并允许调用 DLL 或共享库中的函数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install libffi-dev</span><br></pre></td></tr></table></figure>\n<p>从.&#x2F;configure开始重新安装Python<br>（没试过不重装，不知道能不能解决问题）</p>\n<h2 id=\"安装新版本python后，找不到之前的module或者apt安装的module\"><a href=\"#安装新版本python后，找不到之前的module或者apt安装的module\" class=\"headerlink\" title=\"安装新版本python后，找不到之前的module或者apt安装的module\"></a>安装新版本python后，找不到之前的module或者apt安装的module</h2><p>$Last Edited：2025.07.14&#x2F;10:49$</p>\n<hr>\n<p>这个问题是我在用apt安装pipx时发现的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usudo apt install pipx</span><br></pre></td></tr></table></figure>\n\n<p>可以用这个指令检查一下目前的sys.path</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/python3 -c <span class=\"string\">&quot;import sys; print(sys.path)&quot;</span></span><br></pre></td></tr></table></figure>\n<p>输出是：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#x27;&#x27;, </span><br><span class=\"line\"> &#x27;/usr/local/lib/python310.zip&#x27;, </span><br><span class=\"line\"> &#x27;/usr/local/lib/python3.10&#x27;, </span><br><span class=\"line\"> &#x27;/usr/local/lib/python3.10/lib-dynload&#x27;, </span><br><span class=\"line\"> &#x27;/home/orangepi/.local/lib/python3.10/site-packages&#x27;, </span><br><span class=\"line\"> &#x27;/usr/local/lib/python3.10/site-packages&#x27;]</span><br></pre></td></tr></table></figure>\n\n<p>再检查一下pipx的实际安装位置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> find / -name pipx -<span class=\"built_in\">type</span> d 2&gt;/dev/null</span><br></pre></td></tr></table></figure>\n<p>发现在：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/lib/python3/dist-packages/pipx</span><br></pre></td></tr></table></figure>\n\n<p>可以看出系统 Python 的 <code>dist-packages</code> 路径 (<code>/usr/lib/python3/dist-packages</code>) <strong>没有</strong>出现在 <code>sys.path</code> 中</p>\n<p>因为系统 Python 没有自动包含 Debian 的标准包路径 <code>/usr/lib/python3/dist-packages</code>，需要手动添加它：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 创建正确的 .pth 文件</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;/usr/lib/python3/dist-packages&quot;</span> | <span class=\"built_in\">sudo</span> <span class=\"built_in\">tee</span> /usr/local/lib/python3.10/site-packages/dist-packages.pth</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 验证是否生效</span></span><br><span class=\"line\">/usr/bin/python3 -c <span class=\"string\">&quot;import sys; print(&#x27;\\n&#x27;.join(sys.path))&quot;</span> | grep dist-packages</span><br></pre></td></tr></table></figure>\n<p>关于 <code>.pth</code> 文件：<br><code>.pth</code> 文件是 Python 的路径配置文件：</p>\n<ol>\n<li><strong>作用</strong>：在 Python 启动时自动将指定路径添加到 <code>sys.path</code></li>\n<li><strong>位置</strong>：必须放在 Python 搜索的特定目录中</li>\n<li><strong>格式</strong>：每行一个路径</li>\n<li><strong>命名</strong>：可以是任何名称，但必须以 <code>.pth</code> 结尾</li>\n</ol>\n<p>总之就是在site-packages目录下创建.pth文件，下面这个操作也可以：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 找到 site-packages 目录</span></span><br><span class=\"line\">SITE_DIR=$(/usr/bin/python3 -c <span class=\"string\">&quot;import site; print(site.getsitepackages()[0])&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 创建 .pth 文件</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;/usr/lib/python3/dist-packages&quot;</span> | <span class=\"built_in\">sudo</span> <span class=\"built_in\">tee</span> <span class=\"string\">&quot;<span class=\"variable\">$SITE_DIR</span>/dist-packages.pth&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 验证</span></span><br><span class=\"line\">/usr/bin/python3 -c <span class=\"string\">&quot;import sys; print(&#x27;/usr/lib/python3/dist-packages&#x27; in sys.path)&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从源码编译安装python并修改软连接后，py3clean-和-py3compile-缺失，可能导致apt-update失败\"><a href=\"#从源码编译安装python并修改软连接后，py3clean-和-py3compile-缺失，可能导致apt-update失败\" class=\"headerlink\" title=\"从源码编译安装python并修改软连接后，py3clean 和 py3compile 缺失，可能导致apt update失败\"></a>从源码编译安装python并修改软连接后，py3clean 和 py3compile 缺失，可能导致apt update失败</h2><p>最简单的办法就是不要改pyhon3的软连接，只改python和pip的就没问题。<br>或者用<code>update-alternatives</code>管理不同版本的python，需要的时候进行切换。<a href=\"Python&pip#6.%E5%88%87%E6%8D%A2python%E7%89%88%E6%9C%AC\">Python&amp;pip#6.切换python版本</a></p>\n<p>下面这个是Deepseek给出的方法，目前还没试过。</p>\n<h3 id=\"apt-pkg-模块缺失修复\"><a href=\"#apt-pkg-模块缺失修复\" class=\"headerlink\" title=\"apt_pkg 模块缺失修复\"></a><code>apt_pkg</code> 模块缺失修复</h3><h4 id=\"1-手动修复-apt-pkg-符号链接\"><a href=\"#1-手动修复-apt-pkg-符号链接\" class=\"headerlink\" title=\"1. 手动修复 apt_pkg 符号链接\"></a>1. 手动修复 <code>apt_pkg</code> 符号链接</h4><p>找到系统原有 <code>apt_pkg.so</code> 并链接到新 Python 版本目录 ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查找现有 apt_pkg 模块</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/lib/python3/dist-packages</span><br><span class=\"line\"><span class=\"built_in\">ls</span> | grep apt_pkg          <span class=\"comment\"># 输出如 apt_pkg.cpython-38-x86_64-linux-gnu.so</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建符号链接（替换 310 为你的 Python 版本号）</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">ln</span> -s \\</span><br><span class=\"line\">  apt_pkg.cpython-38-x86_64-linux-gnu.so \\</span><br><span class=\"line\">  apt_pkg.cpython-310-x86_64-linux-gnu.so</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-重建-Python-字节码缓存\"><a href=\"#2-重建-Python-字节码缓存\" class=\"headerlink\" title=\"2. 重建 Python 字节码缓存\"></a>2. 重建 Python 字节码缓存</h4><p>执行编译命令，确保模块可被识别 ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> python3.10 -m compileall /usr/lib/python3/dist-packages/apt_pkg*</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>[!important] 关键注意事项</p>\n<ul>\n<li><p><strong>系统 Python 不可替换</strong><br>  Ubuntu 的核心组件（如 APT、桌面环境）依赖默认 Python 版本。直接替换 <code>/usr/bin/python3</code> 将导致崩溃。</p>\n</li>\n<li><p><strong>编译选项的重要性</strong><br>  源码编译时需包含 <code>--enable-shared</code> 并指定 <code>prefix=/usr/local</code>，避免覆盖系统文件：</p>\n<p>  bash</p>\n<p>  复制</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --enable-optimizations --enable-shared --prefix=/usr/local</span><br><span class=\"line\">make -j$(<span class=\"built_in\">nproc</span>)</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> make altinstall      <span class=\"comment\"># 关键！使用 altinstall 而非 install</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>版本兼容性问题</strong><br>  <code>python3-apt</code> 仅支持官方仓库对应的 Python 版本。强行搭配 3.10 需自行编译适配，风险极高。</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"让自建-Python-3-10-也能使用系统-py3clean-py3compile\"><a href=\"#让自建-Python-3-10-也能使用系统-py3clean-py3compile\" class=\"headerlink\" title=\"让自建 Python 3.10 也能使用系统 py3clean &#x2F; py3compile\"></a>让自建 Python 3.10 也能使用系统 <code>py3clean</code> &#x2F; <code>py3compile</code></h3><blockquote>\n<p>[!tip] 一句话总结<br>通过「兼容性包装器」或「直接修改 shebang」两条路线，让系统工具继续用默认 Python，而自建 3.10 环境无缝调用。</p>\n</blockquote>\n<hr>\n<h4 id=\"方案-A：创建兼容性包装器（推荐，不改动系统文件）\"><a href=\"#方案-A：创建兼容性包装器（推荐，不改动系统文件）\" class=\"headerlink\" title=\"方案 A：创建兼容性包装器（推荐，不改动系统文件）\"></a>方案 A：创建兼容性包装器（推荐，不改动系统文件）</h4><h5 id=\"1-创建-py3clean-包装脚本\"><a href=\"#1-创建-py3clean-包装脚本\" class=\"headerlink\" title=\"1. 创建 py3clean 包装脚本\"></a>1. 创建 <code>py3clean</code> 包装脚本</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nano /usr/local/bin/py3clean</span><br></pre></td></tr></table></figure>\n\n<p>内容：<br>&#96;&#96;&#96;bash <code>!/bin/bash</code></p>\n<h1 id=\"Py3clean-wrapper-for-custom-Python-3-10\"><a href=\"#Py3clean-wrapper-for-custom-Python-3-10\" class=\"headerlink\" title=\"Py3clean wrapper for custom Python 3.10\"></a>Py3clean wrapper for custom Python 3.10</h1><h1 id=\"Delegate-to-system-py3clean-with-correct-Python-version\"><a href=\"#Delegate-to-system-py3clean-with-correct-Python-version\" class=\"headerlink\" title=\"Delegate to system py3clean with correct Python version\"></a>Delegate to system py3clean with correct Python version</h1><p>&#x2F;usr&#x2F;bin&#x2F;python3.8 &#x2F;usr&#x2F;bin&#x2F;py3clean “$@”   # 把 3.8 换成系统默认版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">##### 2. 创建 `py3compile` 包装脚本</span><br><span class=\"line\">```bash</span><br><span class=\"line\">sudo nano /usr/local/bin/py3compile</span><br></pre></td></tr></table></figure>\n\n<p>内容：<br>&#96;&#96;&#96;bash <code>!/bin/bash</code></p>\n<h1 id=\"Py3compile-wrapper-for-custom-Python-3-10\"><a href=\"#Py3compile-wrapper-for-custom-Python-3-10\" class=\"headerlink\" title=\"Py3compile wrapper for custom Python 3.10\"></a>Py3compile wrapper for custom Python 3.10</h1><h1 id=\"Delegate-to-system-py3compile-with-correct-Python-version\"><a href=\"#Delegate-to-system-py3compile-with-correct-Python-version\" class=\"headerlink\" title=\"Delegate to system py3compile with correct Python version\"></a>Delegate to system py3compile with correct Python version</h1><p>&#x2F;usr&#x2F;bin&#x2F;python3.8 &#x2F;usr&#x2F;bin&#x2F;py3compile “$@”  # 把 3.8 换成系统默认版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">##### 3. 赋予执行权限</span><br><span class=\"line\">```bash</span><br><span class=\"line\">sudo chmod +x /usr/local/bin/py3clean /usr/local/bin/py3compile</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"方案-B：直接修改工具-shebang（快速但会动系统文件）\"><a href=\"#方案-B：直接修改工具-shebang（快速但会动系统文件）\" class=\"headerlink\" title=\"方案 B：直接修改工具 shebang（快速但会动系统文件）\"></a>方案 B：直接修改工具 shebang（快速但会动系统文件）</h4><h5 id=\"1-编辑-py3clean\"><a href=\"#1-编辑-py3clean\" class=\"headerlink\" title=\"1. 编辑 py3clean\"></a>1. 编辑 <code>py3clean</code></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nano /usr/bin/py3clean</span><br></pre></td></tr></table></figure>\n\n<p>把第一行改成：</p>\n<figure class=\"highlight bash\"><figcaption><span>`!/usr/bin/python3.8`   # 保持使用系统 Python</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##### 2. 编辑 `py3compile`</span></span><br><span class=\"line\">```bash</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> nano /usr/bin/py3compile</span><br></pre></td></tr></table></figure>\n\n<p>同样修改第一行为：</p>\n<figure class=\"highlight bash\"><figcaption><span>`!/usr/bin/python3.8`   # 保持使用系统 Python</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; [!question] 为什么这么做有效？</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt; - **隔离执行环境**  </span><br><span class=\"line\">&gt;     包装器或 shebang 强制系统工具继续用 **系统自带 Python**，而不是 3.10。</span><br><span class=\"line\">&gt;     </span><br><span class=\"line\">&gt; - **保持兼容性**  </span><br><span class=\"line\">&gt;     系统工具依赖的库版本与自建 3.10 无关，避免兼容性坑。</span><br><span class=\"line\">&gt;     </span><br><span class=\"line\">&gt; - **无缝集成**  </span><br><span class=\"line\">&gt;     `apt`、`dpkg` 等系统级脚本调用 `py3clean/py3compile` 时不受影响，自建 3.10 也能正常用。</span><br><span class=\"line\">&gt;     </span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#### [#验证解决方案](#验证解决方案)</span></span><br><span class=\"line\"></span><br><span class=\"line\">bash</span><br><span class=\"line\"></span><br><span class=\"line\">复制</span><br><span class=\"line\"></span><br><span class=\"line\">```bash</span><br><span class=\"line\"><span class=\"comment\"># 测试包装器</span></span><br><span class=\"line\">/usr/local/bin/py3clean --version</span><br><span class=\"line\">/usr/local/bin/py3compile --<span class=\"built_in\">help</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查系统 apt 功能</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt update</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt install --reinstall python3-apt</span><br></pre></td></tr></table></figure>\n\n<p>一切正常即表明方案成功。</p>\n"},{"title":"Python&pip","date":"2025-06-01T02:34:58.000Z","updated":"2025-07-28T05:58:04.000Z","_content":"\n## 安装\n\n$Last Edited：2025.07.15/22:30$\n___\n\n> [!NOTE] 操作环境\n> 香橙派4-lts Orange Pi 3.0.6 Buster with Linux 4.4.179-rk3399\n\n参考：[Linux安装Python各个版本，这一篇就够了-CSDN博客](https://blog.csdn.net/qq_42571592/article/details/122902266)\n[3.9.19 Documentation (python.org)](https://docs.python.org/zh-cn/3.9/)\n[技术|如何在 Ubuntu Linux 上安装 Zlib](https://linux.cn/article-13572-1.html\n[Debian 11上安装Python 3.10，并切换系统默认Python版本](https://www.cnblogs.com/STangQL/p/15647583.html)\n以python3.9.19为例\n\n### 1.安装依赖包\n```bash\napt-get install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel\n```\n（没运行这个）\n\n后面在另一块派安装的时候因为缺少`zlib`导致pip没装上[Python-Q&A#缺少zlib模块 No module named 'zlib'](Python-Q&A#缺少zlib模块 No module named 'zlib')，只能安装zlib，再把python重装一遍\n```bash\nsudo apt install zlib1g\nsudo apt install zlib1g-dev\n```\n所以还是建议检查下依赖包\n\n上面的安装依赖包指令好像不适用，可以用这个（还没试过）：\n```bash\nsudo apt install build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev libffi-dev liblzma-dev\n```\n\n### 2.下载Python安装包\n我下载的是3.9.19，网站[Index of /ftp/python/3.9.19/](https://www.python.org/ftp/python/3.9.19/)\n复制里面.tgz文件的下载链接：\n```bash\nwget https://www.python.org/ftp/python/3.9.19/Python-3.9.19.tgz\n```\n在当前目录下载这个安装文件。\n### 3.解压\n```bash\ntar -zxvf Python-3.9.19.tgz\n```\n### 4.安装\n进入解压后的文件目录：\n```bash\ncd Python-3.9.19\n```\n\n配置路径：\n```bash\n./configure --prefix=/usr/local --enable-optimizations\n```\n\n编译与安装\n```bash\nmake altinstall\n```\n\n一般编译安装时间比较长，大概十分钟（如果短可能是出问题了），成功后最终显示的信息如下\n```text\nSuccessfully installed pip-23.0.1 setuptools-58.1.0\n```\n\n如果安装失败，会出现类似\n```text\nmake: *** [Makefile:1265: install] Error 1\n```\n的错误提示，说明pip没安装，这可能是由于部分依赖包的缺失造成的，如`zlib`。\n\n### 5.建立软连接\n确认一下系统默认的python和pip版本\n```bash\nls -l /usr/bin/python* /usr/bin/pip*\n# 或者下面这个\nreadlink -f /usr/bin/python \n```\n\n如果软连接已经存在，先删除之前的软连接：\n```bash\nls -l link_name # 检查软连接指向/权限\nunlink link_name\n```\n`link_name`为软链接路径\n\n软连接指令：\n```bash\nln -s /usr/local/bin/python3.9 /usr/bin/python\nln -s /usr/local/bin/pip3.9 /usr/bin/pip\n```\n也可以`-sf`选项强制替换，这样就不用删除之前的\n\n有多个版本的Python，想切换Python版本时也是这个操作。\n\n### 6.切换python版本\n添加替代版本列表：\n```bash\nsudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 2\nsudo update-alternatives --install /usr/bin/python3 python3 /usr/local/bin/python3.9 1\n```\n\n进行版本切换：\n```bash\nupdate-alternatives --config python3\n```\n输入前面的序号，回车< Enter >选择\n\n## 创建虚拟环境\n\n> [!NOTE] 操作环境\n> 香橙派4-lts Orange Pi 3.0.6 Bullseye with Linux 5.10.160-rk3399\n\n### 1.使用标准库内置的venv模块\n创建虚拟环境：\n```bash\npython -m venv myenv\n```\n\n激活虚拟环境：\n```bash\nsource /root/myenv/bin/activate\n```\n\n退出环境：\n```bash\ndeactivate\n```\n\n删除环境：\n删除整个环境的安装目录即可\n### 2.使用conda\n具体见[Conda#虚拟环境](Conda#虚拟环境)\n\n## 卸载\n\n## 包管理器pip的使用\n1. 升级pip\n```bash\npython -m pip install --upgrade pip\n```\n\n## 项目的构建和管理\n### 1.查看项目的依赖文件\n大多数 Python 项目会通过文件显式声明依赖项：\n\n- **`requirements.txt`**：最常见格式，可通过 `pip install -r requirements.txt` 安装依赖。\n```bash\npip install -r requirements.txt\n```\n    \n- **`setup.py`**：使用 `setup.py install` 或 `pip install .` 安装依赖。\n```bash\npip install .\n```\n    \n- **`Pipfile` / `Pipfile.lock`**：用于 `pipenv` 管理的项目。\n```bash\npipenv install\n```\n    \n- **`poetry.lock` / `pyproject.toml`**：用于 `poetry` 管理的项目。\n```bash\npoetry install\n```\n\n### 2.使用工具扫描代码中的导入语句\n如果项目没有明确的依赖文件，可以通过分析代码中的 `import` 语句推断依赖库：\n\n**工具推荐：**\n- **`pipreqs`**：扫描项目目录中的 `.py` 文件，自动生成 `requirements.txt`。\n```bash\npip install pipreqs \npipreqs /path/to/project\n```\n\n输出示例：\n```text\nFlask==2.0.1 requests==2.26.0\n```\n\n- **`pyroma`**：检查项目结构并推荐依赖。\n```bash\npip install pyroma pyroma /path/to/project\n```\n\n- **`pydeps`**：生成依赖图（适合小型项目）。\n```bash\npip install pydeps pydeps your_project_name\n```\n\n## 安装Github上的仓库\n以vot-toolkit为例，这是vot测试官方的工具包，每年都有比赛，维护的应该不错。找到了以下几种安装方法\n### 1.直接pip安装\n```powershell\npip install git+https://github.com/votchallenge/vot-toolkit-python\n```\n但是可能容易出网络问题\n\n### 2.使用 SSH 协议安装\n```powershell\npip install git+ssh://git@github.com/votchallenge/vot-toolkit-python.git\n```\n_注意：需要设置 [SSH 密钥](https://docs.github.com/en/authentication/connecting-to-github-with-ssh)_\n\n### 3.手动克隆后安装\n```powershell\n# 1. 手动克隆仓库\ngit clone https://github.com/votchallenge/vot-toolkit-python\n# 2. 进入目录\ncd vot-toolkit-python\n# 3. 从本地安装\npip install .\n```\n\n当执行`pip install .`时，pip 在当前目录查找 `setup.py` 或 `pyproject.toml` 文件，所以上述方法对于直接下载zip文件然后解压，再安装也适用。\n\n与其他安装方式的对比\n\n| 安装方式            | 命令                            | 适用场景    | 特点              |\n| --------------- | ----------------------------- | ------- | --------------- |\n| **从本地源码安装**     | `pip install .`               | 开发自己的包  | 安装当前目录的包        |\n| **可编辑模式**       | `pip install -e .`            | 包开发阶段   | 创建符号链接，修改代码实时生效 |\n| **从 PyPI 安装**   | `pip install package_name`    | 安装公共包   | 从官方仓库下载预编译包     |\n| **从 GitHub 安装** | `pip install git+https://...` | 安装最新开发版 | 直接从版本控制安装       |","source":"_posts/2025-06-01-Pythonpip.md","raw":"---\ntitle: Python&pip\ndate: 2025-06-01 10:34:58\nupdated: 2025-07-28 13:58:04\ncategories:\n  - [服务器&嵌入式平台操作, 基础配置]\ntags:\npermalink: python&pip/\n---\n\n## 安装\n\n$Last Edited：2025.07.15/22:30$\n___\n\n> [!NOTE] 操作环境\n> 香橙派4-lts Orange Pi 3.0.6 Buster with Linux 4.4.179-rk3399\n\n参考：[Linux安装Python各个版本，这一篇就够了-CSDN博客](https://blog.csdn.net/qq_42571592/article/details/122902266)\n[3.9.19 Documentation (python.org)](https://docs.python.org/zh-cn/3.9/)\n[技术|如何在 Ubuntu Linux 上安装 Zlib](https://linux.cn/article-13572-1.html\n[Debian 11上安装Python 3.10，并切换系统默认Python版本](https://www.cnblogs.com/STangQL/p/15647583.html)\n以python3.9.19为例\n\n### 1.安装依赖包\n```bash\napt-get install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel\n```\n（没运行这个）\n\n后面在另一块派安装的时候因为缺少`zlib`导致pip没装上[Python-Q&A#缺少zlib模块 No module named 'zlib'](Python-Q&A#缺少zlib模块 No module named 'zlib')，只能安装zlib，再把python重装一遍\n```bash\nsudo apt install zlib1g\nsudo apt install zlib1g-dev\n```\n所以还是建议检查下依赖包\n\n上面的安装依赖包指令好像不适用，可以用这个（还没试过）：\n```bash\nsudo apt install build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev libffi-dev liblzma-dev\n```\n\n### 2.下载Python安装包\n我下载的是3.9.19，网站[Index of /ftp/python/3.9.19/](https://www.python.org/ftp/python/3.9.19/)\n复制里面.tgz文件的下载链接：\n```bash\nwget https://www.python.org/ftp/python/3.9.19/Python-3.9.19.tgz\n```\n在当前目录下载这个安装文件。\n### 3.解压\n```bash\ntar -zxvf Python-3.9.19.tgz\n```\n### 4.安装\n进入解压后的文件目录：\n```bash\ncd Python-3.9.19\n```\n\n配置路径：\n```bash\n./configure --prefix=/usr/local --enable-optimizations\n```\n\n编译与安装\n```bash\nmake altinstall\n```\n\n一般编译安装时间比较长，大概十分钟（如果短可能是出问题了），成功后最终显示的信息如下\n```text\nSuccessfully installed pip-23.0.1 setuptools-58.1.0\n```\n\n如果安装失败，会出现类似\n```text\nmake: *** [Makefile:1265: install] Error 1\n```\n的错误提示，说明pip没安装，这可能是由于部分依赖包的缺失造成的，如`zlib`。\n\n### 5.建立软连接\n确认一下系统默认的python和pip版本\n```bash\nls -l /usr/bin/python* /usr/bin/pip*\n# 或者下面这个\nreadlink -f /usr/bin/python \n```\n\n如果软连接已经存在，先删除之前的软连接：\n```bash\nls -l link_name # 检查软连接指向/权限\nunlink link_name\n```\n`link_name`为软链接路径\n\n软连接指令：\n```bash\nln -s /usr/local/bin/python3.9 /usr/bin/python\nln -s /usr/local/bin/pip3.9 /usr/bin/pip\n```\n也可以`-sf`选项强制替换，这样就不用删除之前的\n\n有多个版本的Python，想切换Python版本时也是这个操作。\n\n### 6.切换python版本\n添加替代版本列表：\n```bash\nsudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 2\nsudo update-alternatives --install /usr/bin/python3 python3 /usr/local/bin/python3.9 1\n```\n\n进行版本切换：\n```bash\nupdate-alternatives --config python3\n```\n输入前面的序号，回车< Enter >选择\n\n## 创建虚拟环境\n\n> [!NOTE] 操作环境\n> 香橙派4-lts Orange Pi 3.0.6 Bullseye with Linux 5.10.160-rk3399\n\n### 1.使用标准库内置的venv模块\n创建虚拟环境：\n```bash\npython -m venv myenv\n```\n\n激活虚拟环境：\n```bash\nsource /root/myenv/bin/activate\n```\n\n退出环境：\n```bash\ndeactivate\n```\n\n删除环境：\n删除整个环境的安装目录即可\n### 2.使用conda\n具体见[Conda#虚拟环境](Conda#虚拟环境)\n\n## 卸载\n\n## 包管理器pip的使用\n1. 升级pip\n```bash\npython -m pip install --upgrade pip\n```\n\n## 项目的构建和管理\n### 1.查看项目的依赖文件\n大多数 Python 项目会通过文件显式声明依赖项：\n\n- **`requirements.txt`**：最常见格式，可通过 `pip install -r requirements.txt` 安装依赖。\n```bash\npip install -r requirements.txt\n```\n    \n- **`setup.py`**：使用 `setup.py install` 或 `pip install .` 安装依赖。\n```bash\npip install .\n```\n    \n- **`Pipfile` / `Pipfile.lock`**：用于 `pipenv` 管理的项目。\n```bash\npipenv install\n```\n    \n- **`poetry.lock` / `pyproject.toml`**：用于 `poetry` 管理的项目。\n```bash\npoetry install\n```\n\n### 2.使用工具扫描代码中的导入语句\n如果项目没有明确的依赖文件，可以通过分析代码中的 `import` 语句推断依赖库：\n\n**工具推荐：**\n- **`pipreqs`**：扫描项目目录中的 `.py` 文件，自动生成 `requirements.txt`。\n```bash\npip install pipreqs \npipreqs /path/to/project\n```\n\n输出示例：\n```text\nFlask==2.0.1 requests==2.26.0\n```\n\n- **`pyroma`**：检查项目结构并推荐依赖。\n```bash\npip install pyroma pyroma /path/to/project\n```\n\n- **`pydeps`**：生成依赖图（适合小型项目）。\n```bash\npip install pydeps pydeps your_project_name\n```\n\n## 安装Github上的仓库\n以vot-toolkit为例，这是vot测试官方的工具包，每年都有比赛，维护的应该不错。找到了以下几种安装方法\n### 1.直接pip安装\n```powershell\npip install git+https://github.com/votchallenge/vot-toolkit-python\n```\n但是可能容易出网络问题\n\n### 2.使用 SSH 协议安装\n```powershell\npip install git+ssh://git@github.com/votchallenge/vot-toolkit-python.git\n```\n_注意：需要设置 [SSH 密钥](https://docs.github.com/en/authentication/connecting-to-github-with-ssh)_\n\n### 3.手动克隆后安装\n```powershell\n# 1. 手动克隆仓库\ngit clone https://github.com/votchallenge/vot-toolkit-python\n# 2. 进入目录\ncd vot-toolkit-python\n# 3. 从本地安装\npip install .\n```\n\n当执行`pip install .`时，pip 在当前目录查找 `setup.py` 或 `pyproject.toml` 文件，所以上述方法对于直接下载zip文件然后解压，再安装也适用。\n\n与其他安装方式的对比\n\n| 安装方式            | 命令                            | 适用场景    | 特点              |\n| --------------- | ----------------------------- | ------- | --------------- |\n| **从本地源码安装**     | `pip install .`               | 开发自己的包  | 安装当前目录的包        |\n| **可编辑模式**       | `pip install -e .`            | 包开发阶段   | 创建符号链接，修改代码实时生效 |\n| **从 PyPI 安装**   | `pip install package_name`    | 安装公共包   | 从官方仓库下载预编译包     |\n| **从 GitHub 安装** | `pip install git+https://...` | 安装最新开发版 | 直接从版本控制安装       |","slug":"2025-06-01-Pythonpip","published":1,"__permalink":"python&pip/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0n0000bzovd5huo4jwt","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>$Last Edited：2025.07.15&#x2F;22:30$</p>\n<hr>\n<blockquote>\n<p>[!NOTE] 操作环境<br>香橙派4-lts Orange Pi 3.0.6 Buster with Linux 4.4.179-rk3399</p>\n</blockquote>\n<p>参考：<a href=\"https://blog.csdn.net/qq_42571592/article/details/122902266\">Linux安装Python各个版本，这一篇就够了-CSDN博客</a><br><a href=\"https://docs.python.org/zh-cn/3.9/\">3.9.19 Documentation (python.org)</a><br>[技术|如何在 Ubuntu Linux 上安装 Zlib](<a href=\"https://linux.cn/article-13572-1.html\">https://linux.cn/article-13572-1.html</a><br><a href=\"https://www.cnblogs.com/STangQL/p/15647583.html\">Debian 11上安装Python 3.10，并切换系统默认Python版本</a><br>以python3.9.19为例</p>\n<h3 id=\"1-安装依赖包\"><a href=\"#1-安装依赖包\" class=\"headerlink\" title=\"1.安装依赖包\"></a>1.安装依赖包</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel</span><br></pre></td></tr></table></figure>\n<p>（没运行这个）</p>\n<p>后面在另一块派安装的时候因为缺少<code>zlib</code>导致pip没装上[Python-Q&amp;A#缺少zlib模块 No module named ‘zlib’](Python-Q&amp;A#缺少zlib模块 No module named ‘zlib’)，只能安装zlib，再把python重装一遍</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install zlib1g</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt install zlib1g-dev</span><br></pre></td></tr></table></figure>\n<p>所以还是建议检查下依赖包</p>\n<p>上面的安装依赖包指令好像不适用，可以用这个（还没试过）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev libffi-dev liblzma-dev</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-下载Python安装包\"><a href=\"#2-下载Python安装包\" class=\"headerlink\" title=\"2.下载Python安装包\"></a>2.下载Python安装包</h3><p>我下载的是3.9.19，网站<a href=\"https://www.python.org/ftp/python/3.9.19/\">Index of &#x2F;ftp&#x2F;python&#x2F;3.9.19&#x2F;</a><br>复制里面.tgz文件的下载链接：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.python.org/ftp/python/3.9.19/Python-3.9.19.tgz</span><br></pre></td></tr></table></figure>\n<p>在当前目录下载这个安装文件。</p>\n<h3 id=\"3-解压\"><a href=\"#3-解压\" class=\"headerlink\" title=\"3.解压\"></a>3.解压</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf Python-3.9.19.tgz</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-安装\"><a href=\"#4-安装\" class=\"headerlink\" title=\"4.安装\"></a>4.安装</h3><p>进入解压后的文件目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> Python-3.9.19</span><br></pre></td></tr></table></figure>\n\n<p>配置路径：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local --enable-optimizations</span><br></pre></td></tr></table></figure>\n\n<p>编译与安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make altinstall</span><br></pre></td></tr></table></figure>\n\n<p>一般编译安装时间比较长，大概十分钟（如果短可能是出问题了），成功后最终显示的信息如下</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Successfully installed pip-23.0.1 setuptools-58.1.0</span><br></pre></td></tr></table></figure>\n\n<p>如果安装失败，会出现类似</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make: *** [Makefile:1265: install] Error 1</span><br></pre></td></tr></table></figure>\n<p>的错误提示，说明pip没安装，这可能是由于部分依赖包的缺失造成的，如<code>zlib</code>。</p>\n<h3 id=\"5-建立软连接\"><a href=\"#5-建立软连接\" class=\"headerlink\" title=\"5.建立软连接\"></a>5.建立软连接</h3><p>确认一下系统默认的python和pip版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> -l /usr/bin/python* /usr/bin/pip*</span><br><span class=\"line\"><span class=\"comment\"># 或者下面这个</span></span><br><span class=\"line\"><span class=\"built_in\">readlink</span> -f /usr/bin/python </span><br></pre></td></tr></table></figure>\n\n<p>如果软连接已经存在，先删除之前的软连接：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> -l link_name <span class=\"comment\"># 检查软连接指向/权限</span></span><br><span class=\"line\"><span class=\"built_in\">unlink</span> link_name</span><br></pre></td></tr></table></figure>\n<p><code>link_name</code>为软链接路径</p>\n<p>软连接指令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ln</span> -s /usr/local/bin/python3.9 /usr/bin/python</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /usr/local/bin/pip3.9 /usr/bin/pip</span><br></pre></td></tr></table></figure>\n<p>也可以<code>-sf</code>选项强制替换，这样就不用删除之前的</p>\n<p>有多个版本的Python，想切换Python版本时也是这个操作。</p>\n<h3 id=\"6-切换python版本\"><a href=\"#6-切换python版本\" class=\"headerlink\" title=\"6.切换python版本\"></a>6.切换python版本</h3><p>添加替代版本列表：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 2</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> update-alternatives --install /usr/bin/python3 python3 /usr/local/bin/python3.9 1</span><br></pre></td></tr></table></figure>\n\n<p>进行版本切换：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update-alternatives --config python3</span><br></pre></td></tr></table></figure>\n<p>输入前面的序号，回车&lt; Enter &gt;选择</p>\n<h2 id=\"创建虚拟环境\"><a href=\"#创建虚拟环境\" class=\"headerlink\" title=\"创建虚拟环境\"></a>创建虚拟环境</h2><blockquote>\n<p>[!NOTE] 操作环境<br>香橙派4-lts Orange Pi 3.0.6 Bullseye with Linux 5.10.160-rk3399</p>\n</blockquote>\n<h3 id=\"1-使用标准库内置的venv模块\"><a href=\"#1-使用标准库内置的venv模块\" class=\"headerlink\" title=\"1.使用标准库内置的venv模块\"></a>1.使用标准库内置的venv模块</h3><p>创建虚拟环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m venv myenv</span><br></pre></td></tr></table></figure>\n\n<p>激活虚拟环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> /root/myenv/bin/activate</span><br></pre></td></tr></table></figure>\n\n<p>退出环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deactivate</span><br></pre></td></tr></table></figure>\n\n<p>删除环境：<br>删除整个环境的安装目录即可</p>\n<h3 id=\"2-使用conda\"><a href=\"#2-使用conda\" class=\"headerlink\" title=\"2.使用conda\"></a>2.使用conda</h3><p>具体见<a href=\"Conda#%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83\">Conda#虚拟环境</a></p>\n<h2 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h2><h2 id=\"包管理器pip的使用\"><a href=\"#包管理器pip的使用\" class=\"headerlink\" title=\"包管理器pip的使用\"></a>包管理器pip的使用</h2><ol>\n<li>升级pip<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"项目的构建和管理\"><a href=\"#项目的构建和管理\" class=\"headerlink\" title=\"项目的构建和管理\"></a>项目的构建和管理</h2><h3 id=\"1-查看项目的依赖文件\"><a href=\"#1-查看项目的依赖文件\" class=\"headerlink\" title=\"1.查看项目的依赖文件\"></a>1.查看项目的依赖文件</h3><p>大多数 Python 项目会通过文件显式声明依赖项：</p>\n<ul>\n<li><p>**<code>requirements.txt</code>**：最常见格式，可通过 <code>pip install -r requirements.txt</code> 安装依赖。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>setup.py</code>**：使用 <code>setup.py install</code> 或 <code>pip install .</code> 安装依赖。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install .</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>Pipfile</code> &#x2F; <code>Pipfile.lock</code>**：用于 <code>pipenv</code> 管理的项目。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipenv install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>poetry.lock</code> &#x2F; <code>pyproject.toml</code>**：用于 <code>poetry</code> 管理的项目。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">poetry install</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-使用工具扫描代码中的导入语句\"><a href=\"#2-使用工具扫描代码中的导入语句\" class=\"headerlink\" title=\"2.使用工具扫描代码中的导入语句\"></a>2.使用工具扫描代码中的导入语句</h3><p>如果项目没有明确的依赖文件，可以通过分析代码中的 <code>import</code> 语句推断依赖库：</p>\n<p><strong>工具推荐：</strong></p>\n<ul>\n<li>**<code>pipreqs</code>**：扫描项目目录中的 <code>.py</code> 文件，自动生成 <code>requirements.txt</code>。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pipreqs </span><br><span class=\"line\">pipreqs /path/to/project</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>输出示例：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Flask==2.0.1 requests==2.26.0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>**<code>pyroma</code>**：检查项目结构并推荐依赖。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pyroma pyroma /path/to/project</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>pydeps</code>**：生成依赖图（适合小型项目）。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pydeps pydeps your_project_name</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"安装Github上的仓库\"><a href=\"#安装Github上的仓库\" class=\"headerlink\" title=\"安装Github上的仓库\"></a>安装Github上的仓库</h2><p>以vot-toolkit为例，这是vot测试官方的工具包，每年都有比赛，维护的应该不错。找到了以下几种安装方法</p>\n<h3 id=\"1-直接pip安装\"><a href=\"#1-直接pip安装\" class=\"headerlink\" title=\"1.直接pip安装\"></a>1.直接pip安装</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install git+https://github.com/votchallenge/vot<span class=\"literal\">-toolkit-python</span></span><br></pre></td></tr></table></figure>\n<p>但是可能容易出网络问题</p>\n<h3 id=\"2-使用-SSH-协议安装\"><a href=\"#2-使用-SSH-协议安装\" class=\"headerlink\" title=\"2.使用 SSH 协议安装\"></a>2.使用 SSH 协议安装</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install git+ssh://git@github.com/votchallenge/vot<span class=\"literal\">-toolkit-python</span>.git</span><br></pre></td></tr></table></figure>\n<p><em>注意：需要设置 <a href=\"https://docs.github.com/en/authentication/connecting-to-github-with-ssh\">SSH 密钥</a></em></p>\n<h3 id=\"3-手动克隆后安装\"><a href=\"#3-手动克隆后安装\" class=\"headerlink\" title=\"3.手动克隆后安装\"></a>3.手动克隆后安装</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 手动克隆仓库</span></span><br><span class=\"line\">git clone https://github.com/votchallenge/vot<span class=\"literal\">-toolkit-python</span></span><br><span class=\"line\"><span class=\"comment\"># 2. 进入目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> vot<span class=\"literal\">-toolkit-python</span></span><br><span class=\"line\"><span class=\"comment\"># 3. 从本地安装</span></span><br><span class=\"line\">pip install .</span><br></pre></td></tr></table></figure>\n\n<p>当执行<code>pip install .</code>时，pip 在当前目录查找 <code>setup.py</code> 或 <code>pyproject.toml</code> 文件，所以上述方法对于直接下载zip文件然后解压，再安装也适用。</p>\n<p>与其他安装方式的对比</p>\n<table>\n<thead>\n<tr>\n<th>安装方式</th>\n<th>命令</th>\n<th>适用场景</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>从本地源码安装</strong></td>\n<td><code>pip install .</code></td>\n<td>开发自己的包</td>\n<td>安装当前目录的包</td>\n</tr>\n<tr>\n<td><strong>可编辑模式</strong></td>\n<td><code>pip install -e .</code></td>\n<td>包开发阶段</td>\n<td>创建符号链接，修改代码实时生效</td>\n</tr>\n<tr>\n<td><strong>从 PyPI 安装</strong></td>\n<td><code>pip install package_name</code></td>\n<td>安装公共包</td>\n<td>从官方仓库下载预编译包</td>\n</tr>\n<tr>\n<td><strong>从 GitHub 安装</strong></td>\n<td><code>pip install git+https://...</code></td>\n<td>安装最新开发版</td>\n<td>直接从版本控制安装</td>\n</tr>\n</tbody></table>\n","excerpt":"","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>$Last Edited：2025.07.15&#x2F;22:30$</p>\n<hr>\n<blockquote>\n<p>[!NOTE] 操作环境<br>香橙派4-lts Orange Pi 3.0.6 Buster with Linux 4.4.179-rk3399</p>\n</blockquote>\n<p>参考：<a href=\"https://blog.csdn.net/qq_42571592/article/details/122902266\">Linux安装Python各个版本，这一篇就够了-CSDN博客</a><br><a href=\"https://docs.python.org/zh-cn/3.9/\">3.9.19 Documentation (python.org)</a><br>[技术|如何在 Ubuntu Linux 上安装 Zlib](<a href=\"https://linux.cn/article-13572-1.html\">https://linux.cn/article-13572-1.html</a><br><a href=\"https://www.cnblogs.com/STangQL/p/15647583.html\">Debian 11上安装Python 3.10，并切换系统默认Python版本</a><br>以python3.9.19为例</p>\n<h3 id=\"1-安装依赖包\"><a href=\"#1-安装依赖包\" class=\"headerlink\" title=\"1.安装依赖包\"></a>1.安装依赖包</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel</span><br></pre></td></tr></table></figure>\n<p>（没运行这个）</p>\n<p>后面在另一块派安装的时候因为缺少<code>zlib</code>导致pip没装上[Python-Q&amp;A#缺少zlib模块 No module named ‘zlib’](Python-Q&amp;A#缺少zlib模块 No module named ‘zlib’)，只能安装zlib，再把python重装一遍</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install zlib1g</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt install zlib1g-dev</span><br></pre></td></tr></table></figure>\n<p>所以还是建议检查下依赖包</p>\n<p>上面的安装依赖包指令好像不适用，可以用这个（还没试过）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev libffi-dev liblzma-dev</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-下载Python安装包\"><a href=\"#2-下载Python安装包\" class=\"headerlink\" title=\"2.下载Python安装包\"></a>2.下载Python安装包</h3><p>我下载的是3.9.19，网站<a href=\"https://www.python.org/ftp/python/3.9.19/\">Index of &#x2F;ftp&#x2F;python&#x2F;3.9.19&#x2F;</a><br>复制里面.tgz文件的下载链接：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.python.org/ftp/python/3.9.19/Python-3.9.19.tgz</span><br></pre></td></tr></table></figure>\n<p>在当前目录下载这个安装文件。</p>\n<h3 id=\"3-解压\"><a href=\"#3-解压\" class=\"headerlink\" title=\"3.解压\"></a>3.解压</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf Python-3.9.19.tgz</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-安装\"><a href=\"#4-安装\" class=\"headerlink\" title=\"4.安装\"></a>4.安装</h3><p>进入解压后的文件目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> Python-3.9.19</span><br></pre></td></tr></table></figure>\n\n<p>配置路径：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local --enable-optimizations</span><br></pre></td></tr></table></figure>\n\n<p>编译与安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make altinstall</span><br></pre></td></tr></table></figure>\n\n<p>一般编译安装时间比较长，大概十分钟（如果短可能是出问题了），成功后最终显示的信息如下</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Successfully installed pip-23.0.1 setuptools-58.1.0</span><br></pre></td></tr></table></figure>\n\n<p>如果安装失败，会出现类似</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make: *** [Makefile:1265: install] Error 1</span><br></pre></td></tr></table></figure>\n<p>的错误提示，说明pip没安装，这可能是由于部分依赖包的缺失造成的，如<code>zlib</code>。</p>\n<h3 id=\"5-建立软连接\"><a href=\"#5-建立软连接\" class=\"headerlink\" title=\"5.建立软连接\"></a>5.建立软连接</h3><p>确认一下系统默认的python和pip版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> -l /usr/bin/python* /usr/bin/pip*</span><br><span class=\"line\"><span class=\"comment\"># 或者下面这个</span></span><br><span class=\"line\"><span class=\"built_in\">readlink</span> -f /usr/bin/python </span><br></pre></td></tr></table></figure>\n\n<p>如果软连接已经存在，先删除之前的软连接：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> -l link_name <span class=\"comment\"># 检查软连接指向/权限</span></span><br><span class=\"line\"><span class=\"built_in\">unlink</span> link_name</span><br></pre></td></tr></table></figure>\n<p><code>link_name</code>为软链接路径</p>\n<p>软连接指令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ln</span> -s /usr/local/bin/python3.9 /usr/bin/python</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /usr/local/bin/pip3.9 /usr/bin/pip</span><br></pre></td></tr></table></figure>\n<p>也可以<code>-sf</code>选项强制替换，这样就不用删除之前的</p>\n<p>有多个版本的Python，想切换Python版本时也是这个操作。</p>\n<h3 id=\"6-切换python版本\"><a href=\"#6-切换python版本\" class=\"headerlink\" title=\"6.切换python版本\"></a>6.切换python版本</h3><p>添加替代版本列表：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 2</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> update-alternatives --install /usr/bin/python3 python3 /usr/local/bin/python3.9 1</span><br></pre></td></tr></table></figure>\n\n<p>进行版本切换：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update-alternatives --config python3</span><br></pre></td></tr></table></figure>\n<p>输入前面的序号，回车&lt; Enter &gt;选择</p>\n<h2 id=\"创建虚拟环境\"><a href=\"#创建虚拟环境\" class=\"headerlink\" title=\"创建虚拟环境\"></a>创建虚拟环境</h2><blockquote>\n<p>[!NOTE] 操作环境<br>香橙派4-lts Orange Pi 3.0.6 Bullseye with Linux 5.10.160-rk3399</p>\n</blockquote>\n<h3 id=\"1-使用标准库内置的venv模块\"><a href=\"#1-使用标准库内置的venv模块\" class=\"headerlink\" title=\"1.使用标准库内置的venv模块\"></a>1.使用标准库内置的venv模块</h3><p>创建虚拟环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m venv myenv</span><br></pre></td></tr></table></figure>\n\n<p>激活虚拟环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> /root/myenv/bin/activate</span><br></pre></td></tr></table></figure>\n\n<p>退出环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deactivate</span><br></pre></td></tr></table></figure>\n\n<p>删除环境：<br>删除整个环境的安装目录即可</p>\n<h3 id=\"2-使用conda\"><a href=\"#2-使用conda\" class=\"headerlink\" title=\"2.使用conda\"></a>2.使用conda</h3><p>具体见<a href=\"Conda#%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83\">Conda#虚拟环境</a></p>\n<h2 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h2><h2 id=\"包管理器pip的使用\"><a href=\"#包管理器pip的使用\" class=\"headerlink\" title=\"包管理器pip的使用\"></a>包管理器pip的使用</h2><ol>\n<li>升级pip<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"项目的构建和管理\"><a href=\"#项目的构建和管理\" class=\"headerlink\" title=\"项目的构建和管理\"></a>项目的构建和管理</h2><h3 id=\"1-查看项目的依赖文件\"><a href=\"#1-查看项目的依赖文件\" class=\"headerlink\" title=\"1.查看项目的依赖文件\"></a>1.查看项目的依赖文件</h3><p>大多数 Python 项目会通过文件显式声明依赖项：</p>\n<ul>\n<li><p>**<code>requirements.txt</code>**：最常见格式，可通过 <code>pip install -r requirements.txt</code> 安装依赖。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>setup.py</code>**：使用 <code>setup.py install</code> 或 <code>pip install .</code> 安装依赖。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install .</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>Pipfile</code> &#x2F; <code>Pipfile.lock</code>**：用于 <code>pipenv</code> 管理的项目。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipenv install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>poetry.lock</code> &#x2F; <code>pyproject.toml</code>**：用于 <code>poetry</code> 管理的项目。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">poetry install</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-使用工具扫描代码中的导入语句\"><a href=\"#2-使用工具扫描代码中的导入语句\" class=\"headerlink\" title=\"2.使用工具扫描代码中的导入语句\"></a>2.使用工具扫描代码中的导入语句</h3><p>如果项目没有明确的依赖文件，可以通过分析代码中的 <code>import</code> 语句推断依赖库：</p>\n<p><strong>工具推荐：</strong></p>\n<ul>\n<li>**<code>pipreqs</code>**：扫描项目目录中的 <code>.py</code> 文件，自动生成 <code>requirements.txt</code>。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pipreqs </span><br><span class=\"line\">pipreqs /path/to/project</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>输出示例：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Flask==2.0.1 requests==2.26.0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>**<code>pyroma</code>**：检查项目结构并推荐依赖。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pyroma pyroma /path/to/project</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>**<code>pydeps</code>**：生成依赖图（适合小型项目）。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pydeps pydeps your_project_name</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"安装Github上的仓库\"><a href=\"#安装Github上的仓库\" class=\"headerlink\" title=\"安装Github上的仓库\"></a>安装Github上的仓库</h2><p>以vot-toolkit为例，这是vot测试官方的工具包，每年都有比赛，维护的应该不错。找到了以下几种安装方法</p>\n<h3 id=\"1-直接pip安装\"><a href=\"#1-直接pip安装\" class=\"headerlink\" title=\"1.直接pip安装\"></a>1.直接pip安装</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install git+https://github.com/votchallenge/vot<span class=\"literal\">-toolkit-python</span></span><br></pre></td></tr></table></figure>\n<p>但是可能容易出网络问题</p>\n<h3 id=\"2-使用-SSH-协议安装\"><a href=\"#2-使用-SSH-协议安装\" class=\"headerlink\" title=\"2.使用 SSH 协议安装\"></a>2.使用 SSH 协议安装</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install git+ssh://git@github.com/votchallenge/vot<span class=\"literal\">-toolkit-python</span>.git</span><br></pre></td></tr></table></figure>\n<p><em>注意：需要设置 <a href=\"https://docs.github.com/en/authentication/connecting-to-github-with-ssh\">SSH 密钥</a></em></p>\n<h3 id=\"3-手动克隆后安装\"><a href=\"#3-手动克隆后安装\" class=\"headerlink\" title=\"3.手动克隆后安装\"></a>3.手动克隆后安装</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 手动克隆仓库</span></span><br><span class=\"line\">git clone https://github.com/votchallenge/vot<span class=\"literal\">-toolkit-python</span></span><br><span class=\"line\"><span class=\"comment\"># 2. 进入目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> vot<span class=\"literal\">-toolkit-python</span></span><br><span class=\"line\"><span class=\"comment\"># 3. 从本地安装</span></span><br><span class=\"line\">pip install .</span><br></pre></td></tr></table></figure>\n\n<p>当执行<code>pip install .</code>时，pip 在当前目录查找 <code>setup.py</code> 或 <code>pyproject.toml</code> 文件，所以上述方法对于直接下载zip文件然后解压，再安装也适用。</p>\n<p>与其他安装方式的对比</p>\n<table>\n<thead>\n<tr>\n<th>安装方式</th>\n<th>命令</th>\n<th>适用场景</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>从本地源码安装</strong></td>\n<td><code>pip install .</code></td>\n<td>开发自己的包</td>\n<td>安装当前目录的包</td>\n</tr>\n<tr>\n<td><strong>可编辑模式</strong></td>\n<td><code>pip install -e .</code></td>\n<td>包开发阶段</td>\n<td>创建符号链接，修改代码实时生效</td>\n</tr>\n<tr>\n<td><strong>从 PyPI 安装</strong></td>\n<td><code>pip install package_name</code></td>\n<td>安装公共包</td>\n<td>从官方仓库下载预编译包</td>\n</tr>\n<tr>\n<td><strong>从 GitHub 安装</strong></td>\n<td><code>pip install git+https://...</code></td>\n<td>安装最新开发版</td>\n<td>直接从版本控制安装</td>\n</tr>\n</tbody></table>\n"},{"title":"Python包管理器pip-Q&A","date":"2025-06-01T02:34:58.000Z","updated":"2025-09-04T11:15:51.000Z","_content":"\n## pip下载时报错cannot import name 'html5lib' from（升级pip）\n> [!NOTE] 操作环境\n> Ubuntu-22.04.3 server 树莓派4\n\n参考：[导入错误：无法从 pip._vendor 导入名称“html5lib” – 码微 (mwell.tech)](https://mwell.tech/archives/6403)\n[Ubuntu 20.04 Python 3.10 pip import error - 问 Ubuntu (askubuntu.com)](https://askubuntu.com/questions/1372119/ubuntu-20-04-python-3-10-pip-import-error/1375863)\n[Python3.10版本使用pip显示ImportError: cannot import name 'html5lib' from 'pip._vendor'问题 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/664770225)\n\n错误常发生在python3.10的Ubuntu系统上。\n```bash\nImportError: cannot import name 'html5lib' from 'pip._vendor' (/usr/lib/python3.10/dist-packages/pip/_vendor/__init__.py)\n```\n\n可以尝试使用下面四个指令升级pip：\n```bash\ncurl -sS https://bootstrap.pypa.io/get-pip.py | python3.10\ncurl -sS https://bootstrap.pypa.io/get-pip.py | sudo python3.10\n\ncurl -sS https://bootstrap.pypa.io/get-pip.py | python3\ncurl -sS https://bootstrap.pypa.io/get-pip.py | sudo python3\n```\n这几句指令都是先下载脚本再运行脚本，运行脚本也是从脚本里的网址下载。如果失败可以分成两步执行，都使用网络代理下载。\n```bash\nhttps_proxy=http://127.0.0.1:7890 curl -sSL https://bootstrap.pypa.io/get-pip.py\nhttps_proxy=http://127.0.0.1:7890 python3.10 get-pip.py\n```\n\n## pip下载时报错 error: subprocess-exited-with-error\n#### 1.可能是版本问题，升级。\n```bash\npip install --upgrade pip\npip install --upgrade setuptools\n```\n#### 2.软件包本身的问题\n一般会显示note: This is an issue with the package mentioned above, not pip.\n安装multiprocess库的时候出现过一次，正确安装指令是：\n```bash\npip install multiprocess\n```\n我错打成了：\n```bash\npip insatll multiprocessing\n```\n\n## matplotlib和numpy的错误：进程已结束，退出代码为 -1066598274 (0xC06D007E)\n版本不匹配、文件缺失等导致的，重装几次、安装指定版本等都没解决。\n重装的时候把缓存清理以下就好了：\n```\npip uninstall -y numpy \nconda remove numpy --force\npip cache purge\n```\n\n查看matplotlib与python、numpy的版本依赖关系：[Dependency version policy — Matplotlib 3.11.0.dev1298+g9b4233b22 documentation](https://matplotlib.org/devdocs/devel/min_dep_policy.html)","source":"_posts/2025-06-01-Python包管理器pip-QA.md","raw":"---\ntitle: Python包管理器pip-Q&A\ndate: 2025-06-01 10:34:58\nupdated: 2025-09-04 19:15:51\ncategories:\n  - [服务器&嵌入式平台操作, Q&A问题及解决汇总]\ntags:\npermalink: python包管理器pip-q&a/\n---\n\n## pip下载时报错cannot import name 'html5lib' from（升级pip）\n> [!NOTE] 操作环境\n> Ubuntu-22.04.3 server 树莓派4\n\n参考：[导入错误：无法从 pip._vendor 导入名称“html5lib” – 码微 (mwell.tech)](https://mwell.tech/archives/6403)\n[Ubuntu 20.04 Python 3.10 pip import error - 问 Ubuntu (askubuntu.com)](https://askubuntu.com/questions/1372119/ubuntu-20-04-python-3-10-pip-import-error/1375863)\n[Python3.10版本使用pip显示ImportError: cannot import name 'html5lib' from 'pip._vendor'问题 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/664770225)\n\n错误常发生在python3.10的Ubuntu系统上。\n```bash\nImportError: cannot import name 'html5lib' from 'pip._vendor' (/usr/lib/python3.10/dist-packages/pip/_vendor/__init__.py)\n```\n\n可以尝试使用下面四个指令升级pip：\n```bash\ncurl -sS https://bootstrap.pypa.io/get-pip.py | python3.10\ncurl -sS https://bootstrap.pypa.io/get-pip.py | sudo python3.10\n\ncurl -sS https://bootstrap.pypa.io/get-pip.py | python3\ncurl -sS https://bootstrap.pypa.io/get-pip.py | sudo python3\n```\n这几句指令都是先下载脚本再运行脚本，运行脚本也是从脚本里的网址下载。如果失败可以分成两步执行，都使用网络代理下载。\n```bash\nhttps_proxy=http://127.0.0.1:7890 curl -sSL https://bootstrap.pypa.io/get-pip.py\nhttps_proxy=http://127.0.0.1:7890 python3.10 get-pip.py\n```\n\n## pip下载时报错 error: subprocess-exited-with-error\n#### 1.可能是版本问题，升级。\n```bash\npip install --upgrade pip\npip install --upgrade setuptools\n```\n#### 2.软件包本身的问题\n一般会显示note: This is an issue with the package mentioned above, not pip.\n安装multiprocess库的时候出现过一次，正确安装指令是：\n```bash\npip install multiprocess\n```\n我错打成了：\n```bash\npip insatll multiprocessing\n```\n\n## matplotlib和numpy的错误：进程已结束，退出代码为 -1066598274 (0xC06D007E)\n版本不匹配、文件缺失等导致的，重装几次、安装指定版本等都没解决。\n重装的时候把缓存清理以下就好了：\n```\npip uninstall -y numpy \nconda remove numpy --force\npip cache purge\n```\n\n查看matplotlib与python、numpy的版本依赖关系：[Dependency version policy — Matplotlib 3.11.0.dev1298+g9b4233b22 documentation](https://matplotlib.org/devdocs/devel/min_dep_policy.html)","slug":"2025-06-01-Python包管理器pip-QA","published":1,"__permalink":"python包管理器pip-q&a/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0n1000czovdd1nyfuo1","content":"<h2 id=\"pip下载时报错cannot-import-name-‘html5lib’-from（升级pip）\"><a href=\"#pip下载时报错cannot-import-name-‘html5lib’-from（升级pip）\" class=\"headerlink\" title=\"pip下载时报错cannot import name ‘html5lib’ from（升级pip）\"></a>pip下载时报错cannot import name ‘html5lib’ from（升级pip）</h2><blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu-22.04.3 server 树莓派4</p>\n</blockquote>\n<p>参考：<a href=\"https://mwell.tech/archives/6403\">导入错误：无法从 pip._vendor 导入名称“html5lib” – 码微 (mwell.tech)</a><br><a href=\"https://askubuntu.com/questions/1372119/ubuntu-20-04-python-3-10-pip-import-error/1375863\">Ubuntu 20.04 Python 3.10 pip import error - 问 Ubuntu (askubuntu.com)</a><br><a href=\"https://zhuanlan.zhihu.com/p/664770225\">Python3.10版本使用pip显示ImportError: cannot import name ‘html5lib’ from ‘pip._vendor’问题 - 知乎 (zhihu.com)</a></p>\n<p>错误常发生在python3.10的Ubuntu系统上。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ImportError: cannot import name <span class=\"string\">&#x27;html5lib&#x27;</span> from <span class=\"string\">&#x27;pip._vendor&#x27;</span> (/usr/lib/python3.10/dist-packages/pip/_vendor/__init__.py)</span><br></pre></td></tr></table></figure>\n\n<p>可以尝试使用下面四个指令升级pip：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sS https://bootstrap.pypa.io/get-pip.py | python3.10</span><br><span class=\"line\">curl -sS https://bootstrap.pypa.io/get-pip.py | <span class=\"built_in\">sudo</span> python3.10</span><br><span class=\"line\"></span><br><span class=\"line\">curl -sS https://bootstrap.pypa.io/get-pip.py | python3</span><br><span class=\"line\">curl -sS https://bootstrap.pypa.io/get-pip.py | <span class=\"built_in\">sudo</span> python3</span><br></pre></td></tr></table></figure>\n<p>这几句指令都是先下载脚本再运行脚本，运行脚本也是从脚本里的网址下载。如果失败可以分成两步执行，都使用网络代理下载。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https_proxy=http://127.0.0.1:7890 curl -sSL https://bootstrap.pypa.io/get-pip.py</span><br><span class=\"line\">https_proxy=http://127.0.0.1:7890 python3.10 get-pip.py</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"pip下载时报错-error-subprocess-exited-with-error\"><a href=\"#pip下载时报错-error-subprocess-exited-with-error\" class=\"headerlink\" title=\"pip下载时报错 error: subprocess-exited-with-error\"></a>pip下载时报错 error: subprocess-exited-with-error</h2><h4 id=\"1-可能是版本问题，升级。\"><a href=\"#1-可能是版本问题，升级。\" class=\"headerlink\" title=\"1.可能是版本问题，升级。\"></a>1.可能是版本问题，升级。</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install --upgrade pip</span><br><span class=\"line\">pip install --upgrade setuptools</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-软件包本身的问题\"><a href=\"#2-软件包本身的问题\" class=\"headerlink\" title=\"2.软件包本身的问题\"></a>2.软件包本身的问题</h4><p>一般会显示note: This is an issue with the package mentioned above, not pip.<br>安装multiprocess库的时候出现过一次，正确安装指令是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install multiprocess</span><br></pre></td></tr></table></figure>\n<p>我错打成了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip insatll multiprocessing</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"matplotlib和numpy的错误：进程已结束，退出代码为-1066598274-0xC06D007E\"><a href=\"#matplotlib和numpy的错误：进程已结束，退出代码为-1066598274-0xC06D007E\" class=\"headerlink\" title=\"matplotlib和numpy的错误：进程已结束，退出代码为 -1066598274 (0xC06D007E)\"></a>matplotlib和numpy的错误：进程已结束，退出代码为 -1066598274 (0xC06D007E)</h2><p>版本不匹配、文件缺失等导致的，重装几次、安装指定版本等都没解决。<br>重装的时候把缓存清理以下就好了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip uninstall -y numpy </span><br><span class=\"line\">conda remove numpy --force</span><br><span class=\"line\">pip cache purge</span><br></pre></td></tr></table></figure>\n\n<p>查看matplotlib与python、numpy的版本依赖关系：<a href=\"https://matplotlib.org/devdocs/devel/min_dep_policy.html\">Dependency version policy — Matplotlib 3.11.0.dev1298+g9b4233b22 documentation</a></p>\n","excerpt":"","more":"<h2 id=\"pip下载时报错cannot-import-name-‘html5lib’-from（升级pip）\"><a href=\"#pip下载时报错cannot-import-name-‘html5lib’-from（升级pip）\" class=\"headerlink\" title=\"pip下载时报错cannot import name ‘html5lib’ from（升级pip）\"></a>pip下载时报错cannot import name ‘html5lib’ from（升级pip）</h2><blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu-22.04.3 server 树莓派4</p>\n</blockquote>\n<p>参考：<a href=\"https://mwell.tech/archives/6403\">导入错误：无法从 pip._vendor 导入名称“html5lib” – 码微 (mwell.tech)</a><br><a href=\"https://askubuntu.com/questions/1372119/ubuntu-20-04-python-3-10-pip-import-error/1375863\">Ubuntu 20.04 Python 3.10 pip import error - 问 Ubuntu (askubuntu.com)</a><br><a href=\"https://zhuanlan.zhihu.com/p/664770225\">Python3.10版本使用pip显示ImportError: cannot import name ‘html5lib’ from ‘pip._vendor’问题 - 知乎 (zhihu.com)</a></p>\n<p>错误常发生在python3.10的Ubuntu系统上。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ImportError: cannot import name <span class=\"string\">&#x27;html5lib&#x27;</span> from <span class=\"string\">&#x27;pip._vendor&#x27;</span> (/usr/lib/python3.10/dist-packages/pip/_vendor/__init__.py)</span><br></pre></td></tr></table></figure>\n\n<p>可以尝试使用下面四个指令升级pip：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sS https://bootstrap.pypa.io/get-pip.py | python3.10</span><br><span class=\"line\">curl -sS https://bootstrap.pypa.io/get-pip.py | <span class=\"built_in\">sudo</span> python3.10</span><br><span class=\"line\"></span><br><span class=\"line\">curl -sS https://bootstrap.pypa.io/get-pip.py | python3</span><br><span class=\"line\">curl -sS https://bootstrap.pypa.io/get-pip.py | <span class=\"built_in\">sudo</span> python3</span><br></pre></td></tr></table></figure>\n<p>这几句指令都是先下载脚本再运行脚本，运行脚本也是从脚本里的网址下载。如果失败可以分成两步执行，都使用网络代理下载。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https_proxy=http://127.0.0.1:7890 curl -sSL https://bootstrap.pypa.io/get-pip.py</span><br><span class=\"line\">https_proxy=http://127.0.0.1:7890 python3.10 get-pip.py</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"pip下载时报错-error-subprocess-exited-with-error\"><a href=\"#pip下载时报错-error-subprocess-exited-with-error\" class=\"headerlink\" title=\"pip下载时报错 error: subprocess-exited-with-error\"></a>pip下载时报错 error: subprocess-exited-with-error</h2><h4 id=\"1-可能是版本问题，升级。\"><a href=\"#1-可能是版本问题，升级。\" class=\"headerlink\" title=\"1.可能是版本问题，升级。\"></a>1.可能是版本问题，升级。</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install --upgrade pip</span><br><span class=\"line\">pip install --upgrade setuptools</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-软件包本身的问题\"><a href=\"#2-软件包本身的问题\" class=\"headerlink\" title=\"2.软件包本身的问题\"></a>2.软件包本身的问题</h4><p>一般会显示note: This is an issue with the package mentioned above, not pip.<br>安装multiprocess库的时候出现过一次，正确安装指令是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install multiprocess</span><br></pre></td></tr></table></figure>\n<p>我错打成了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip insatll multiprocessing</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"matplotlib和numpy的错误：进程已结束，退出代码为-1066598274-0xC06D007E\"><a href=\"#matplotlib和numpy的错误：进程已结束，退出代码为-1066598274-0xC06D007E\" class=\"headerlink\" title=\"matplotlib和numpy的错误：进程已结束，退出代码为 -1066598274 (0xC06D007E)\"></a>matplotlib和numpy的错误：进程已结束，退出代码为 -1066598274 (0xC06D007E)</h2><p>版本不匹配、文件缺失等导致的，重装几次、安装指定版本等都没解决。<br>重装的时候把缓存清理以下就好了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip uninstall -y numpy </span><br><span class=\"line\">conda remove numpy --force</span><br><span class=\"line\">pip cache purge</span><br></pre></td></tr></table></figure>\n\n<p>查看matplotlib与python、numpy的版本依赖关系：<a href=\"https://matplotlib.org/devdocs/devel/min_dep_policy.html\">Dependency version policy — Matplotlib 3.11.0.dev1298+g9b4233b22 documentation</a></p>\n"},{"title":"Q&A 问题及解决方法","date":"2025-06-01T02:34:58.000Z","updated":"2024-04-17T12:38:37.000Z","_content":"\n##  conda在命令行中的使用\n打开环境变量设置，选择path-编辑-新建，找到anaconda的目录添加进去。\n![conda环境变量.png](/images/conda环境变量.png)","source":"_posts/2025-06-01-QA-问题及解决方法.md","raw":"---\ntitle: Q&A 问题及解决方法\ndate: 2025-06-01 10:34:58\nupdated: 2024-04-17 20:38:37\ncategories:\n  - [Windows主机操作]\ntags:\npermalink: q&a-问题及解决方法/\n---\n\n##  conda在命令行中的使用\n打开环境变量设置，选择path-编辑-新建，找到anaconda的目录添加进去。\n![conda环境变量.png](/images/conda环境变量.png)","slug":"2025-06-01-QA-问题及解决方法","published":1,"__permalink":"q&a-问题及解决方法/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0n2000ezovd75bz8sp7","content":"<h2 id=\"conda在命令行中的使用\"><a href=\"#conda在命令行中的使用\" class=\"headerlink\" title=\"conda在命令行中的使用\"></a>conda在命令行中的使用</h2><p>打开环境变量设置，选择path-编辑-新建，找到anaconda的目录添加进去。<br><img src=\"/418blog/images/conda%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png\" alt=\"conda环境变量.png\"></p>\n","excerpt":"","more":"<h2 id=\"conda在命令行中的使用\"><a href=\"#conda在命令行中的使用\" class=\"headerlink\" title=\"conda在命令行中的使用\"></a>conda在命令行中的使用</h2><p>打开环境变量设置，选择path-编辑-新建，找到anaconda的目录添加进去。<br><img src=\"/418blog/images/conda%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png\" alt=\"conda环境变量.png\"></p>\n"},{"title":"SSH","date":"2025-06-01T02:34:58.000Z","updated":"2025-05-31T03:09:06.000Z","_content":"\n## SSH免密登录\n参考：[Linux多台机器之间的免密登录设置 - 指尖下的世界 - 博客园](https://www.cnblogs.com/luzhanshi/p/13369797.html)\n\n1. 可以先做一个`主机ip与名称的映射`，方便管理。\n```bash\nvim /etc/hosts\n```\n\n在文件内写入：\n```text\n192.168.0.110 pi1\n192.168.0.111 pi2\n192.168.0.112 pi3\n192.168.0.113 pi4\n```\n\n2. 生成公钥\n```bash\nssh-keygen -t rsa\n```\n\n3. 将公钥复制到所有需要免密登录的目标主机上\n```bash\nssh-copy-id -i ~/.ssh/id_rsa.pub user@hostname\n```\n- `-i` 指定公钥文件的路径。\n- `user@hostname` 是目标主机的用户名和主机名\n比如在pi4上运行上述指令，目标主机为pi3，运行成功后目标主机会出现文件\n==/root/.ssh/authorized_keys==，完成后可以从pi4上登录pi3。\n\n4. 测试\n```bash\nssh hostname date\n```\n不需要输入密码即成功\n\n如：\n```text\nroot@pi4:~# ssh pi3 date\nSun 22 Dec 2024 03:08:44 PM UTC\n```\n\n## 变更SSH密钥的方法\n### **Q**：\n实现pi2主机的ssh免密登录之后，更改pi2主机的系统镜像，再次复制密钥时出现以下问题。如何解决？ \n```bash\nroot@orangepi4-lts:~# ssh-copy-id -i ~/.ssh/id_rsa.pub root@pi2 /usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: \"/root/.ssh/id_rsa.pub\" /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed /usr/bin/ssh-copy-id: ERROR: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ ERROR: @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @ ERROR: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ ERROR: IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! ERROR: Someone could be eavesdropping on you right now (man-in-the-middle attack)! ERROR: It is also possible that a host key has just been changed. ERROR: The fingerprint for the ECDSA key sent by the remote host is ERROR: SHA256:KnYcisA4EXVw70Qj4A36IC2/OESREd9X4NsgLxfjmMY. ERROR: Please contact your system administrator. ERROR: Add correct host key in /root/.ssh/known_hosts to get rid of this message. ERROR: Offending ECDSA key in /root/.ssh/known_hosts:2 ERROR: remove with: ERROR: ssh-keygen -f \"/root/.ssh/known_hosts\" -R \"pi2\" ERROR: ECDSA host key for pi2 has changed and you have requested strict checking. ERROR: Host key verification failed.\n```\n### **DeepSeek**：\n出现该错误是因为更换系统镜像后，pi2 主机的 SSH 密钥发生了变化，而本地保存的旧密钥记录与新的不匹配。以下是解决方法：\n\n==解决方案分步说明：==\n\n1. **清除旧的密钥记录**\n```bash\nssh-keygen -f \"/root/.ssh/known_hosts\" -R \"pi2\"\n```\n   这会从 `known_hosts` 文件中删除所有与 `pi2` 关联的旧密钥记录。\n\n2. **重新尝试复制公钥**\n```bash\nssh-copy-id -i ~/.ssh/id_rsa.pub root@pi2\n```\n系统会提示你确认新主机的指纹（类似 `Are you sure you want to continue connecting (yes/no/[fingerprint])?`），输入 `yes` 并回车。\n\n3. **验证免密登录**\n```bash\nssh root@pi2\n```\n此时应该能无需密码直接登录。\n\n==关键原因：==\n\n- **主机密钥变更**：重装系统会生成新的 SSH 主机密钥，导致本地记录的旧密钥失效。\n- **SSH 安全机制**：SSH 默认会检查主机密钥，防止中间人攻击，因此需要手动确认新密钥。\n\n==扩展建议：==\n\n- **持久化主机密钥**：如果频繁重装系统，可备份 `/etc/ssh/ssh_host_*` 密钥文件，重装后恢复以避免此问题。\n- **使用固定IP或域名**：确保 `pi2` 的解析地址稳定，避免因IP变化导致密钥关联错误。\n\n### **Q**：\n弹出一系列警告，解释一下：\n```bash\nroot@orangepi4-lts:~# ssh-copy-id -i ~/.ssh/id_rsa.pub root@pi2 /usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: \"/root/.ssh/id_rsa.pub\" The authenticity of host 'pi2 (192.168.0.111)' can't be established. ECDSA key fingerprint is SHA256:KnYcisA4EXVw70Qj4A36IC2/OESREd9X4NsgLxfjmMY. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: the ECDSA host key for 'pi2' differs from the key for the IP address '192.168.0.111' Offending key for IP in /root/.ssh/known_hosts:2 Are you sure you want to continue connecting (yes/no)? yes /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed Warning: the ECDSA host key for 'pi2' differs from the key for the IP address '192.168.0.111' Offending key for IP in /root/.ssh/known_hosts:2 Matching host key in /root/.ssh/known_hosts:6 Are you sure you want to continue connecting (yes/no)? yes /usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys Warning: the ECDSA host key for 'pi2' differs from the key for the IP address '192.168.0.111' Offending key for IP in /root/.ssh/known_hosts:2 Matching host key in /root/.ssh/known_hosts:6 Are you sure you want to continue connecting (yes/no)? yes\n```\n\n### **DeepSeek**：\n==问题解释：==\n你遇到的警告是 **SSH 双重验证冲突**导致的，具体原因如下：\n\n1. **主机密钥与IP密钥不匹配**\n- 你之前可能通过 **IP地址（192.168.0.111）** 连接过这台主机，而此次通过 **主机名（pi2）** 连接。\n- 系统在 `known_hosts` 文件中记录了 **两种身份标识**（主机名 `pi2` 和 IP 地址 `192.168.0.111`），但两者的密钥因系统镜像更换而不再匹配。\n\n2. **`known_hosts` 文件中的冲突条目**\n- 警告中提到的 `Offending key for IP in /root/.ssh/known_hosts:2` 表示第 2 行是 IP 地址的旧密钥。\n- `Matching host key in /root/.ssh/known_hosts:6` 表示第 6 行是主机名 `pi2` 的新密钥。\n- SSH 发现同一个 IP 对应的密钥在不同记录中不一致，触发安全警告。\n\n==解决方案：==\n彻底清除 `pi2` 相关的所有旧密钥记录，步骤如下：\n\n1. **删除主机名和IP的旧记录**\n```bash\nssh-keygen -f ~/.ssh/known_hosts -R \"pi2\"          # 删除主机名记录\nssh-keygen -f ~/.ssh/known_hosts -R \"192.168.0.111\" # 删除IP地址记录\n```\n\n2. **重新执行 `ssh-copy-id`**\n```bash\nssh-copy-id -i ~/.ssh/id_rsa.pub root@pi2\n```\n当提示 `Are you sure you want to continue connecting (yes/no)?` 时，输入 `yes`\n\n3. **验证连接**\n```bash\nssh root@pi2\n```\n此时应直接登录，不再出现警告。\n\n==根本原因总结：==\n\n| 现象                 | 原因                              | 解决方案     |\n| ------------------ | ------------------------------- | -------- |\n| `Host key differs` | 主机名和IP在 `known_hosts` 中记录了不同的密钥 | 清除所有相关条目 |\n| 多次确认提示             | SSH 检测到新旧密钥交替冲突                 | 统一密钥记录   |\n\n## `rm -rf ~/.ssh/*` 清除配置后恢复\n$Last Edited：2025.05.31/11:09$\n___\n\n1. 重建 ~/.ssh 目录（确保权限正确）\n```bash\nmkdir -p ~/.ssh              # 如果目录不存在，则创建 \nchmod 700 ~/.ssh             # SSH要求目录权限必须是 700\n```\n\n2. 重新生成 SSH 密钥对\n\n```bash\nssh-keygen -t ed25519 -f ~/.ssh/id_rsa  # 更推荐 ed25519 算法（比 RSA 更安全）\n```\n\n（或继续用 RSA 算法）\n```bash\nssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa\n```\n-t ed25519：更安全、更快的密钥类型（推荐）。\n-b 4096：如果是 RSA，设置更强的密钥长度（默认 3072）。\n➡ 按 Enter 直接跳过密码（SSH 密钥对密码是可选的）\n\n3. 修复文件权限\n```bash\nchmod 600 ~/.ssh/id_rsa       # 私钥必须 600（仅自己可读写） \nchmod 644 ~/.ssh/id_rsa.pub   # 公钥可以 644（自己可读写，其他人可读）\n```\n\n✅ 验证权限是否正确：\n```bash\nls -la ~/.ssh/\n```\n\n正确输出示例：\n```text\n-rw------- 1 orangepi orangepi 2602 May 31 12:34 id_rsa      # 600 \n-rw-r--r-- 1 orangepi orangepi  572 May 31 12:34 id_rsa.pub  # 644\n```\n\n4. 重新部署公钥到目标服务器（如 pi2）\n```bash\nssh-copy-id -i ~/.ssh/id_rsa.pub orangepi@pi2\n```\n\n✋ 如果 ssh-copy-id 无法使用（需要输入密码），可以手动：\n\n```bash\ncat ~/.ssh/id_rsa.pub | ssh orangepi@pi2 \"mkdir -p ~/.ssh; chmod 700 ~/.ssh; cat >> ~/.ssh/authorized_keys; chmod 600 ~/.ssh/authorized_keys\"\n```\n\n5. 测试 SSH 免密登录\n```bash\nssh orangepi@pi2\n```\n✅ 如果成功，说明修复完成！","source":"_posts/2025-06-01-SSH.md","raw":"---\ntitle: SSH\ndate: 2025-06-01 10:34:58\nupdated: 2025-05-31 11:09:06\ncategories:\n  - [服务器&嵌入式平台操作, 基础配置]\ntags:\npermalink: ssh/\n---\n\n## SSH免密登录\n参考：[Linux多台机器之间的免密登录设置 - 指尖下的世界 - 博客园](https://www.cnblogs.com/luzhanshi/p/13369797.html)\n\n1. 可以先做一个`主机ip与名称的映射`，方便管理。\n```bash\nvim /etc/hosts\n```\n\n在文件内写入：\n```text\n192.168.0.110 pi1\n192.168.0.111 pi2\n192.168.0.112 pi3\n192.168.0.113 pi4\n```\n\n2. 生成公钥\n```bash\nssh-keygen -t rsa\n```\n\n3. 将公钥复制到所有需要免密登录的目标主机上\n```bash\nssh-copy-id -i ~/.ssh/id_rsa.pub user@hostname\n```\n- `-i` 指定公钥文件的路径。\n- `user@hostname` 是目标主机的用户名和主机名\n比如在pi4上运行上述指令，目标主机为pi3，运行成功后目标主机会出现文件\n==/root/.ssh/authorized_keys==，完成后可以从pi4上登录pi3。\n\n4. 测试\n```bash\nssh hostname date\n```\n不需要输入密码即成功\n\n如：\n```text\nroot@pi4:~# ssh pi3 date\nSun 22 Dec 2024 03:08:44 PM UTC\n```\n\n## 变更SSH密钥的方法\n### **Q**：\n实现pi2主机的ssh免密登录之后，更改pi2主机的系统镜像，再次复制密钥时出现以下问题。如何解决？ \n```bash\nroot@orangepi4-lts:~# ssh-copy-id -i ~/.ssh/id_rsa.pub root@pi2 /usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: \"/root/.ssh/id_rsa.pub\" /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed /usr/bin/ssh-copy-id: ERROR: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ ERROR: @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @ ERROR: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ ERROR: IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! ERROR: Someone could be eavesdropping on you right now (man-in-the-middle attack)! ERROR: It is also possible that a host key has just been changed. ERROR: The fingerprint for the ECDSA key sent by the remote host is ERROR: SHA256:KnYcisA4EXVw70Qj4A36IC2/OESREd9X4NsgLxfjmMY. ERROR: Please contact your system administrator. ERROR: Add correct host key in /root/.ssh/known_hosts to get rid of this message. ERROR: Offending ECDSA key in /root/.ssh/known_hosts:2 ERROR: remove with: ERROR: ssh-keygen -f \"/root/.ssh/known_hosts\" -R \"pi2\" ERROR: ECDSA host key for pi2 has changed and you have requested strict checking. ERROR: Host key verification failed.\n```\n### **DeepSeek**：\n出现该错误是因为更换系统镜像后，pi2 主机的 SSH 密钥发生了变化，而本地保存的旧密钥记录与新的不匹配。以下是解决方法：\n\n==解决方案分步说明：==\n\n1. **清除旧的密钥记录**\n```bash\nssh-keygen -f \"/root/.ssh/known_hosts\" -R \"pi2\"\n```\n   这会从 `known_hosts` 文件中删除所有与 `pi2` 关联的旧密钥记录。\n\n2. **重新尝试复制公钥**\n```bash\nssh-copy-id -i ~/.ssh/id_rsa.pub root@pi2\n```\n系统会提示你确认新主机的指纹（类似 `Are you sure you want to continue connecting (yes/no/[fingerprint])?`），输入 `yes` 并回车。\n\n3. **验证免密登录**\n```bash\nssh root@pi2\n```\n此时应该能无需密码直接登录。\n\n==关键原因：==\n\n- **主机密钥变更**：重装系统会生成新的 SSH 主机密钥，导致本地记录的旧密钥失效。\n- **SSH 安全机制**：SSH 默认会检查主机密钥，防止中间人攻击，因此需要手动确认新密钥。\n\n==扩展建议：==\n\n- **持久化主机密钥**：如果频繁重装系统，可备份 `/etc/ssh/ssh_host_*` 密钥文件，重装后恢复以避免此问题。\n- **使用固定IP或域名**：确保 `pi2` 的解析地址稳定，避免因IP变化导致密钥关联错误。\n\n### **Q**：\n弹出一系列警告，解释一下：\n```bash\nroot@orangepi4-lts:~# ssh-copy-id -i ~/.ssh/id_rsa.pub root@pi2 /usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: \"/root/.ssh/id_rsa.pub\" The authenticity of host 'pi2 (192.168.0.111)' can't be established. ECDSA key fingerprint is SHA256:KnYcisA4EXVw70Qj4A36IC2/OESREd9X4NsgLxfjmMY. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: the ECDSA host key for 'pi2' differs from the key for the IP address '192.168.0.111' Offending key for IP in /root/.ssh/known_hosts:2 Are you sure you want to continue connecting (yes/no)? yes /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed Warning: the ECDSA host key for 'pi2' differs from the key for the IP address '192.168.0.111' Offending key for IP in /root/.ssh/known_hosts:2 Matching host key in /root/.ssh/known_hosts:6 Are you sure you want to continue connecting (yes/no)? yes /usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys Warning: the ECDSA host key for 'pi2' differs from the key for the IP address '192.168.0.111' Offending key for IP in /root/.ssh/known_hosts:2 Matching host key in /root/.ssh/known_hosts:6 Are you sure you want to continue connecting (yes/no)? yes\n```\n\n### **DeepSeek**：\n==问题解释：==\n你遇到的警告是 **SSH 双重验证冲突**导致的，具体原因如下：\n\n1. **主机密钥与IP密钥不匹配**\n- 你之前可能通过 **IP地址（192.168.0.111）** 连接过这台主机，而此次通过 **主机名（pi2）** 连接。\n- 系统在 `known_hosts` 文件中记录了 **两种身份标识**（主机名 `pi2` 和 IP 地址 `192.168.0.111`），但两者的密钥因系统镜像更换而不再匹配。\n\n2. **`known_hosts` 文件中的冲突条目**\n- 警告中提到的 `Offending key for IP in /root/.ssh/known_hosts:2` 表示第 2 行是 IP 地址的旧密钥。\n- `Matching host key in /root/.ssh/known_hosts:6` 表示第 6 行是主机名 `pi2` 的新密钥。\n- SSH 发现同一个 IP 对应的密钥在不同记录中不一致，触发安全警告。\n\n==解决方案：==\n彻底清除 `pi2` 相关的所有旧密钥记录，步骤如下：\n\n1. **删除主机名和IP的旧记录**\n```bash\nssh-keygen -f ~/.ssh/known_hosts -R \"pi2\"          # 删除主机名记录\nssh-keygen -f ~/.ssh/known_hosts -R \"192.168.0.111\" # 删除IP地址记录\n```\n\n2. **重新执行 `ssh-copy-id`**\n```bash\nssh-copy-id -i ~/.ssh/id_rsa.pub root@pi2\n```\n当提示 `Are you sure you want to continue connecting (yes/no)?` 时，输入 `yes`\n\n3. **验证连接**\n```bash\nssh root@pi2\n```\n此时应直接登录，不再出现警告。\n\n==根本原因总结：==\n\n| 现象                 | 原因                              | 解决方案     |\n| ------------------ | ------------------------------- | -------- |\n| `Host key differs` | 主机名和IP在 `known_hosts` 中记录了不同的密钥 | 清除所有相关条目 |\n| 多次确认提示             | SSH 检测到新旧密钥交替冲突                 | 统一密钥记录   |\n\n## `rm -rf ~/.ssh/*` 清除配置后恢复\n$Last Edited：2025.05.31/11:09$\n___\n\n1. 重建 ~/.ssh 目录（确保权限正确）\n```bash\nmkdir -p ~/.ssh              # 如果目录不存在，则创建 \nchmod 700 ~/.ssh             # SSH要求目录权限必须是 700\n```\n\n2. 重新生成 SSH 密钥对\n\n```bash\nssh-keygen -t ed25519 -f ~/.ssh/id_rsa  # 更推荐 ed25519 算法（比 RSA 更安全）\n```\n\n（或继续用 RSA 算法）\n```bash\nssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa\n```\n-t ed25519：更安全、更快的密钥类型（推荐）。\n-b 4096：如果是 RSA，设置更强的密钥长度（默认 3072）。\n➡ 按 Enter 直接跳过密码（SSH 密钥对密码是可选的）\n\n3. 修复文件权限\n```bash\nchmod 600 ~/.ssh/id_rsa       # 私钥必须 600（仅自己可读写） \nchmod 644 ~/.ssh/id_rsa.pub   # 公钥可以 644（自己可读写，其他人可读）\n```\n\n✅ 验证权限是否正确：\n```bash\nls -la ~/.ssh/\n```\n\n正确输出示例：\n```text\n-rw------- 1 orangepi orangepi 2602 May 31 12:34 id_rsa      # 600 \n-rw-r--r-- 1 orangepi orangepi  572 May 31 12:34 id_rsa.pub  # 644\n```\n\n4. 重新部署公钥到目标服务器（如 pi2）\n```bash\nssh-copy-id -i ~/.ssh/id_rsa.pub orangepi@pi2\n```\n\n✋ 如果 ssh-copy-id 无法使用（需要输入密码），可以手动：\n\n```bash\ncat ~/.ssh/id_rsa.pub | ssh orangepi@pi2 \"mkdir -p ~/.ssh; chmod 700 ~/.ssh; cat >> ~/.ssh/authorized_keys; chmod 600 ~/.ssh/authorized_keys\"\n```\n\n5. 测试 SSH 免密登录\n```bash\nssh orangepi@pi2\n```\n✅ 如果成功，说明修复完成！","slug":"2025-06-01-SSH","published":1,"__permalink":"ssh/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0n3000gzovdbrfhb7xv","content":"<h2 id=\"SSH免密登录\"><a href=\"#SSH免密登录\" class=\"headerlink\" title=\"SSH免密登录\"></a>SSH免密登录</h2><p>参考：<a href=\"https://www.cnblogs.com/luzhanshi/p/13369797.html\">Linux多台机器之间的免密登录设置 - 指尖下的世界 - 博客园</a></p>\n<ol>\n<li>可以先做一个<code>主机ip与名称的映射</code>，方便管理。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/hosts</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>在文件内写入：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.0.110 pi1</span><br><span class=\"line\">192.168.0.111 pi2</span><br><span class=\"line\">192.168.0.112 pi3</span><br><span class=\"line\">192.168.0.113 pi4</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>生成公钥</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将公钥复制到所有需要免密登录的目标主机上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id -i ~/.ssh/id_rsa.pub user@hostname</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li><code>-i</code> 指定公钥文件的路径。</li>\n<li><code>user@hostname</code> 是目标主机的用户名和主机名<br>比如在pi4上运行上述指令，目标主机为pi3，运行成功后目标主机会出现文件<br>&#x3D;&#x3D;&#x2F;root&#x2F;.ssh&#x2F;authorized_keys&#x3D;&#x3D;，完成后可以从pi4上登录pi3。</li>\n</ul>\n<ol start=\"4\">\n<li>测试<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh hostname <span class=\"built_in\">date</span></span><br></pre></td></tr></table></figure>\n不需要输入密码即成功</li>\n</ol>\n<p>如：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@pi4:~# ssh pi3 date</span><br><span class=\"line\">Sun 22 Dec 2024 03:08:44 PM UTC</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变更SSH密钥的方法\"><a href=\"#变更SSH密钥的方法\" class=\"headerlink\" title=\"变更SSH密钥的方法\"></a>变更SSH密钥的方法</h2><h3 id=\"Q：\"><a href=\"#Q：\" class=\"headerlink\" title=\"Q：\"></a><strong>Q</strong>：</h3><p>实现pi2主机的ssh免密登录之后，更改pi2主机的系统镜像，再次复制密钥时出现以下问题。如何解决？ </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@orangepi4-lts:~# ssh-copy-id -i ~/.ssh/id_rsa.pub root@pi2 /usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: <span class=\"string\">&quot;/root/.ssh/id_rsa.pub&quot;</span> /usr/bin/ssh-copy-id: INFO: attempting to <span class=\"built_in\">log</span> <span class=\"keyword\">in</span> with the new key(s), to filter out any that are already installed /usr/bin/ssh-copy-id: ERROR: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ ERROR: @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @ ERROR: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ ERROR: IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! ERROR: Someone could be eavesdropping on you right now (man-in-the-middle attack)! ERROR: It is also possible that a host key has just been changed. ERROR: The fingerprint <span class=\"keyword\">for</span> the ECDSA key sent by the remote host is ERROR: SHA256:KnYcisA4EXVw70Qj4A36IC2/OESREd9X4NsgLxfjmMY. ERROR: Please contact your system administrator. ERROR: Add correct host key <span class=\"keyword\">in</span> /root/.ssh/known_hosts to get rid of this message. ERROR: Offending ECDSA key <span class=\"keyword\">in</span> /root/.ssh/known_hosts:2 ERROR: remove with: ERROR: ssh-keygen -f <span class=\"string\">&quot;/root/.ssh/known_hosts&quot;</span> -R <span class=\"string\">&quot;pi2&quot;</span> ERROR: ECDSA host key <span class=\"keyword\">for</span> pi2 has changed and you have requested strict checking. ERROR: Host key verification failed.</span><br></pre></td></tr></table></figure>\n<h3 id=\"DeepSeek：\"><a href=\"#DeepSeek：\" class=\"headerlink\" title=\"DeepSeek：\"></a><strong>DeepSeek</strong>：</h3><p>出现该错误是因为更换系统镜像后，pi2 主机的 SSH 密钥发生了变化，而本地保存的旧密钥记录与新的不匹配。以下是解决方法：</p>\n<p>&#x3D;&#x3D;解决方案分步说明：&#x3D;&#x3D;</p>\n<ol>\n<li><p><strong>清除旧的密钥记录</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -f <span class=\"string\">&quot;/root/.ssh/known_hosts&quot;</span> -R <span class=\"string\">&quot;pi2&quot;</span></span><br></pre></td></tr></table></figure>\n<p>这会从 <code>known_hosts</code> 文件中删除所有与 <code>pi2</code> 关联的旧密钥记录。</p>\n</li>\n<li><p><strong>重新尝试复制公钥</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id -i ~/.ssh/id_rsa.pub root@pi2</span><br></pre></td></tr></table></figure>\n<p>系统会提示你确认新主机的指纹（类似 <code>Are you sure you want to continue connecting (yes/no/[fingerprint])?</code>），输入 <code>yes</code> 并回车。</p>\n</li>\n<li><p><strong>验证免密登录</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@pi2</span><br></pre></td></tr></table></figure>\n<p>此时应该能无需密码直接登录。</p>\n</li>\n</ol>\n<p>&#x3D;&#x3D;关键原因：&#x3D;&#x3D;</p>\n<ul>\n<li><strong>主机密钥变更</strong>：重装系统会生成新的 SSH 主机密钥，导致本地记录的旧密钥失效。</li>\n<li><strong>SSH 安全机制</strong>：SSH 默认会检查主机密钥，防止中间人攻击，因此需要手动确认新密钥。</li>\n</ul>\n<p>&#x3D;&#x3D;扩展建议：&#x3D;&#x3D;</p>\n<ul>\n<li><strong>持久化主机密钥</strong>：如果频繁重装系统，可备份 <code>/etc/ssh/ssh_host_*</code> 密钥文件，重装后恢复以避免此问题。</li>\n<li><strong>使用固定IP或域名</strong>：确保 <code>pi2</code> 的解析地址稳定，避免因IP变化导致密钥关联错误。</li>\n</ul>\n<h3 id=\"Q：-1\"><a href=\"#Q：-1\" class=\"headerlink\" title=\"Q：\"></a><strong>Q</strong>：</h3><p>弹出一系列警告，解释一下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@orangepi4-lts:~# ssh-copy-id -i ~/.ssh/id_rsa.pub root@pi2 /usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: <span class=\"string\">&quot;/root/.ssh/id_rsa.pub&quot;</span> The authenticity of host <span class=\"string\">&#x27;pi2 (192.168.0.111)&#x27;</span> can<span class=\"string\">&#x27;t be established. ECDSA key fingerprint is SHA256:KnYcisA4EXVw70Qj4A36IC2/OESREd9X4NsgLxfjmMY. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: the ECDSA host key for &#x27;</span>pi2<span class=\"string\">&#x27; differs from the key for the IP address &#x27;</span>192.168.0.111<span class=\"string\">&#x27; Offending key for IP in /root/.ssh/known_hosts:2 Are you sure you want to continue connecting (yes/no)? yes /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed Warning: the ECDSA host key for &#x27;</span>pi2<span class=\"string\">&#x27; differs from the key for the IP address &#x27;</span>192.168.0.111<span class=\"string\">&#x27; Offending key for IP in /root/.ssh/known_hosts:2 Matching host key in /root/.ssh/known_hosts:6 Are you sure you want to continue connecting (yes/no)? yes /usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys Warning: the ECDSA host key for &#x27;</span>pi2<span class=\"string\">&#x27; differs from the key for the IP address &#x27;</span>192.168.0.111<span class=\"string\">&#x27; Offending key for IP in /root/.ssh/known_hosts:2 Matching host key in /root/.ssh/known_hosts:6 Are you sure you want to continue connecting (yes/no)? yes</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DeepSeek：-1\"><a href=\"#DeepSeek：-1\" class=\"headerlink\" title=\"DeepSeek：\"></a><strong>DeepSeek</strong>：</h3><p>&#x3D;&#x3D;问题解释：&#x3D;&#x3D;<br>你遇到的警告是 <strong>SSH 双重验证冲突</strong>导致的，具体原因如下：</p>\n<ol>\n<li><strong>主机密钥与IP密钥不匹配</strong></li>\n</ol>\n<ul>\n<li>你之前可能通过 <strong>IP地址（192.168.0.111）</strong> 连接过这台主机，而此次通过 <strong>主机名（pi2）</strong> 连接。</li>\n<li>系统在 <code>known_hosts</code> 文件中记录了 <strong>两种身份标识</strong>（主机名 <code>pi2</code> 和 IP 地址 <code>192.168.0.111</code>），但两者的密钥因系统镜像更换而不再匹配。</li>\n</ul>\n<ol start=\"2\">\n<li><strong><code>known_hosts</code> 文件中的冲突条目</strong></li>\n</ol>\n<ul>\n<li>警告中提到的 <code>Offending key for IP in /root/.ssh/known_hosts:2</code> 表示第 2 行是 IP 地址的旧密钥。</li>\n<li><code>Matching host key in /root/.ssh/known_hosts:6</code> 表示第 6 行是主机名 <code>pi2</code> 的新密钥。</li>\n<li>SSH 发现同一个 IP 对应的密钥在不同记录中不一致，触发安全警告。</li>\n</ul>\n<p>&#x3D;&#x3D;解决方案：&#x3D;&#x3D;<br>彻底清除 <code>pi2</code> 相关的所有旧密钥记录，步骤如下：</p>\n<ol>\n<li><p><strong>删除主机名和IP的旧记录</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -f ~/.ssh/known_hosts -R <span class=\"string\">&quot;pi2&quot;</span>          <span class=\"comment\"># 删除主机名记录</span></span><br><span class=\"line\">ssh-keygen -f ~/.ssh/known_hosts -R <span class=\"string\">&quot;192.168.0.111&quot;</span> <span class=\"comment\"># 删除IP地址记录</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>重新执行 <code>ssh-copy-id</code></strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id -i ~/.ssh/id_rsa.pub root@pi2</span><br></pre></td></tr></table></figure>\n<p>当提示 <code>Are you sure you want to continue connecting (yes/no)?</code> 时，输入 <code>yes</code></p>\n</li>\n<li><p><strong>验证连接</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@pi2</span><br></pre></td></tr></table></figure>\n<p>此时应直接登录，不再出现警告。</p>\n</li>\n</ol>\n<p>&#x3D;&#x3D;根本原因总结：&#x3D;&#x3D;</p>\n<table>\n<thead>\n<tr>\n<th>现象</th>\n<th>原因</th>\n<th>解决方案</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Host key differs</code></td>\n<td>主机名和IP在 <code>known_hosts</code> 中记录了不同的密钥</td>\n<td>清除所有相关条目</td>\n</tr>\n<tr>\n<td>多次确认提示</td>\n<td>SSH 检测到新旧密钥交替冲突</td>\n<td>统一密钥记录</td>\n</tr>\n</tbody></table>\n<h2 id=\"rm-rf-ssh-清除配置后恢复\"><a href=\"#rm-rf-ssh-清除配置后恢复\" class=\"headerlink\" title=\"rm -rf ~/.ssh/* 清除配置后恢复\"></a><code>rm -rf ~/.ssh/*</code> 清除配置后恢复</h2><p>$Last Edited：2025.05.31&#x2F;11:09$</p>\n<hr>\n<ol>\n<li><p>重建 ~&#x2F;.ssh 目录（确保权限正确）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p ~/.ssh              <span class=\"comment\"># 如果目录不存在，则创建 </span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 700 ~/.ssh             <span class=\"comment\"># SSH要求目录权限必须是 700</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重新生成 SSH 密钥对</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t ed25519 -f ~/.ssh/id_rsa  <span class=\"comment\"># 更推荐 ed25519 算法（比 RSA 更安全）</span></span><br></pre></td></tr></table></figure>\n\n<p>（或继续用 RSA 算法）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n<p>-t ed25519：更安全、更快的密钥类型（推荐）。<br>-b 4096：如果是 RSA，设置更强的密钥长度（默认 3072）。<br>➡ 按 Enter 直接跳过密码（SSH 密钥对密码是可选的）</p>\n<ol start=\"3\">\n<li>修复文件权限<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 600 ~/.ssh/id_rsa       <span class=\"comment\"># 私钥必须 600（仅自己可读写） </span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 644 ~/.ssh/id_rsa.pub   <span class=\"comment\"># 公钥可以 644（自己可读写，其他人可读）</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>✅ 验证权限是否正确：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> -la ~/.ssh/</span><br></pre></td></tr></table></figure>\n\n<p>正确输出示例：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-rw------- 1 orangepi orangepi 2602 May 31 12:34 id_rsa      # 600 </span><br><span class=\"line\">-rw-r--r-- 1 orangepi orangepi  572 May 31 12:34 id_rsa.pub  # 644</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>重新部署公钥到目标服务器（如 pi2）<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id -i ~/.ssh/id_rsa.pub orangepi@pi2</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>✋ 如果 ssh-copy-id 无法使用（需要输入密码），可以手动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> ~/.ssh/id_rsa.pub | ssh orangepi@pi2 <span class=\"string\">&quot;mkdir -p ~/.ssh; chmod 700 ~/.ssh; cat &gt;&gt; ~/.ssh/authorized_keys; chmod 600 ~/.ssh/authorized_keys&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>测试 SSH 免密登录<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh orangepi@pi2</span><br></pre></td></tr></table></figure>\n✅ 如果成功，说明修复完成！</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"SSH免密登录\"><a href=\"#SSH免密登录\" class=\"headerlink\" title=\"SSH免密登录\"></a>SSH免密登录</h2><p>参考：<a href=\"https://www.cnblogs.com/luzhanshi/p/13369797.html\">Linux多台机器之间的免密登录设置 - 指尖下的世界 - 博客园</a></p>\n<ol>\n<li>可以先做一个<code>主机ip与名称的映射</code>，方便管理。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/hosts</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>在文件内写入：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.0.110 pi1</span><br><span class=\"line\">192.168.0.111 pi2</span><br><span class=\"line\">192.168.0.112 pi3</span><br><span class=\"line\">192.168.0.113 pi4</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>生成公钥</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将公钥复制到所有需要免密登录的目标主机上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id -i ~/.ssh/id_rsa.pub user@hostname</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li><code>-i</code> 指定公钥文件的路径。</li>\n<li><code>user@hostname</code> 是目标主机的用户名和主机名<br>比如在pi4上运行上述指令，目标主机为pi3，运行成功后目标主机会出现文件<br>&#x3D;&#x3D;&#x2F;root&#x2F;.ssh&#x2F;authorized_keys&#x3D;&#x3D;，完成后可以从pi4上登录pi3。</li>\n</ul>\n<ol start=\"4\">\n<li>测试<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh hostname <span class=\"built_in\">date</span></span><br></pre></td></tr></table></figure>\n不需要输入密码即成功</li>\n</ol>\n<p>如：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@pi4:~# ssh pi3 date</span><br><span class=\"line\">Sun 22 Dec 2024 03:08:44 PM UTC</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变更SSH密钥的方法\"><a href=\"#变更SSH密钥的方法\" class=\"headerlink\" title=\"变更SSH密钥的方法\"></a>变更SSH密钥的方法</h2><h3 id=\"Q：\"><a href=\"#Q：\" class=\"headerlink\" title=\"Q：\"></a><strong>Q</strong>：</h3><p>实现pi2主机的ssh免密登录之后，更改pi2主机的系统镜像，再次复制密钥时出现以下问题。如何解决？ </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@orangepi4-lts:~# ssh-copy-id -i ~/.ssh/id_rsa.pub root@pi2 /usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: <span class=\"string\">&quot;/root/.ssh/id_rsa.pub&quot;</span> /usr/bin/ssh-copy-id: INFO: attempting to <span class=\"built_in\">log</span> <span class=\"keyword\">in</span> with the new key(s), to filter out any that are already installed /usr/bin/ssh-copy-id: ERROR: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ ERROR: @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @ ERROR: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ ERROR: IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! ERROR: Someone could be eavesdropping on you right now (man-in-the-middle attack)! ERROR: It is also possible that a host key has just been changed. ERROR: The fingerprint <span class=\"keyword\">for</span> the ECDSA key sent by the remote host is ERROR: SHA256:KnYcisA4EXVw70Qj4A36IC2/OESREd9X4NsgLxfjmMY. ERROR: Please contact your system administrator. ERROR: Add correct host key <span class=\"keyword\">in</span> /root/.ssh/known_hosts to get rid of this message. ERROR: Offending ECDSA key <span class=\"keyword\">in</span> /root/.ssh/known_hosts:2 ERROR: remove with: ERROR: ssh-keygen -f <span class=\"string\">&quot;/root/.ssh/known_hosts&quot;</span> -R <span class=\"string\">&quot;pi2&quot;</span> ERROR: ECDSA host key <span class=\"keyword\">for</span> pi2 has changed and you have requested strict checking. ERROR: Host key verification failed.</span><br></pre></td></tr></table></figure>\n<h3 id=\"DeepSeek：\"><a href=\"#DeepSeek：\" class=\"headerlink\" title=\"DeepSeek：\"></a><strong>DeepSeek</strong>：</h3><p>出现该错误是因为更换系统镜像后，pi2 主机的 SSH 密钥发生了变化，而本地保存的旧密钥记录与新的不匹配。以下是解决方法：</p>\n<p>&#x3D;&#x3D;解决方案分步说明：&#x3D;&#x3D;</p>\n<ol>\n<li><p><strong>清除旧的密钥记录</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -f <span class=\"string\">&quot;/root/.ssh/known_hosts&quot;</span> -R <span class=\"string\">&quot;pi2&quot;</span></span><br></pre></td></tr></table></figure>\n<p>这会从 <code>known_hosts</code> 文件中删除所有与 <code>pi2</code> 关联的旧密钥记录。</p>\n</li>\n<li><p><strong>重新尝试复制公钥</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id -i ~/.ssh/id_rsa.pub root@pi2</span><br></pre></td></tr></table></figure>\n<p>系统会提示你确认新主机的指纹（类似 <code>Are you sure you want to continue connecting (yes/no/[fingerprint])?</code>），输入 <code>yes</code> 并回车。</p>\n</li>\n<li><p><strong>验证免密登录</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@pi2</span><br></pre></td></tr></table></figure>\n<p>此时应该能无需密码直接登录。</p>\n</li>\n</ol>\n<p>&#x3D;&#x3D;关键原因：&#x3D;&#x3D;</p>\n<ul>\n<li><strong>主机密钥变更</strong>：重装系统会生成新的 SSH 主机密钥，导致本地记录的旧密钥失效。</li>\n<li><strong>SSH 安全机制</strong>：SSH 默认会检查主机密钥，防止中间人攻击，因此需要手动确认新密钥。</li>\n</ul>\n<p>&#x3D;&#x3D;扩展建议：&#x3D;&#x3D;</p>\n<ul>\n<li><strong>持久化主机密钥</strong>：如果频繁重装系统，可备份 <code>/etc/ssh/ssh_host_*</code> 密钥文件，重装后恢复以避免此问题。</li>\n<li><strong>使用固定IP或域名</strong>：确保 <code>pi2</code> 的解析地址稳定，避免因IP变化导致密钥关联错误。</li>\n</ul>\n<h3 id=\"Q：-1\"><a href=\"#Q：-1\" class=\"headerlink\" title=\"Q：\"></a><strong>Q</strong>：</h3><p>弹出一系列警告，解释一下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@orangepi4-lts:~# ssh-copy-id -i ~/.ssh/id_rsa.pub root@pi2 /usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: <span class=\"string\">&quot;/root/.ssh/id_rsa.pub&quot;</span> The authenticity of host <span class=\"string\">&#x27;pi2 (192.168.0.111)&#x27;</span> can<span class=\"string\">&#x27;t be established. ECDSA key fingerprint is SHA256:KnYcisA4EXVw70Qj4A36IC2/OESREd9X4NsgLxfjmMY. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: the ECDSA host key for &#x27;</span>pi2<span class=\"string\">&#x27; differs from the key for the IP address &#x27;</span>192.168.0.111<span class=\"string\">&#x27; Offending key for IP in /root/.ssh/known_hosts:2 Are you sure you want to continue connecting (yes/no)? yes /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed Warning: the ECDSA host key for &#x27;</span>pi2<span class=\"string\">&#x27; differs from the key for the IP address &#x27;</span>192.168.0.111<span class=\"string\">&#x27; Offending key for IP in /root/.ssh/known_hosts:2 Matching host key in /root/.ssh/known_hosts:6 Are you sure you want to continue connecting (yes/no)? yes /usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys Warning: the ECDSA host key for &#x27;</span>pi2<span class=\"string\">&#x27; differs from the key for the IP address &#x27;</span>192.168.0.111<span class=\"string\">&#x27; Offending key for IP in /root/.ssh/known_hosts:2 Matching host key in /root/.ssh/known_hosts:6 Are you sure you want to continue connecting (yes/no)? yes</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DeepSeek：-1\"><a href=\"#DeepSeek：-1\" class=\"headerlink\" title=\"DeepSeek：\"></a><strong>DeepSeek</strong>：</h3><p>&#x3D;&#x3D;问题解释：&#x3D;&#x3D;<br>你遇到的警告是 <strong>SSH 双重验证冲突</strong>导致的，具体原因如下：</p>\n<ol>\n<li><strong>主机密钥与IP密钥不匹配</strong></li>\n</ol>\n<ul>\n<li>你之前可能通过 <strong>IP地址（192.168.0.111）</strong> 连接过这台主机，而此次通过 <strong>主机名（pi2）</strong> 连接。</li>\n<li>系统在 <code>known_hosts</code> 文件中记录了 <strong>两种身份标识</strong>（主机名 <code>pi2</code> 和 IP 地址 <code>192.168.0.111</code>），但两者的密钥因系统镜像更换而不再匹配。</li>\n</ul>\n<ol start=\"2\">\n<li><strong><code>known_hosts</code> 文件中的冲突条目</strong></li>\n</ol>\n<ul>\n<li>警告中提到的 <code>Offending key for IP in /root/.ssh/known_hosts:2</code> 表示第 2 行是 IP 地址的旧密钥。</li>\n<li><code>Matching host key in /root/.ssh/known_hosts:6</code> 表示第 6 行是主机名 <code>pi2</code> 的新密钥。</li>\n<li>SSH 发现同一个 IP 对应的密钥在不同记录中不一致，触发安全警告。</li>\n</ul>\n<p>&#x3D;&#x3D;解决方案：&#x3D;&#x3D;<br>彻底清除 <code>pi2</code> 相关的所有旧密钥记录，步骤如下：</p>\n<ol>\n<li><p><strong>删除主机名和IP的旧记录</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -f ~/.ssh/known_hosts -R <span class=\"string\">&quot;pi2&quot;</span>          <span class=\"comment\"># 删除主机名记录</span></span><br><span class=\"line\">ssh-keygen -f ~/.ssh/known_hosts -R <span class=\"string\">&quot;192.168.0.111&quot;</span> <span class=\"comment\"># 删除IP地址记录</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>重新执行 <code>ssh-copy-id</code></strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id -i ~/.ssh/id_rsa.pub root@pi2</span><br></pre></td></tr></table></figure>\n<p>当提示 <code>Are you sure you want to continue connecting (yes/no)?</code> 时，输入 <code>yes</code></p>\n</li>\n<li><p><strong>验证连接</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@pi2</span><br></pre></td></tr></table></figure>\n<p>此时应直接登录，不再出现警告。</p>\n</li>\n</ol>\n<p>&#x3D;&#x3D;根本原因总结：&#x3D;&#x3D;</p>\n<table>\n<thead>\n<tr>\n<th>现象</th>\n<th>原因</th>\n<th>解决方案</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Host key differs</code></td>\n<td>主机名和IP在 <code>known_hosts</code> 中记录了不同的密钥</td>\n<td>清除所有相关条目</td>\n</tr>\n<tr>\n<td>多次确认提示</td>\n<td>SSH 检测到新旧密钥交替冲突</td>\n<td>统一密钥记录</td>\n</tr>\n</tbody></table>\n<h2 id=\"rm-rf-ssh-清除配置后恢复\"><a href=\"#rm-rf-ssh-清除配置后恢复\" class=\"headerlink\" title=\"rm -rf ~/.ssh/* 清除配置后恢复\"></a><code>rm -rf ~/.ssh/*</code> 清除配置后恢复</h2><p>$Last Edited：2025.05.31&#x2F;11:09$</p>\n<hr>\n<ol>\n<li><p>重建 ~&#x2F;.ssh 目录（确保权限正确）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p ~/.ssh              <span class=\"comment\"># 如果目录不存在，则创建 </span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 700 ~/.ssh             <span class=\"comment\"># SSH要求目录权限必须是 700</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重新生成 SSH 密钥对</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t ed25519 -f ~/.ssh/id_rsa  <span class=\"comment\"># 更推荐 ed25519 算法（比 RSA 更安全）</span></span><br></pre></td></tr></table></figure>\n\n<p>（或继续用 RSA 算法）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n<p>-t ed25519：更安全、更快的密钥类型（推荐）。<br>-b 4096：如果是 RSA，设置更强的密钥长度（默认 3072）。<br>➡ 按 Enter 直接跳过密码（SSH 密钥对密码是可选的）</p>\n<ol start=\"3\">\n<li>修复文件权限<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 600 ~/.ssh/id_rsa       <span class=\"comment\"># 私钥必须 600（仅自己可读写） </span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 644 ~/.ssh/id_rsa.pub   <span class=\"comment\"># 公钥可以 644（自己可读写，其他人可读）</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>✅ 验证权限是否正确：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> -la ~/.ssh/</span><br></pre></td></tr></table></figure>\n\n<p>正确输出示例：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-rw------- 1 orangepi orangepi 2602 May 31 12:34 id_rsa      # 600 </span><br><span class=\"line\">-rw-r--r-- 1 orangepi orangepi  572 May 31 12:34 id_rsa.pub  # 644</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>重新部署公钥到目标服务器（如 pi2）<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id -i ~/.ssh/id_rsa.pub orangepi@pi2</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>✋ 如果 ssh-copy-id 无法使用（需要输入密码），可以手动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> ~/.ssh/id_rsa.pub | ssh orangepi@pi2 <span class=\"string\">&quot;mkdir -p ~/.ssh; chmod 700 ~/.ssh; cat &gt;&gt; ~/.ssh/authorized_keys; chmod 600 ~/.ssh/authorized_keys&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>测试 SSH 免密登录<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh orangepi@pi2</span><br></pre></td></tr></table></figure>\n✅ 如果成功，说明修复完成！</li>\n</ol>\n"},{"title":"Vim-Q&A","date":"2025-06-01T02:34:58.000Z","updated":"2025-04-25T09:37:58.000Z","_content":"\n## Vim打开文件出现`[esc][？4m`\n来源于：\n[vim - I compile vim9 by my self, but [esc][?4m keeps showing up，why?how to fix this? - Stack Overflow](https://stackoverflow.com/questions/75318113/i-compile-vim9-by-my-self-but-esc4m-keeps-showing-up-whyhow-to-fix-this)\n[Funny characters happen on gnome-terminal/mate-terminal starting from v9.0.0980 · Issue `11728` · vim/vim · GitHub](https://github.com/vim/vim/issues/11728)\n打开vimrc文件\n```bash\nsudo nano /etc/vim/vimrc\n```\n\n在最后一行加上：\n```bash\nset keyprotocol=\nlet &term=&term\n```\n## Vim打开文件报错E576: viminfo: Missing '>' in line: \n来源于：[解决vi报错：E576: viminfo: Missing ‘＞‘ in line:_viminfo missing-CSDN博客](https://blog.csdn.net/u010886217/article/details/112510505)\n\n由于viminfo文件损坏导致的问题，删除即可。\n```bash\nrm -rf ~/.viminfo\nrm -rf ~/.viminfo.tmp \n```","source":"_posts/2025-06-01-Vim-QA.md","raw":"---\ntitle: Vim-Q&A\ndate: 2025-06-01 10:34:58\nupdated: 2025-04-25 17:37:58\ncategories:\n  - [服务器&嵌入式平台操作, Q&A问题及解决汇总]\ntags:\npermalink: vim-q&a/\n---\n\n## Vim打开文件出现`[esc][？4m`\n来源于：\n[vim - I compile vim9 by my self, but [esc][?4m keeps showing up，why?how to fix this? - Stack Overflow](https://stackoverflow.com/questions/75318113/i-compile-vim9-by-my-self-but-esc4m-keeps-showing-up-whyhow-to-fix-this)\n[Funny characters happen on gnome-terminal/mate-terminal starting from v9.0.0980 · Issue `11728` · vim/vim · GitHub](https://github.com/vim/vim/issues/11728)\n打开vimrc文件\n```bash\nsudo nano /etc/vim/vimrc\n```\n\n在最后一行加上：\n```bash\nset keyprotocol=\nlet &term=&term\n```\n## Vim打开文件报错E576: viminfo: Missing '>' in line: \n来源于：[解决vi报错：E576: viminfo: Missing ‘＞‘ in line:_viminfo missing-CSDN博客](https://blog.csdn.net/u010886217/article/details/112510505)\n\n由于viminfo文件损坏导致的问题，删除即可。\n```bash\nrm -rf ~/.viminfo\nrm -rf ~/.viminfo.tmp \n```","slug":"2025-06-01-Vim-QA","published":1,"__permalink":"vim-q&a/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0n4000izovdhe9mcfmf","content":"<h2 id=\"Vim打开文件出现-esc-？4m\"><a href=\"#Vim打开文件出现-esc-？4m\" class=\"headerlink\" title=\"Vim打开文件出现[esc][？4m\"></a>Vim打开文件出现<code>[esc][？4m</code></h2><p>来源于：<br>[vim - I compile vim9 by my self, but [esc]<a href=\"https://stackoverflow.com/questions/75318113/i-compile-vim9-by-my-self-but-esc4m-keeps-showing-up-whyhow-to-fix-this\">?4m keeps showing up，why?how to fix this? - Stack Overflow</a><br><a href=\"https://github.com/vim/vim/issues/11728\">Funny characters happen on gnome-terminal&#x2F;mate-terminal starting from v9.0.0980 · Issue <code>11728</code> · vim&#x2F;vim · GitHub</a><br>打开vimrc文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nano /etc/vim/vimrc</span><br></pre></td></tr></table></figure>\n\n<p>在最后一行加上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> keyprotocol=</span><br><span class=\"line\"><span class=\"built_in\">let</span> &amp;term=&amp;term</span><br></pre></td></tr></table></figure>\n<h2 id=\"Vim打开文件报错E576-viminfo-Missing-‘-’-in-line\"><a href=\"#Vim打开文件报错E576-viminfo-Missing-‘-’-in-line\" class=\"headerlink\" title=\"Vim打开文件报错E576: viminfo: Missing ‘&gt;’ in line:\"></a>Vim打开文件报错E576: viminfo: Missing ‘&gt;’ in line:</h2><p>来源于：<a href=\"https://blog.csdn.net/u010886217/article/details/112510505\">解决vi报错：E576: viminfo: Missing ‘＞‘ in line:_viminfo missing-CSDN博客</a></p>\n<p>由于viminfo文件损坏导致的问题，删除即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> -rf ~/.viminfo</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf ~/.viminfo.tmp </span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Vim打开文件出现-esc-？4m\"><a href=\"#Vim打开文件出现-esc-？4m\" class=\"headerlink\" title=\"Vim打开文件出现[esc][？4m\"></a>Vim打开文件出现<code>[esc][？4m</code></h2><p>来源于：<br>[vim - I compile vim9 by my self, but [esc]<a href=\"https://stackoverflow.com/questions/75318113/i-compile-vim9-by-my-self-but-esc4m-keeps-showing-up-whyhow-to-fix-this\">?4m keeps showing up，why?how to fix this? - Stack Overflow</a><br><a href=\"https://github.com/vim/vim/issues/11728\">Funny characters happen on gnome-terminal&#x2F;mate-terminal starting from v9.0.0980 · Issue <code>11728</code> · vim&#x2F;vim · GitHub</a><br>打开vimrc文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nano /etc/vim/vimrc</span><br></pre></td></tr></table></figure>\n\n<p>在最后一行加上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> keyprotocol=</span><br><span class=\"line\"><span class=\"built_in\">let</span> &amp;term=&amp;term</span><br></pre></td></tr></table></figure>\n<h2 id=\"Vim打开文件报错E576-viminfo-Missing-‘-’-in-line\"><a href=\"#Vim打开文件报错E576-viminfo-Missing-‘-’-in-line\" class=\"headerlink\" title=\"Vim打开文件报错E576: viminfo: Missing ‘&gt;’ in line:\"></a>Vim打开文件报错E576: viminfo: Missing ‘&gt;’ in line:</h2><p>来源于：<a href=\"https://blog.csdn.net/u010886217/article/details/112510505\">解决vi报错：E576: viminfo: Missing ‘＞‘ in line:_viminfo missing-CSDN博客</a></p>\n<p>由于viminfo文件损坏导致的问题，删除即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> -rf ~/.viminfo</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf ~/.viminfo.tmp </span><br></pre></td></tr></table></figure>"},{"title":"Voicemeeter Banana","date":"2025-06-01T02:34:58.000Z","updated":"2025-07-15T16:47:11.000Z","_content":"\n这是一个音频管理软件，可以实现游戏内麦克风放歌。\n\n参考：[游戏内完美放歌，无回音/可开麦（Voicemeeter Banana）_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1TV4y1W7eo/?spm_id_from=333.337.search-card.all.click&vd_source=d97d82191b995e0ba21c3438b8cf6adb)","source":"_posts/2025-06-01-Voicemeeter-Banana.md","raw":"---\ntitle: Voicemeeter Banana\ndate: 2025-06-01 10:34:58\nupdated: 2025-07-16 00:47:11\ncategories:\n  - [For Fun]\ntags:\npermalink: voicemeeter-banana/\n---\n\n这是一个音频管理软件，可以实现游戏内麦克风放歌。\n\n参考：[游戏内完美放歌，无回音/可开麦（Voicemeeter Banana）_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1TV4y1W7eo/?spm_id_from=333.337.search-card.all.click&vd_source=d97d82191b995e0ba21c3438b8cf6adb)","slug":"2025-06-01-Voicemeeter-Banana","published":1,"__permalink":"voicemeeter-banana/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0n4000jzovd3lm30cpy","content":"<p>这是一个音频管理软件，可以实现游戏内麦克风放歌。</p>\n<p>参考：<a href=\"https://www.bilibili.com/video/BV1TV4y1W7eo/?spm_id_from=333.337.search-card.all.click&vd_source=d97d82191b995e0ba21c3438b8cf6adb\">游戏内完美放歌，无回音&#x2F;可开麦（Voicemeeter Banana）_哔哩哔哩_bilibili</a></p>\n","excerpt":"","more":"<p>这是一个音频管理软件，可以实现游戏内麦克风放歌。</p>\n<p>参考：<a href=\"https://www.bilibili.com/video/BV1TV4y1W7eo/?spm_id_from=333.337.search-card.all.click&vd_source=d97d82191b995e0ba21c3438b8cf6adb\">游戏内完美放歌，无回音&#x2F;可开麦（Voicemeeter Banana）_哔哩哔哩_bilibili</a></p>\n"},{"title":"WSL","date":"2025-06-01T02:34:58.000Z","updated":"2025-03-01T01:47:16.000Z","_content":"\n## 安装及基础教程\n$Last Edited：2024.12.25/09:22$\n___\n### 安装\n直接看微软官方：[安装 WSL | Microsoft Learn](https://learn.microsoft.com/zh-cn/windows/wsl/install)\n\n### 修改密码\n$Last Edited：2025.02.24/15:10$\n___\n\n在powershell中输入：\n```bash\nwsl.exe -d Ubuntu-22.04 --user root\n```\n\n输入:\n```bash\npasswd username\n```\n修改用户密码，`username`为需要修改的用户。\n\n### 开启SSH\n$Last Edited：2025.02.24/15:10$\n___\n\n参考：[Windows开启（WSL）Linux子系统并远程连接SSH_wsl ssh-CSDN博客](https://blog.csdn.net/tzsm11/article/details/137093575)\n在windterm上直接打开wsl的终端时，文件管理器并不会随之更新，不太方便，而使用SSH连接本地的wsl终端就可以解决这个问题。\n\n首先安装openssh：\n```bash\nsudo apt install openssh-server\n```\n\n编辑配置文件：\n```bash\nsudo nano /etc/ssh/sshd_config\n```\n\n主要修改以下几项：\n```text\nPort 2223\nPermitRootLogin prohibit-password\nPubkeyAuthentication yes\n```\n注意端口要选空闲的，后面两项是允许root用户登录的，不需要可以不加。\n\n重启SSH服务：\n```bash\nsudo service ssh restart\n```\n\n使用`ip addr`查看ip地址\n```text\namadeus@P2310101656:~$ ip addr\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet 10.255.255.254/32 brd 10.255.255.254 scope global lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host \n       valid_lft forever preferred_lft forever\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 00:15:5d:81:d0:f8 brd ff:ff:ff:ff:ff:ff\n    inet 172.23.162.102/20 brd 172.23.175.255 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::215:5dff:fe81:d0f8/64 scope link \n       valid_lft forever preferred_lft forever\n```\n可以看到ip地址为172.23.162.102。\n\n### 远程桌面（Unbuntu22.04）\n$Last Edited：2025.02.25/10:36$\n___\n\n参考：[【24年9月亲测可用】Windows11-WSL2-Ubuntu22.04-可视化桌面安装教程（附带CUDA，cuDNN）_wsl2桌面环境-CSDN博客](https://blog.csdn.net/Leo9344/article/details/141965910)\n[Ubuntu 22.04远程桌面xrdp打开黑屏_ubuntu xrdp 黑屏-CSDN博客](https://blog.csdn.net/taxuebufeng/article/details/141063474)\n\n- 安装依赖\n```bash\nsudo apt-mark hold acpid acpi-support\n```\n\n- 安装桌面环境\n```bash\nsudo apt-get install ubuntu-desktop\n```\n\n- 安装远程控制软件\n```bash\nsudo apt-get install xrdp\n```\n\n- 修改端口\n```bash\nsudo sed -i 's/3389/3390/g' /etc/xrdp/xrdp.ini\n```\n\n- 配置session，防止远程桌面输入密码后闪退。（这个不加确实会闪退）\n```bash\necho \"gnome-session\" > ~/.xsession\n```\n\n- 修改配置文件，防止远程桌面连接后黑屏。（这个不加也会闪退）\n```bash\nsudo vim /etc/xrdp/startwm.sh\n```\n\n新增几行：\n```text\nunset DBUS_SESSION_BUS_ADDRESS # 新增 \nunset XDG_RUNTIME_DIR # 新增\n\ngnome-session # 新增\n```\n前两行是清理环境变量，放在开头。\n最后一行用于启动gnome桌面环境，放在结尾。\n其中`gnome-session`是博客里说要加的，但是试过不加也行。\n测试发现是因为`~/.xsession`有`gnome-session`了，实际上`~/.xsession`和`/etc/xrdp/startwm.sh`其中一个有`gnome-session`就行。\n\n- 重启服务并查看服务状态\n```bash\nsudo systemctl restart xrdp\nsudo systemctl status xrdp\n```\n\n- 远程桌面利用windows自带的`mstsc`即可。\n按`Win+R`，输入`mstsc`打开，计算机输入`localhost:3390`（刚才设置的端口），后面登录的用户名和密码是Ubuntu系统设置的用户名和密码。","source":"_posts/2025-06-01-WSL.md","raw":"---\ntitle: WSL\ndate: 2025-06-01 10:34:58\nupdated: 2025-03-01 09:47:16\ncategories:\n  - [服务器&嵌入式平台操作, 基础配置]\ntags:\npermalink: wsl/\n---\n\n## 安装及基础教程\n$Last Edited：2024.12.25/09:22$\n___\n### 安装\n直接看微软官方：[安装 WSL | Microsoft Learn](https://learn.microsoft.com/zh-cn/windows/wsl/install)\n\n### 修改密码\n$Last Edited：2025.02.24/15:10$\n___\n\n在powershell中输入：\n```bash\nwsl.exe -d Ubuntu-22.04 --user root\n```\n\n输入:\n```bash\npasswd username\n```\n修改用户密码，`username`为需要修改的用户。\n\n### 开启SSH\n$Last Edited：2025.02.24/15:10$\n___\n\n参考：[Windows开启（WSL）Linux子系统并远程连接SSH_wsl ssh-CSDN博客](https://blog.csdn.net/tzsm11/article/details/137093575)\n在windterm上直接打开wsl的终端时，文件管理器并不会随之更新，不太方便，而使用SSH连接本地的wsl终端就可以解决这个问题。\n\n首先安装openssh：\n```bash\nsudo apt install openssh-server\n```\n\n编辑配置文件：\n```bash\nsudo nano /etc/ssh/sshd_config\n```\n\n主要修改以下几项：\n```text\nPort 2223\nPermitRootLogin prohibit-password\nPubkeyAuthentication yes\n```\n注意端口要选空闲的，后面两项是允许root用户登录的，不需要可以不加。\n\n重启SSH服务：\n```bash\nsudo service ssh restart\n```\n\n使用`ip addr`查看ip地址\n```text\namadeus@P2310101656:~$ ip addr\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet 10.255.255.254/32 brd 10.255.255.254 scope global lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host \n       valid_lft forever preferred_lft forever\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 00:15:5d:81:d0:f8 brd ff:ff:ff:ff:ff:ff\n    inet 172.23.162.102/20 brd 172.23.175.255 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::215:5dff:fe81:d0f8/64 scope link \n       valid_lft forever preferred_lft forever\n```\n可以看到ip地址为172.23.162.102。\n\n### 远程桌面（Unbuntu22.04）\n$Last Edited：2025.02.25/10:36$\n___\n\n参考：[【24年9月亲测可用】Windows11-WSL2-Ubuntu22.04-可视化桌面安装教程（附带CUDA，cuDNN）_wsl2桌面环境-CSDN博客](https://blog.csdn.net/Leo9344/article/details/141965910)\n[Ubuntu 22.04远程桌面xrdp打开黑屏_ubuntu xrdp 黑屏-CSDN博客](https://blog.csdn.net/taxuebufeng/article/details/141063474)\n\n- 安装依赖\n```bash\nsudo apt-mark hold acpid acpi-support\n```\n\n- 安装桌面环境\n```bash\nsudo apt-get install ubuntu-desktop\n```\n\n- 安装远程控制软件\n```bash\nsudo apt-get install xrdp\n```\n\n- 修改端口\n```bash\nsudo sed -i 's/3389/3390/g' /etc/xrdp/xrdp.ini\n```\n\n- 配置session，防止远程桌面输入密码后闪退。（这个不加确实会闪退）\n```bash\necho \"gnome-session\" > ~/.xsession\n```\n\n- 修改配置文件，防止远程桌面连接后黑屏。（这个不加也会闪退）\n```bash\nsudo vim /etc/xrdp/startwm.sh\n```\n\n新增几行：\n```text\nunset DBUS_SESSION_BUS_ADDRESS # 新增 \nunset XDG_RUNTIME_DIR # 新增\n\ngnome-session # 新增\n```\n前两行是清理环境变量，放在开头。\n最后一行用于启动gnome桌面环境，放在结尾。\n其中`gnome-session`是博客里说要加的，但是试过不加也行。\n测试发现是因为`~/.xsession`有`gnome-session`了，实际上`~/.xsession`和`/etc/xrdp/startwm.sh`其中一个有`gnome-session`就行。\n\n- 重启服务并查看服务状态\n```bash\nsudo systemctl restart xrdp\nsudo systemctl status xrdp\n```\n\n- 远程桌面利用windows自带的`mstsc`即可。\n按`Win+R`，输入`mstsc`打开，计算机输入`localhost:3390`（刚才设置的端口），后面登录的用户名和密码是Ubuntu系统设置的用户名和密码。","slug":"2025-06-01-WSL","published":1,"__permalink":"wsl/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0n5000kzovd9or7cuzf","content":"<h2 id=\"安装及基础教程\"><a href=\"#安装及基础教程\" class=\"headerlink\" title=\"安装及基础教程\"></a>安装及基础教程</h2><p>$Last Edited：2024.12.25&#x2F;09:22$</p>\n<hr>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>直接看微软官方：<a href=\"https://learn.microsoft.com/zh-cn/windows/wsl/install\">安装 WSL | Microsoft Learn</a></p>\n<h3 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h3><p>$Last Edited：2025.02.24&#x2F;15:10$</p>\n<hr>\n<p>在powershell中输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl.exe -d Ubuntu-22.04 --user root</span><br></pre></td></tr></table></figure>\n\n<p>输入:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">passwd username</span><br></pre></td></tr></table></figure>\n<p>修改用户密码，<code>username</code>为需要修改的用户。</p>\n<h3 id=\"开启SSH\"><a href=\"#开启SSH\" class=\"headerlink\" title=\"开启SSH\"></a>开启SSH</h3><p>$Last Edited：2025.02.24&#x2F;15:10$</p>\n<hr>\n<p>参考：<a href=\"https://blog.csdn.net/tzsm11/article/details/137093575\">Windows开启（WSL）Linux子系统并远程连接SSH_wsl ssh-CSDN博客</a><br>在windterm上直接打开wsl的终端时，文件管理器并不会随之更新，不太方便，而使用SSH连接本地的wsl终端就可以解决这个问题。</p>\n<p>首先安装openssh：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install openssh-server</span><br></pre></td></tr></table></figure>\n\n<p>编辑配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nano /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>\n\n<p>主要修改以下几项：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Port 2223</span><br><span class=\"line\">PermitRootLogin prohibit-password</span><br><span class=\"line\">PubkeyAuthentication yes</span><br></pre></td></tr></table></figure>\n<p>注意端口要选空闲的，后面两项是允许root用户登录的，不需要可以不加。</p>\n<p>重启SSH服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> service ssh restart</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>ip addr</code>查看ip地址</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">amadeus@P2310101656:~$ ip addr</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet 10.255.255.254/32 brd 10.255.255.254 scope global lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class=\"line\">    link/ether 00:15:5d:81:d0:f8 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 172.23.162.102/20 brd 172.23.175.255 scope global eth0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::215:5dff:fe81:d0f8/64 scope link </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>\n<p>可以看到ip地址为172.23.162.102。</p>\n<h3 id=\"远程桌面（Unbuntu22-04）\"><a href=\"#远程桌面（Unbuntu22-04）\" class=\"headerlink\" title=\"远程桌面（Unbuntu22.04）\"></a>远程桌面（Unbuntu22.04）</h3><p>$Last Edited：2025.02.25&#x2F;10:36$</p>\n<hr>\n<p>参考：<a href=\"https://blog.csdn.net/Leo9344/article/details/141965910\">【24年9月亲测可用】Windows11-WSL2-Ubuntu22.04-可视化桌面安装教程（附带CUDA，cuDNN）_wsl2桌面环境-CSDN博客</a><br><a href=\"https://blog.csdn.net/taxuebufeng/article/details/141063474\">Ubuntu 22.04远程桌面xrdp打开黑屏_ubuntu xrdp 黑屏-CSDN博客</a></p>\n<ul>\n<li><p>安装依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-mark hold acpid acpi-support</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装桌面环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install ubuntu-desktop</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装远程控制软件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install xrdp</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改端口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> sed -i <span class=\"string\">&#x27;s/3389/3390/g&#x27;</span> /etc/xrdp/xrdp.ini</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置session，防止远程桌面输入密码后闪退。（这个不加确实会闪退）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;gnome-session&quot;</span> &gt; ~/.xsession</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件，防止远程桌面连接后黑屏。（这个不加也会闪退）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> vim /etc/xrdp/startwm.sh</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>新增几行：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unset DBUS_SESSION_BUS_ADDRESS # 新增 </span><br><span class=\"line\">unset XDG_RUNTIME_DIR # 新增</span><br><span class=\"line\"></span><br><span class=\"line\">gnome-session # 新增</span><br></pre></td></tr></table></figure>\n<p>前两行是清理环境变量，放在开头。<br>最后一行用于启动gnome桌面环境，放在结尾。<br>其中<code>gnome-session</code>是博客里说要加的，但是试过不加也行。<br>测试发现是因为<code>~/.xsession</code>有<code>gnome-session</code>了，实际上<code>~/.xsession</code>和<code>/etc/xrdp/startwm.sh</code>其中一个有<code>gnome-session</code>就行。</p>\n<ul>\n<li><p>重启服务并查看服务状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart xrdp</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl status xrdp</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>远程桌面利用windows自带的<code>mstsc</code>即可。<br>按<code>Win+R</code>，输入<code>mstsc</code>打开，计算机输入<code>localhost:3390</code>（刚才设置的端口），后面登录的用户名和密码是Ubuntu系统设置的用户名和密码。</p>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"安装及基础教程\"><a href=\"#安装及基础教程\" class=\"headerlink\" title=\"安装及基础教程\"></a>安装及基础教程</h2><p>$Last Edited：2024.12.25&#x2F;09:22$</p>\n<hr>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>直接看微软官方：<a href=\"https://learn.microsoft.com/zh-cn/windows/wsl/install\">安装 WSL | Microsoft Learn</a></p>\n<h3 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h3><p>$Last Edited：2025.02.24&#x2F;15:10$</p>\n<hr>\n<p>在powershell中输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl.exe -d Ubuntu-22.04 --user root</span><br></pre></td></tr></table></figure>\n\n<p>输入:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">passwd username</span><br></pre></td></tr></table></figure>\n<p>修改用户密码，<code>username</code>为需要修改的用户。</p>\n<h3 id=\"开启SSH\"><a href=\"#开启SSH\" class=\"headerlink\" title=\"开启SSH\"></a>开启SSH</h3><p>$Last Edited：2025.02.24&#x2F;15:10$</p>\n<hr>\n<p>参考：<a href=\"https://blog.csdn.net/tzsm11/article/details/137093575\">Windows开启（WSL）Linux子系统并远程连接SSH_wsl ssh-CSDN博客</a><br>在windterm上直接打开wsl的终端时，文件管理器并不会随之更新，不太方便，而使用SSH连接本地的wsl终端就可以解决这个问题。</p>\n<p>首先安装openssh：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install openssh-server</span><br></pre></td></tr></table></figure>\n\n<p>编辑配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nano /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>\n\n<p>主要修改以下几项：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Port 2223</span><br><span class=\"line\">PermitRootLogin prohibit-password</span><br><span class=\"line\">PubkeyAuthentication yes</span><br></pre></td></tr></table></figure>\n<p>注意端口要选空闲的，后面两项是允许root用户登录的，不需要可以不加。</p>\n<p>重启SSH服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> service ssh restart</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>ip addr</code>查看ip地址</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">amadeus@P2310101656:~$ ip addr</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet 10.255.255.254/32 brd 10.255.255.254 scope global lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class=\"line\">    link/ether 00:15:5d:81:d0:f8 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 172.23.162.102/20 brd 172.23.175.255 scope global eth0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::215:5dff:fe81:d0f8/64 scope link </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>\n<p>可以看到ip地址为172.23.162.102。</p>\n<h3 id=\"远程桌面（Unbuntu22-04）\"><a href=\"#远程桌面（Unbuntu22-04）\" class=\"headerlink\" title=\"远程桌面（Unbuntu22.04）\"></a>远程桌面（Unbuntu22.04）</h3><p>$Last Edited：2025.02.25&#x2F;10:36$</p>\n<hr>\n<p>参考：<a href=\"https://blog.csdn.net/Leo9344/article/details/141965910\">【24年9月亲测可用】Windows11-WSL2-Ubuntu22.04-可视化桌面安装教程（附带CUDA，cuDNN）_wsl2桌面环境-CSDN博客</a><br><a href=\"https://blog.csdn.net/taxuebufeng/article/details/141063474\">Ubuntu 22.04远程桌面xrdp打开黑屏_ubuntu xrdp 黑屏-CSDN博客</a></p>\n<ul>\n<li><p>安装依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-mark hold acpid acpi-support</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装桌面环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install ubuntu-desktop</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装远程控制软件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install xrdp</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改端口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> sed -i <span class=\"string\">&#x27;s/3389/3390/g&#x27;</span> /etc/xrdp/xrdp.ini</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置session，防止远程桌面输入密码后闪退。（这个不加确实会闪退）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;gnome-session&quot;</span> &gt; ~/.xsession</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件，防止远程桌面连接后黑屏。（这个不加也会闪退）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> vim /etc/xrdp/startwm.sh</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>新增几行：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unset DBUS_SESSION_BUS_ADDRESS # 新增 </span><br><span class=\"line\">unset XDG_RUNTIME_DIR # 新增</span><br><span class=\"line\"></span><br><span class=\"line\">gnome-session # 新增</span><br></pre></td></tr></table></figure>\n<p>前两行是清理环境变量，放在开头。<br>最后一行用于启动gnome桌面环境，放在结尾。<br>其中<code>gnome-session</code>是博客里说要加的，但是试过不加也行。<br>测试发现是因为<code>~/.xsession</code>有<code>gnome-session</code>了，实际上<code>~/.xsession</code>和<code>/etc/xrdp/startwm.sh</code>其中一个有<code>gnome-session</code>就行。</p>\n<ul>\n<li><p>重启服务并查看服务状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart xrdp</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl status xrdp</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>远程桌面利用windows自带的<code>mstsc</code>即可。<br>按<code>Win+R</code>，输入<code>mstsc</code>打开，计算机输入<code>localhost:3390</code>（刚才设置的端口），后面登录的用户名和密码是Ubuntu系统设置的用户名和密码。</p>\n</li>\n</ul>\n"},{"title":"mubu的毕业设计工作日志","date":"2025-06-01T02:34:58.000Z","updated":"2024-12-04T08:50:42.000Z","_content":"\n## 之前的工作：\n\n### 香橙派可以通过串口发送指令\n\n- 基于wringpi库，将wringop-python的例程修改得到\n- 串口3，香橙派设备号ttyS3\n- 写好了程序serial_test.py放在root文件夹下，通过python3 serial_test.py --device \"/dev/ttyS3\"运行\n- 通过vim serial_test.py修改\n- 蓝牙串口可以接收到正确数据\n### 串口指令控制小车运行\n- 蓝牙串口从上位机发送指令可以控制车的运动\n- 具体指令如下：\n- 接收11位数据：\n- 1：帧头：0x7B\n- 2&3：预留位（0x00）\n- 4&5：x轴目标速度\n- 6&7：y轴目标速度\n- 8&9：z轴目标速度\n- 10：校验位 0与前9位分别按位异或\n- 11：帧尾：0x7D\n### 安装PySimpleGUI、OpenCV等库\n- 安装出现问题后，下载了python3.9版本，pip的位置也改到了python3.9下\n- 好像用python-tk解决了tkinker的问题，检查了一下两个版本python的库（3.7和3.9）\n- python默认2.7  python3默认3.7，发现该用的库装好了而且3.9版本用不到，将pip通过更新的方式换回了3.7下\n### 香橙派连接摄像头的测试\n- 通过motion测试的摄像头可以使用（插在上面那个usb口）。但是后续发现motion开机运行会影响程序中对摄像头的调用，故通过sudo service motion stop 关闭服务。最后修改了配置文件（路径/etc/default/motion）start_motion_daemon=no，不允许后台运行。\n- 使用OpenCV的python库在程序中调用摄像头，cv2.VideoCapture(1).isOpened()测试能正确开启。\n- 编写了pic.py程序（root文件夹下），保存一张图片到root文件夹。\n## 4.7一周的工作：\n\n### 交互界面\n\n- 使用ssh远程登录无法弹出窗口。安装xming。[Xming X Server for Windows - 官方网站](http://www.straightrunning.com/XmingNotes/)\n- sshd_config配置文件注意X11Forwrding yes。sudo vim /etc/ssh/sshd_config\n- xming安装目录X0.hosts加入香橙派ip地址（白名单），直接写在下面就行。\n- 勾选no access control\n![xming界面.png](/images/xming界面.png)\n\n- 命令行输入一句指令export DISPLAY=192.168.2.3:0.0（上位机ip地址），即可正常弹出窗口，用xclock和PySimpleGUI测试没问题。\n![xserver工具测试.png](/images/xserver工具测试.png)\n\n### 串口控制小车\n\n- 用示波器测了上位机发串口指令和香橙派发串口指令的波形，基本一样，只是电压有一点差别，但是感觉不应该有影响。\n## 4.14一周的工作：\n\n### 初步在集群上运行程序\n\n- 集群主机的ip是固定的，登录主机运行即可\n- source ~/pytest/bin/activate 进入虚拟环境后再运行程序\n- 卸载了原有的opencv包，用香橙派文档里的apt指令重装了一个\n- 不太清楚虚拟环境模块是否用的是已安装模块，有待学习\n### 编写了人机交互界面的算法，但是比较卡\n\n- 基于PySimpleGUI编写，可以运行，但是还得改进不少\n- 目前是读取图片-第一帧画框-目标跟踪-每张图片画框-打印在界面上并刷新\n### hc08蓝牙串口买到了，仍无法控制\n\n- 怀疑是stm32串口电平无法被拉低导致\n- 基本排除了串口通信停止位等问题\n## 4.19一周的工作：\n\n### 小车实现通过串口控制运动\n\n- 无线串口换成了逐飞的，最终实现\n## 6.2之后的工作：\n\n- 用单个香橙派把车跑起来，录个视频混一下\n### 先配置好虚拟环境\n\n#### 安装 virtualenv和virtualenvwrapper\n\n- pip install virtualenv -i https://mirrors.aliyun.com/pypi/simple/\n- pip install virtualenvwrapper -i https://mirrors.aliyun.com/pypi/simple/\n-   // 安装完成后使用命令进行查看是否安装\n- pip list\n#### 修改配置文件\n\n- 查询地址\n- find / -name \"virtualenvwrapper.sh\"\n- find / -name \"virtualenv\"\n- 修改\n![virtualenv配置文件修改.png](/images/virtualenv配置文件修改.png)\n\n#### 执行source ~/.bashrc-- 有时候重启虚拟机时创建不了虚拟机，也用这个命令再执行一次即可\n#### 常用命令\n![virtualenv常用指令.png](/images/virtualenv常用指令.png)\n#### 关于报错\n\n![virtualenv报错.png](/images/virtualenv报错.png)\n\n#### 查看python安装位置的方法\n- whereis python\n- which python当前的\n- 进入python环境，import sys print(sys.path)\n### 在虚拟环境中配置相关库\n\n#### wiringpi库\n- wiringOP已经安装，注意在虚拟环境运行加上sudo\n#### opencv-python\n- pip install opencv-python\n- 测试摄像头\n![opencv摄像头测试.png](/images/opencv摄像头测试.png)\n\n#### siamLAT\n- 所需库如下：\n![siamLAT所需库.png](/images/siamLAT所需库.png)\n- lmdb torch torchvision fire opencv-python panda sklearn tensorboardX visdom tqdm matplotlib got10k IPython\n- 用track1video.py测试\n#### nicegui\n- 直接pip安装\n- 不带摄像头画面的界面显示正常\n- 带上摄像头画面之后\n\t不带sudo摄像头打不开 带上sudo cv2找不到\n- 发现是任务量过多的问题，后续进一步处理\n### 整合工作\n\n- 把串口发送的文件变为一个模块my_serial并测试成功，可以正常使用\n- 发现wiringpi库只能用按照香橙派说明文档安装的那个\n![wiringpi.png](/images/wiringpi.png)\n- 虚拟环境中安装要去掉sudo\n- nicegui显示视频失败，还是应该换回PySimpleGUI，先把控制算法编完再说","source":"_posts/2025-06-01-mubu的毕业设计工作日志.md","raw":"---\ntitle: mubu的毕业设计工作日志\ndate: 2025-06-01 10:34:58\nupdated: 2024-12-04 16:50:42\ncategories:\n  - [本科毕业设计]\ntags:\npermalink: mubu的毕业设计工作日志/\n---\n\n## 之前的工作：\n\n### 香橙派可以通过串口发送指令\n\n- 基于wringpi库，将wringop-python的例程修改得到\n- 串口3，香橙派设备号ttyS3\n- 写好了程序serial_test.py放在root文件夹下，通过python3 serial_test.py --device \"/dev/ttyS3\"运行\n- 通过vim serial_test.py修改\n- 蓝牙串口可以接收到正确数据\n### 串口指令控制小车运行\n- 蓝牙串口从上位机发送指令可以控制车的运动\n- 具体指令如下：\n- 接收11位数据：\n- 1：帧头：0x7B\n- 2&3：预留位（0x00）\n- 4&5：x轴目标速度\n- 6&7：y轴目标速度\n- 8&9：z轴目标速度\n- 10：校验位 0与前9位分别按位异或\n- 11：帧尾：0x7D\n### 安装PySimpleGUI、OpenCV等库\n- 安装出现问题后，下载了python3.9版本，pip的位置也改到了python3.9下\n- 好像用python-tk解决了tkinker的问题，检查了一下两个版本python的库（3.7和3.9）\n- python默认2.7  python3默认3.7，发现该用的库装好了而且3.9版本用不到，将pip通过更新的方式换回了3.7下\n### 香橙派连接摄像头的测试\n- 通过motion测试的摄像头可以使用（插在上面那个usb口）。但是后续发现motion开机运行会影响程序中对摄像头的调用，故通过sudo service motion stop 关闭服务。最后修改了配置文件（路径/etc/default/motion）start_motion_daemon=no，不允许后台运行。\n- 使用OpenCV的python库在程序中调用摄像头，cv2.VideoCapture(1).isOpened()测试能正确开启。\n- 编写了pic.py程序（root文件夹下），保存一张图片到root文件夹。\n## 4.7一周的工作：\n\n### 交互界面\n\n- 使用ssh远程登录无法弹出窗口。安装xming。[Xming X Server for Windows - 官方网站](http://www.straightrunning.com/XmingNotes/)\n- sshd_config配置文件注意X11Forwrding yes。sudo vim /etc/ssh/sshd_config\n- xming安装目录X0.hosts加入香橙派ip地址（白名单），直接写在下面就行。\n- 勾选no access control\n![xming界面.png](/images/xming界面.png)\n\n- 命令行输入一句指令export DISPLAY=192.168.2.3:0.0（上位机ip地址），即可正常弹出窗口，用xclock和PySimpleGUI测试没问题。\n![xserver工具测试.png](/images/xserver工具测试.png)\n\n### 串口控制小车\n\n- 用示波器测了上位机发串口指令和香橙派发串口指令的波形，基本一样，只是电压有一点差别，但是感觉不应该有影响。\n## 4.14一周的工作：\n\n### 初步在集群上运行程序\n\n- 集群主机的ip是固定的，登录主机运行即可\n- source ~/pytest/bin/activate 进入虚拟环境后再运行程序\n- 卸载了原有的opencv包，用香橙派文档里的apt指令重装了一个\n- 不太清楚虚拟环境模块是否用的是已安装模块，有待学习\n### 编写了人机交互界面的算法，但是比较卡\n\n- 基于PySimpleGUI编写，可以运行，但是还得改进不少\n- 目前是读取图片-第一帧画框-目标跟踪-每张图片画框-打印在界面上并刷新\n### hc08蓝牙串口买到了，仍无法控制\n\n- 怀疑是stm32串口电平无法被拉低导致\n- 基本排除了串口通信停止位等问题\n## 4.19一周的工作：\n\n### 小车实现通过串口控制运动\n\n- 无线串口换成了逐飞的，最终实现\n## 6.2之后的工作：\n\n- 用单个香橙派把车跑起来，录个视频混一下\n### 先配置好虚拟环境\n\n#### 安装 virtualenv和virtualenvwrapper\n\n- pip install virtualenv -i https://mirrors.aliyun.com/pypi/simple/\n- pip install virtualenvwrapper -i https://mirrors.aliyun.com/pypi/simple/\n-   // 安装完成后使用命令进行查看是否安装\n- pip list\n#### 修改配置文件\n\n- 查询地址\n- find / -name \"virtualenvwrapper.sh\"\n- find / -name \"virtualenv\"\n- 修改\n![virtualenv配置文件修改.png](/images/virtualenv配置文件修改.png)\n\n#### 执行source ~/.bashrc-- 有时候重启虚拟机时创建不了虚拟机，也用这个命令再执行一次即可\n#### 常用命令\n![virtualenv常用指令.png](/images/virtualenv常用指令.png)\n#### 关于报错\n\n![virtualenv报错.png](/images/virtualenv报错.png)\n\n#### 查看python安装位置的方法\n- whereis python\n- which python当前的\n- 进入python环境，import sys print(sys.path)\n### 在虚拟环境中配置相关库\n\n#### wiringpi库\n- wiringOP已经安装，注意在虚拟环境运行加上sudo\n#### opencv-python\n- pip install opencv-python\n- 测试摄像头\n![opencv摄像头测试.png](/images/opencv摄像头测试.png)\n\n#### siamLAT\n- 所需库如下：\n![siamLAT所需库.png](/images/siamLAT所需库.png)\n- lmdb torch torchvision fire opencv-python panda sklearn tensorboardX visdom tqdm matplotlib got10k IPython\n- 用track1video.py测试\n#### nicegui\n- 直接pip安装\n- 不带摄像头画面的界面显示正常\n- 带上摄像头画面之后\n\t不带sudo摄像头打不开 带上sudo cv2找不到\n- 发现是任务量过多的问题，后续进一步处理\n### 整合工作\n\n- 把串口发送的文件变为一个模块my_serial并测试成功，可以正常使用\n- 发现wiringpi库只能用按照香橙派说明文档安装的那个\n![wiringpi.png](/images/wiringpi.png)\n- 虚拟环境中安装要去掉sudo\n- nicegui显示视频失败，还是应该换回PySimpleGUI，先把控制算法编完再说","slug":"2025-06-01-mubu的毕业设计工作日志","published":1,"__permalink":"mubu的毕业设计工作日志/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0n6000nzovd4tvfeb7h","content":"<h2 id=\"之前的工作：\"><a href=\"#之前的工作：\" class=\"headerlink\" title=\"之前的工作：\"></a>之前的工作：</h2><h3 id=\"香橙派可以通过串口发送指令\"><a href=\"#香橙派可以通过串口发送指令\" class=\"headerlink\" title=\"香橙派可以通过串口发送指令\"></a>香橙派可以通过串口发送指令</h3><ul>\n<li>基于wringpi库，将wringop-python的例程修改得到</li>\n<li>串口3，香橙派设备号ttyS3</li>\n<li>写好了程序serial_test.py放在root文件夹下，通过python3 serial_test.py –device “&#x2F;dev&#x2F;ttyS3”运行</li>\n<li>通过vim serial_test.py修改</li>\n<li>蓝牙串口可以接收到正确数据</li>\n</ul>\n<h3 id=\"串口指令控制小车运行\"><a href=\"#串口指令控制小车运行\" class=\"headerlink\" title=\"串口指令控制小车运行\"></a>串口指令控制小车运行</h3><ul>\n<li>蓝牙串口从上位机发送指令可以控制车的运动</li>\n<li>具体指令如下：</li>\n<li>接收11位数据：</li>\n<li>1：帧头：0x7B</li>\n<li>2&amp;3：预留位（0x00）</li>\n<li>4&amp;5：x轴目标速度</li>\n<li>6&amp;7：y轴目标速度</li>\n<li>8&amp;9：z轴目标速度</li>\n<li>10：校验位 0与前9位分别按位异或</li>\n<li>11：帧尾：0x7D</li>\n</ul>\n<h3 id=\"安装PySimpleGUI、OpenCV等库\"><a href=\"#安装PySimpleGUI、OpenCV等库\" class=\"headerlink\" title=\"安装PySimpleGUI、OpenCV等库\"></a>安装PySimpleGUI、OpenCV等库</h3><ul>\n<li>安装出现问题后，下载了python3.9版本，pip的位置也改到了python3.9下</li>\n<li>好像用python-tk解决了tkinker的问题，检查了一下两个版本python的库（3.7和3.9）</li>\n<li>python默认2.7  python3默认3.7，发现该用的库装好了而且3.9版本用不到，将pip通过更新的方式换回了3.7下</li>\n</ul>\n<h3 id=\"香橙派连接摄像头的测试\"><a href=\"#香橙派连接摄像头的测试\" class=\"headerlink\" title=\"香橙派连接摄像头的测试\"></a>香橙派连接摄像头的测试</h3><ul>\n<li>通过motion测试的摄像头可以使用（插在上面那个usb口）。但是后续发现motion开机运行会影响程序中对摄像头的调用，故通过sudo service motion stop 关闭服务。最后修改了配置文件（路径&#x2F;etc&#x2F;default&#x2F;motion）start_motion_daemon&#x3D;no，不允许后台运行。</li>\n<li>使用OpenCV的python库在程序中调用摄像头，cv2.VideoCapture(1).isOpened()测试能正确开启。</li>\n<li>编写了pic.py程序（root文件夹下），保存一张图片到root文件夹。</li>\n</ul>\n<h2 id=\"4-7一周的工作：\"><a href=\"#4-7一周的工作：\" class=\"headerlink\" title=\"4.7一周的工作：\"></a>4.7一周的工作：</h2><h3 id=\"交互界面\"><a href=\"#交互界面\" class=\"headerlink\" title=\"交互界面\"></a>交互界面</h3><ul>\n<li><p>使用ssh远程登录无法弹出窗口。安装xming。<a href=\"http://www.straightrunning.com/XmingNotes/\">Xming X Server for Windows - 官方网站</a></p>\n</li>\n<li><p>sshd_config配置文件注意X11Forwrding yes。sudo vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</p>\n</li>\n<li><p>xming安装目录X0.hosts加入香橙派ip地址（白名单），直接写在下面就行。</p>\n</li>\n<li><p>勾选no access control<br><img src=\"/418blog/images/xming%E7%95%8C%E9%9D%A2.png\" alt=\"xming界面.png\"></p>\n</li>\n<li><p>命令行输入一句指令export DISPLAY&#x3D;192.168.2.3:0.0（上位机ip地址），即可正常弹出窗口，用xclock和PySimpleGUI测试没问题。<br><img src=\"/418blog/images/xserver%E5%B7%A5%E5%85%B7%E6%B5%8B%E8%AF%95.png\" alt=\"xserver工具测试.png\"></p>\n</li>\n</ul>\n<h3 id=\"串口控制小车\"><a href=\"#串口控制小车\" class=\"headerlink\" title=\"串口控制小车\"></a>串口控制小车</h3><ul>\n<li>用示波器测了上位机发串口指令和香橙派发串口指令的波形，基本一样，只是电压有一点差别，但是感觉不应该有影响。</li>\n</ul>\n<h2 id=\"4-14一周的工作：\"><a href=\"#4-14一周的工作：\" class=\"headerlink\" title=\"4.14一周的工作：\"></a>4.14一周的工作：</h2><h3 id=\"初步在集群上运行程序\"><a href=\"#初步在集群上运行程序\" class=\"headerlink\" title=\"初步在集群上运行程序\"></a>初步在集群上运行程序</h3><ul>\n<li>集群主机的ip是固定的，登录主机运行即可</li>\n<li>source ~&#x2F;pytest&#x2F;bin&#x2F;activate 进入虚拟环境后再运行程序</li>\n<li>卸载了原有的opencv包，用香橙派文档里的apt指令重装了一个</li>\n<li>不太清楚虚拟环境模块是否用的是已安装模块，有待学习</li>\n</ul>\n<h3 id=\"编写了人机交互界面的算法，但是比较卡\"><a href=\"#编写了人机交互界面的算法，但是比较卡\" class=\"headerlink\" title=\"编写了人机交互界面的算法，但是比较卡\"></a>编写了人机交互界面的算法，但是比较卡</h3><ul>\n<li>基于PySimpleGUI编写，可以运行，但是还得改进不少</li>\n<li>目前是读取图片-第一帧画框-目标跟踪-每张图片画框-打印在界面上并刷新</li>\n</ul>\n<h3 id=\"hc08蓝牙串口买到了，仍无法控制\"><a href=\"#hc08蓝牙串口买到了，仍无法控制\" class=\"headerlink\" title=\"hc08蓝牙串口买到了，仍无法控制\"></a>hc08蓝牙串口买到了，仍无法控制</h3><ul>\n<li>怀疑是stm32串口电平无法被拉低导致</li>\n<li>基本排除了串口通信停止位等问题</li>\n</ul>\n<h2 id=\"4-19一周的工作：\"><a href=\"#4-19一周的工作：\" class=\"headerlink\" title=\"4.19一周的工作：\"></a>4.19一周的工作：</h2><h3 id=\"小车实现通过串口控制运动\"><a href=\"#小车实现通过串口控制运动\" class=\"headerlink\" title=\"小车实现通过串口控制运动\"></a>小车实现通过串口控制运动</h3><ul>\n<li>无线串口换成了逐飞的，最终实现</li>\n</ul>\n<h2 id=\"6-2之后的工作：\"><a href=\"#6-2之后的工作：\" class=\"headerlink\" title=\"6.2之后的工作：\"></a>6.2之后的工作：</h2><ul>\n<li>用单个香橙派把车跑起来，录个视频混一下</li>\n</ul>\n<h3 id=\"先配置好虚拟环境\"><a href=\"#先配置好虚拟环境\" class=\"headerlink\" title=\"先配置好虚拟环境\"></a>先配置好虚拟环境</h3><h4 id=\"安装-virtualenv和virtualenvwrapper\"><a href=\"#安装-virtualenv和virtualenvwrapper\" class=\"headerlink\" title=\"安装 virtualenv和virtualenvwrapper\"></a>安装 virtualenv和virtualenvwrapper</h4><ul>\n<li>pip install virtualenv -i <a href=\"https://mirrors.aliyun.com/pypi/simple/\">https://mirrors.aliyun.com/pypi/simple/</a></li>\n<li>pip install virtualenvwrapper -i <a href=\"https://mirrors.aliyun.com/pypi/simple/\">https://mirrors.aliyun.com/pypi/simple/</a></li>\n<li>  &#x2F;&#x2F; 安装完成后使用命令进行查看是否安装</li>\n<li>pip list</li>\n</ul>\n<h4 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h4><ul>\n<li>查询地址</li>\n<li>find &#x2F; -name “virtualenvwrapper.sh”</li>\n<li>find &#x2F; -name “virtualenv”</li>\n<li>修改<br><img src=\"/418blog/images/virtualenv%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BF%AE%E6%94%B9.png\" alt=\"virtualenv配置文件修改.png\"></li>\n</ul>\n<h4 id=\"执行source-bashrc–-有时候重启虚拟机时创建不了虚拟机，也用这个命令再执行一次即可\"><a href=\"#执行source-bashrc–-有时候重启虚拟机时创建不了虚拟机，也用这个命令再执行一次即可\" class=\"headerlink\" title=\"执行source ~&#x2F;.bashrc– 有时候重启虚拟机时创建不了虚拟机，也用这个命令再执行一次即可\"></a>执行source ~&#x2F;.bashrc– 有时候重启虚拟机时创建不了虚拟机，也用这个命令再执行一次即可</h4><h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><p><img src=\"/418blog/images/virtualenv%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4.png\" alt=\"virtualenv常用指令.png\"></p>\n<h4 id=\"关于报错\"><a href=\"#关于报错\" class=\"headerlink\" title=\"关于报错\"></a>关于报错</h4><p><img src=\"/418blog/images/virtualenv%E6%8A%A5%E9%94%99.png\" alt=\"virtualenv报错.png\"></p>\n<h4 id=\"查看python安装位置的方法\"><a href=\"#查看python安装位置的方法\" class=\"headerlink\" title=\"查看python安装位置的方法\"></a>查看python安装位置的方法</h4><ul>\n<li>whereis python</li>\n<li>which python当前的</li>\n<li>进入python环境，import sys print(sys.path)</li>\n</ul>\n<h3 id=\"在虚拟环境中配置相关库\"><a href=\"#在虚拟环境中配置相关库\" class=\"headerlink\" title=\"在虚拟环境中配置相关库\"></a>在虚拟环境中配置相关库</h3><h4 id=\"wiringpi库\"><a href=\"#wiringpi库\" class=\"headerlink\" title=\"wiringpi库\"></a>wiringpi库</h4><ul>\n<li>wiringOP已经安装，注意在虚拟环境运行加上sudo</li>\n</ul>\n<h4 id=\"opencv-python\"><a href=\"#opencv-python\" class=\"headerlink\" title=\"opencv-python\"></a>opencv-python</h4><ul>\n<li>pip install opencv-python</li>\n<li>测试摄像头<br><img src=\"/418blog/images/opencv%E6%91%84%E5%83%8F%E5%A4%B4%E6%B5%8B%E8%AF%95.png\" alt=\"opencv摄像头测试.png\"></li>\n</ul>\n<h4 id=\"siamLAT\"><a href=\"#siamLAT\" class=\"headerlink\" title=\"siamLAT\"></a>siamLAT</h4><ul>\n<li>所需库如下：<br><img src=\"/418blog/images/siamLAT%E6%89%80%E9%9C%80%E5%BA%93.png\" alt=\"siamLAT所需库.png\"></li>\n<li>lmdb torch torchvision fire opencv-python panda sklearn tensorboardX visdom tqdm matplotlib got10k IPython</li>\n<li>用track1video.py测试</li>\n</ul>\n<h4 id=\"nicegui\"><a href=\"#nicegui\" class=\"headerlink\" title=\"nicegui\"></a>nicegui</h4><ul>\n<li>直接pip安装</li>\n<li>不带摄像头画面的界面显示正常</li>\n<li>带上摄像头画面之后<br>  不带sudo摄像头打不开 带上sudo cv2找不到</li>\n<li>发现是任务量过多的问题，后续进一步处理</li>\n</ul>\n<h3 id=\"整合工作\"><a href=\"#整合工作\" class=\"headerlink\" title=\"整合工作\"></a>整合工作</h3><ul>\n<li>把串口发送的文件变为一个模块my_serial并测试成功，可以正常使用</li>\n<li>发现wiringpi库只能用按照香橙派说明文档安装的那个<br><img src=\"/418blog/images/wiringpi.png\" alt=\"wiringpi.png\"></li>\n<li>虚拟环境中安装要去掉sudo</li>\n<li>nicegui显示视频失败，还是应该换回PySimpleGUI，先把控制算法编完再说</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"之前的工作：\"><a href=\"#之前的工作：\" class=\"headerlink\" title=\"之前的工作：\"></a>之前的工作：</h2><h3 id=\"香橙派可以通过串口发送指令\"><a href=\"#香橙派可以通过串口发送指令\" class=\"headerlink\" title=\"香橙派可以通过串口发送指令\"></a>香橙派可以通过串口发送指令</h3><ul>\n<li>基于wringpi库，将wringop-python的例程修改得到</li>\n<li>串口3，香橙派设备号ttyS3</li>\n<li>写好了程序serial_test.py放在root文件夹下，通过python3 serial_test.py –device “&#x2F;dev&#x2F;ttyS3”运行</li>\n<li>通过vim serial_test.py修改</li>\n<li>蓝牙串口可以接收到正确数据</li>\n</ul>\n<h3 id=\"串口指令控制小车运行\"><a href=\"#串口指令控制小车运行\" class=\"headerlink\" title=\"串口指令控制小车运行\"></a>串口指令控制小车运行</h3><ul>\n<li>蓝牙串口从上位机发送指令可以控制车的运动</li>\n<li>具体指令如下：</li>\n<li>接收11位数据：</li>\n<li>1：帧头：0x7B</li>\n<li>2&amp;3：预留位（0x00）</li>\n<li>4&amp;5：x轴目标速度</li>\n<li>6&amp;7：y轴目标速度</li>\n<li>8&amp;9：z轴目标速度</li>\n<li>10：校验位 0与前9位分别按位异或</li>\n<li>11：帧尾：0x7D</li>\n</ul>\n<h3 id=\"安装PySimpleGUI、OpenCV等库\"><a href=\"#安装PySimpleGUI、OpenCV等库\" class=\"headerlink\" title=\"安装PySimpleGUI、OpenCV等库\"></a>安装PySimpleGUI、OpenCV等库</h3><ul>\n<li>安装出现问题后，下载了python3.9版本，pip的位置也改到了python3.9下</li>\n<li>好像用python-tk解决了tkinker的问题，检查了一下两个版本python的库（3.7和3.9）</li>\n<li>python默认2.7  python3默认3.7，发现该用的库装好了而且3.9版本用不到，将pip通过更新的方式换回了3.7下</li>\n</ul>\n<h3 id=\"香橙派连接摄像头的测试\"><a href=\"#香橙派连接摄像头的测试\" class=\"headerlink\" title=\"香橙派连接摄像头的测试\"></a>香橙派连接摄像头的测试</h3><ul>\n<li>通过motion测试的摄像头可以使用（插在上面那个usb口）。但是后续发现motion开机运行会影响程序中对摄像头的调用，故通过sudo service motion stop 关闭服务。最后修改了配置文件（路径&#x2F;etc&#x2F;default&#x2F;motion）start_motion_daemon&#x3D;no，不允许后台运行。</li>\n<li>使用OpenCV的python库在程序中调用摄像头，cv2.VideoCapture(1).isOpened()测试能正确开启。</li>\n<li>编写了pic.py程序（root文件夹下），保存一张图片到root文件夹。</li>\n</ul>\n<h2 id=\"4-7一周的工作：\"><a href=\"#4-7一周的工作：\" class=\"headerlink\" title=\"4.7一周的工作：\"></a>4.7一周的工作：</h2><h3 id=\"交互界面\"><a href=\"#交互界面\" class=\"headerlink\" title=\"交互界面\"></a>交互界面</h3><ul>\n<li><p>使用ssh远程登录无法弹出窗口。安装xming。<a href=\"http://www.straightrunning.com/XmingNotes/\">Xming X Server for Windows - 官方网站</a></p>\n</li>\n<li><p>sshd_config配置文件注意X11Forwrding yes。sudo vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</p>\n</li>\n<li><p>xming安装目录X0.hosts加入香橙派ip地址（白名单），直接写在下面就行。</p>\n</li>\n<li><p>勾选no access control<br><img src=\"/418blog/images/xming%E7%95%8C%E9%9D%A2.png\" alt=\"xming界面.png\"></p>\n</li>\n<li><p>命令行输入一句指令export DISPLAY&#x3D;192.168.2.3:0.0（上位机ip地址），即可正常弹出窗口，用xclock和PySimpleGUI测试没问题。<br><img src=\"/418blog/images/xserver%E5%B7%A5%E5%85%B7%E6%B5%8B%E8%AF%95.png\" alt=\"xserver工具测试.png\"></p>\n</li>\n</ul>\n<h3 id=\"串口控制小车\"><a href=\"#串口控制小车\" class=\"headerlink\" title=\"串口控制小车\"></a>串口控制小车</h3><ul>\n<li>用示波器测了上位机发串口指令和香橙派发串口指令的波形，基本一样，只是电压有一点差别，但是感觉不应该有影响。</li>\n</ul>\n<h2 id=\"4-14一周的工作：\"><a href=\"#4-14一周的工作：\" class=\"headerlink\" title=\"4.14一周的工作：\"></a>4.14一周的工作：</h2><h3 id=\"初步在集群上运行程序\"><a href=\"#初步在集群上运行程序\" class=\"headerlink\" title=\"初步在集群上运行程序\"></a>初步在集群上运行程序</h3><ul>\n<li>集群主机的ip是固定的，登录主机运行即可</li>\n<li>source ~&#x2F;pytest&#x2F;bin&#x2F;activate 进入虚拟环境后再运行程序</li>\n<li>卸载了原有的opencv包，用香橙派文档里的apt指令重装了一个</li>\n<li>不太清楚虚拟环境模块是否用的是已安装模块，有待学习</li>\n</ul>\n<h3 id=\"编写了人机交互界面的算法，但是比较卡\"><a href=\"#编写了人机交互界面的算法，但是比较卡\" class=\"headerlink\" title=\"编写了人机交互界面的算法，但是比较卡\"></a>编写了人机交互界面的算法，但是比较卡</h3><ul>\n<li>基于PySimpleGUI编写，可以运行，但是还得改进不少</li>\n<li>目前是读取图片-第一帧画框-目标跟踪-每张图片画框-打印在界面上并刷新</li>\n</ul>\n<h3 id=\"hc08蓝牙串口买到了，仍无法控制\"><a href=\"#hc08蓝牙串口买到了，仍无法控制\" class=\"headerlink\" title=\"hc08蓝牙串口买到了，仍无法控制\"></a>hc08蓝牙串口买到了，仍无法控制</h3><ul>\n<li>怀疑是stm32串口电平无法被拉低导致</li>\n<li>基本排除了串口通信停止位等问题</li>\n</ul>\n<h2 id=\"4-19一周的工作：\"><a href=\"#4-19一周的工作：\" class=\"headerlink\" title=\"4.19一周的工作：\"></a>4.19一周的工作：</h2><h3 id=\"小车实现通过串口控制运动\"><a href=\"#小车实现通过串口控制运动\" class=\"headerlink\" title=\"小车实现通过串口控制运动\"></a>小车实现通过串口控制运动</h3><ul>\n<li>无线串口换成了逐飞的，最终实现</li>\n</ul>\n<h2 id=\"6-2之后的工作：\"><a href=\"#6-2之后的工作：\" class=\"headerlink\" title=\"6.2之后的工作：\"></a>6.2之后的工作：</h2><ul>\n<li>用单个香橙派把车跑起来，录个视频混一下</li>\n</ul>\n<h3 id=\"先配置好虚拟环境\"><a href=\"#先配置好虚拟环境\" class=\"headerlink\" title=\"先配置好虚拟环境\"></a>先配置好虚拟环境</h3><h4 id=\"安装-virtualenv和virtualenvwrapper\"><a href=\"#安装-virtualenv和virtualenvwrapper\" class=\"headerlink\" title=\"安装 virtualenv和virtualenvwrapper\"></a>安装 virtualenv和virtualenvwrapper</h4><ul>\n<li>pip install virtualenv -i <a href=\"https://mirrors.aliyun.com/pypi/simple/\">https://mirrors.aliyun.com/pypi/simple/</a></li>\n<li>pip install virtualenvwrapper -i <a href=\"https://mirrors.aliyun.com/pypi/simple/\">https://mirrors.aliyun.com/pypi/simple/</a></li>\n<li>  &#x2F;&#x2F; 安装完成后使用命令进行查看是否安装</li>\n<li>pip list</li>\n</ul>\n<h4 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h4><ul>\n<li>查询地址</li>\n<li>find &#x2F; -name “virtualenvwrapper.sh”</li>\n<li>find &#x2F; -name “virtualenv”</li>\n<li>修改<br><img src=\"/418blog/images/virtualenv%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BF%AE%E6%94%B9.png\" alt=\"virtualenv配置文件修改.png\"></li>\n</ul>\n<h4 id=\"执行source-bashrc–-有时候重启虚拟机时创建不了虚拟机，也用这个命令再执行一次即可\"><a href=\"#执行source-bashrc–-有时候重启虚拟机时创建不了虚拟机，也用这个命令再执行一次即可\" class=\"headerlink\" title=\"执行source ~&#x2F;.bashrc– 有时候重启虚拟机时创建不了虚拟机，也用这个命令再执行一次即可\"></a>执行source ~&#x2F;.bashrc– 有时候重启虚拟机时创建不了虚拟机，也用这个命令再执行一次即可</h4><h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><p><img src=\"/418blog/images/virtualenv%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4.png\" alt=\"virtualenv常用指令.png\"></p>\n<h4 id=\"关于报错\"><a href=\"#关于报错\" class=\"headerlink\" title=\"关于报错\"></a>关于报错</h4><p><img src=\"/418blog/images/virtualenv%E6%8A%A5%E9%94%99.png\" alt=\"virtualenv报错.png\"></p>\n<h4 id=\"查看python安装位置的方法\"><a href=\"#查看python安装位置的方法\" class=\"headerlink\" title=\"查看python安装位置的方法\"></a>查看python安装位置的方法</h4><ul>\n<li>whereis python</li>\n<li>which python当前的</li>\n<li>进入python环境，import sys print(sys.path)</li>\n</ul>\n<h3 id=\"在虚拟环境中配置相关库\"><a href=\"#在虚拟环境中配置相关库\" class=\"headerlink\" title=\"在虚拟环境中配置相关库\"></a>在虚拟环境中配置相关库</h3><h4 id=\"wiringpi库\"><a href=\"#wiringpi库\" class=\"headerlink\" title=\"wiringpi库\"></a>wiringpi库</h4><ul>\n<li>wiringOP已经安装，注意在虚拟环境运行加上sudo</li>\n</ul>\n<h4 id=\"opencv-python\"><a href=\"#opencv-python\" class=\"headerlink\" title=\"opencv-python\"></a>opencv-python</h4><ul>\n<li>pip install opencv-python</li>\n<li>测试摄像头<br><img src=\"/418blog/images/opencv%E6%91%84%E5%83%8F%E5%A4%B4%E6%B5%8B%E8%AF%95.png\" alt=\"opencv摄像头测试.png\"></li>\n</ul>\n<h4 id=\"siamLAT\"><a href=\"#siamLAT\" class=\"headerlink\" title=\"siamLAT\"></a>siamLAT</h4><ul>\n<li>所需库如下：<br><img src=\"/418blog/images/siamLAT%E6%89%80%E9%9C%80%E5%BA%93.png\" alt=\"siamLAT所需库.png\"></li>\n<li>lmdb torch torchvision fire opencv-python panda sklearn tensorboardX visdom tqdm matplotlib got10k IPython</li>\n<li>用track1video.py测试</li>\n</ul>\n<h4 id=\"nicegui\"><a href=\"#nicegui\" class=\"headerlink\" title=\"nicegui\"></a>nicegui</h4><ul>\n<li>直接pip安装</li>\n<li>不带摄像头画面的界面显示正常</li>\n<li>带上摄像头画面之后<br>  不带sudo摄像头打不开 带上sudo cv2找不到</li>\n<li>发现是任务量过多的问题，后续进一步处理</li>\n</ul>\n<h3 id=\"整合工作\"><a href=\"#整合工作\" class=\"headerlink\" title=\"整合工作\"></a>整合工作</h3><ul>\n<li>把串口发送的文件变为一个模块my_serial并测试成功，可以正常使用</li>\n<li>发现wiringpi库只能用按照香橙派说明文档安装的那个<br><img src=\"/418blog/images/wiringpi.png\" alt=\"wiringpi.png\"></li>\n<li>虚拟环境中安装要去掉sudo</li>\n<li>nicegui显示视频失败，还是应该换回PySimpleGUI，先把控制算法编完再说</li>\n</ul>\n"},{"title":"会话管理—Screen","date":"2025-06-01T02:34:58.000Z","updated":"2024-04-14T14:32:22.000Z","_content":"\nscreen 是一个用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。\n## 安装\n\n> [!NOTE] 操作环境\n> Ubuntu 20.04 LTS 服务器\n> \n\n1. apt-get下载\n```bash\nsudo apt install screen\n```\n2. 查看版本\n```bash\nscreen -vision\n```\n## 常用指令\n\n> [!NOTE] 操作环境\n> Ubuntu 20.04 LTS 服务器\n `查看终端列表`\n```bash\nscreen -ls\n``` `键盘指令`","source":"_posts/2025-06-01-会话管理Screen.md","raw":"---\ntitle: 会话管理—Screen\ndate: 2025-06-01 10:34:58\nupdated: 2024-04-14 22:32:22\ncategories:\n  - [服务器&嵌入式平台操作, 工具]\ntags:\npermalink: 会话管理—screen/\n---\n\nscreen 是一个用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。\n## 安装\n\n> [!NOTE] 操作环境\n> Ubuntu 20.04 LTS 服务器\n> \n\n1. apt-get下载\n```bash\nsudo apt install screen\n```\n2. 查看版本\n```bash\nscreen -vision\n```\n## 常用指令\n\n> [!NOTE] 操作环境\n> Ubuntu 20.04 LTS 服务器\n `查看终端列表`\n```bash\nscreen -ls\n``` `键盘指令`","slug":"2025-06-01-会话管理Screen","published":1,"__permalink":"会话管理—screen/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0n6000pzovdbknp2xm5","content":"<p>screen 是一个用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu 20.04 LTS 服务器</p>\n</blockquote>\n<ol>\n<li>apt-get下载<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install screen</span><br></pre></td></tr></table></figure></li>\n<li>查看版本<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">screen -vision</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h2><blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu 20.04 LTS 服务器<br> <code>查看终端列表</code></p>\n</blockquote>\n<pre><code class=\"bash\">screen -ls\n``` `键盘指令`\n</code></pre>\n","excerpt":"","more":"<p>screen 是一个用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu 20.04 LTS 服务器</p>\n</blockquote>\n<ol>\n<li>apt-get下载<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install screen</span><br></pre></td></tr></table></figure></li>\n<li>查看版本<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">screen -vision</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h2><blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu 20.04 LTS 服务器<br> <code>查看终端列表</code></p>\n</blockquote>\n<pre><code class=\"bash\">screen -ls\n``` `键盘指令`\n</code></pre>\n"},{"title":"会话管理—Tmux","date":"2025-06-01T02:34:58.000Z","updated":"2024-04-14T15:05:32.000Z","_content":"\nTmux 是一个终端多路复用器（terminal multiplexer），功能强大方便，支持在一个终端窗口中同时运行多个终端会话，还支持将会话与窗口解绑。当我们使用SSH连接远程服务器时，若关闭窗口（包含网络断线），则与服务器的会话也会断开，会话内部的进程也会随之终止，不管进程是否运行完毕。\n\n使用Tmux可以解决避免这种问题的发生，它可以将会话与窗口解绑。窗口关闭时，会话并不终止，而是继续运行，等到以后需要的时候，再让会话绑定其他窗口。\n## 安装\n\n> [!NOTE] 操作环境\n> Ubuntu-22.04 NVIDIA  A10 阿里云服务器 \n \n使用apt安装。(Ubuntu 或 Debian)\n```bash\nsudo apt-get install tmux\n```\n## 常用指令\n来源于：[Tmux使用教程_tmux 新建窗口-CSDN博客](https://blog.csdn.net/NSJim/article/details/127754413)\n### 启动与退出\n安装完成后，输入tmux命令，就进入了 Tmux 窗口。\n```bash\ntmux\n```\n上面命令会启动 Tmux 窗口，底部有一个状态栏。状态栏的左侧是窗口信息（编号和名称），右侧是系统信息。\n按下`Ctrl+d`或者显式输入exit命令，就可以退出 Tmux 窗口。\n```bash\nexit\n```\n### 使用流程\n以下是 Tmux 的最简使用流程：\n\n新建会话\n```bash\ntmux new -s my_session\n```\n\n在 Tmux 窗口运行所需的程序。\n按下快捷键`Ctrl+b d`或使用命令\n```bash\ntmux detach\n```\n将会话分离。\n\n下次使用时，重新连接到会话\n```bash\ntmux attach -t my_session\n```\n\n### 前缀键和快捷键\nTmux 窗口有大量的快捷键。所有快捷键都要通过前缀键唤起。默认的前缀键是`Ctrl+b`，按下后快捷键才会生效。\n\n举例来说，帮助命令的快捷键是`Ctrl+b ?`。它的用法是，在 Tmux 窗口中，先按下`Ctrl+b`，再按下`?`，就会显示帮助信息。按下ESC键或q键，就可以退出帮助。\n\n==会话快捷键==\n下面是一些会话相关的快捷键。\n```\nCtrl+b d：分离当前会话。\nCtrl+b s：列出所有会话。\nCtrl+b $：重命名当前会话。\n```\n\n==窗格快捷键==\n下面是一些窗格操作的快捷键。\n```\nCtrl+b %：划分左右两个窗格。\nCtrl+b \"：划分上下两个窗格。\nCtrl+b arrow key：光标切换到其他窗格。\nCtrl+b ;：光标切换到上一个窗格。\nCtrl+b o：光标切换到下一个窗格。\nCtrl+b {：当前窗格与上一个窗格交换位置。\nCtrl+b }：当前窗格与下一个窗格交换位置。\nCtrl+b Ctrl+o：所有窗格向前移动一个位置，第一个窗格变成最后一个窗格。\nCtrl+b Alt+o：所有窗格向后移动一个位置，最后一个窗格变成第一个窗格。\nCtrl+b x：关闭当前窗格。\nCtrl+b !：将当前窗格拆分为一个独立窗口。\nCtrl+b z：当前窗格全屏显示，再使用一次会变回原来大小。\nCtrl+b Ctrl+arrow key：按箭头方向调整窗格大小。\nCtrl+b q：显示窗格编号。\n```\n其中，arrow key是指向要切换到的窗格的方向键，比如切换到下方窗格，就按方向键Down。\n\n==窗格滚动快捷键==\n\n```\nCtrl+b pageUp：向上滚动窗格。\nCtrl+b pageDown：向下滚动窗格。\n```\n进入窗格滚动模式后，使用鼠标滚轮可上下移动光标。\n此模式下，输入快捷键 q 即可退出滚动模式。\n\n==窗口快捷键==\n下面是一些窗口操作的快捷键。\n```\nCtrl+b c：创建一个新窗口，状态栏会显示多个窗口的信息。\nCtrl+b p：切换到上一个窗口（按照状态栏上的顺序）。\nCtrl+b n：切换到下一个窗口。\nCtrl+b <number>：切换到指定编号的窗口，其中的<number>是状态栏上的窗口编号。\nCtrl+b w：从列表中选择窗口。\nCtrl+b ,：窗口重命名。\n```\n\n### 会话管理\n==新建会话==\n第一个启动的 Tmux 窗口，编号是0，第二个窗口的编号是1，以此类推。这些窗口对应的会话，就是 0 号会话、1 号会话。\n\n使用编号区分会话，不太直观，更好的方法是为会话起名。\n\n```\ntmux new -s <session-name>\n\n```\n上面命令新建一个指定名称的会话。\n\n==分离会话==\n在 Tmux 窗口中，按下Ctrl+b d或者输入`tmux detach`命令，就会将当前会话与窗口分离。\n```\ntmux detach\n```\n上面命令执行后，就会退出当前 Tmux 窗口，但是会话和里面的进程仍然在后台运行。\n\n==查看会话==\n`tmux list-session`命令可以查看当前所有的 Tmux 会话。\n简写：\n`tmux ls`\n\n==接入会话==\n`tmux attach-session`命令用于重新接入某个已存在的会话。\n简写：\n```\ntmux attach\n```\n\n使用会话编号\n```\ntmux attach -t <session-no>\n```\n\n使用会话名称\n```\ntmux attach -t <session-name>\n```\n\n==杀死会话==\n`tmux kill-session`命令用于杀死某个会话.\n使用会话编号\n```\ntmux kill-session -t <session-no>\n```\n\n使用会话名称\n```\ntmux kill-session -t <session-name>\n```\n\n==切换会话==\n`tmux switch`命令用于切换会话。\n\n使用会话编号\n```\ntmux switch -t <session-no>\n```\n\n使用会话名称\n```\ntmux switch -t <session-name>\n```\n\n==重命名会话==\n`tmux rename-session`命令用于重命名会话。\n简写：`tmux rename`\n\n使用会话编号\n```\ntmux rename -t <session-no> <new-name>\n```\n\n使用会话名称\n```\ntmux rename -t <old-name> <new-name>\n```\n\n上方命令可将会话重命名。\n\n### 窗格管理\nTmux 可以将窗口分成多个窗格（pane），每个窗格运行不同的命令。以下命令都是在 Tmux 窗口中执行。\n\n效果展示如下：\n\n==划分窗格==\n`tmux split-window`命令用来划分窗格。\n\n划分上下两个窗格\n```\ntmux split-window\n```\n\n划分左右两个窗格\n```\ntmux split-window -h\n```\n\n==移动光标==\n`tmux select-pane`命令用来移动光标位置。\n\n光标切换到上方窗格\n```\ntmux select-pane -U\n```\n\n光标切换到下方窗格\n```\ntmux select-pane -D\n```\n\n光标切换到左边窗格\n```\ntmux select-pane -L\n```\n\n光标切换到右边窗格\n```\ntmux select-pane -R\n```\n\n==交换窗格位置==\n`tmux swap-pane`命令用来交换窗格位置。\n\n当前窗格上移\n```\ntmux swap-pane -U\n```\n\n当前窗格下移\n```\ntmux swap-pane -D\n```\n\n### 窗口管理\n除了将一个窗口划分成多个窗格，Tmux 也允许新建多个窗口。\n\n==新建窗口==\n`tmux new-window`命令用来创建新窗口。\n\n```\ntmux new-window\n```\n\n新建一个指定名称的窗口\n```\ntmux new-window -n <window-name>\n```\n\n==切换窗口==\n`tmux select-window`命令用来切换窗口。\n\n切换到指定编号的窗口\n```\ntmux select-window -t <window-number>\n```\n\n切换到指定名称的窗口\n```\ntmux select-window -t <window-name>\n```\n\n==重命名窗口==\n`tmux rename-window`命令用于为当前窗口起名（或重命名）。\n\n```\ntmux rename-window <new-name>\n```\n\n==其他命令==\n下面是一些其他命令。\n\n列出所有快捷键，及其对应的 Tmux 命令\n```\ntmux list-keys\n```\n\n列出所有 Tmux 命令及其参数\n```\ntmux list-commands\n```\n\n列出当前所有 Tmux 会话的信息\n```\ntmux info\n```\n\n重新加载当前的 Tmux 配置\n```\ntmux source-file ~/.tmux.conf\n```","source":"_posts/2025-06-01-会话管理Tmux.md","raw":"---\ntitle: 会话管理—Tmux\ndate: 2025-06-01 10:34:58\nupdated: 2024-04-14 23:05:32\ncategories:\n  - [服务器&嵌入式平台操作, 工具]\ntags:\npermalink: 会话管理—tmux/\n---\n\nTmux 是一个终端多路复用器（terminal multiplexer），功能强大方便，支持在一个终端窗口中同时运行多个终端会话，还支持将会话与窗口解绑。当我们使用SSH连接远程服务器时，若关闭窗口（包含网络断线），则与服务器的会话也会断开，会话内部的进程也会随之终止，不管进程是否运行完毕。\n\n使用Tmux可以解决避免这种问题的发生，它可以将会话与窗口解绑。窗口关闭时，会话并不终止，而是继续运行，等到以后需要的时候，再让会话绑定其他窗口。\n## 安装\n\n> [!NOTE] 操作环境\n> Ubuntu-22.04 NVIDIA  A10 阿里云服务器 \n \n使用apt安装。(Ubuntu 或 Debian)\n```bash\nsudo apt-get install tmux\n```\n## 常用指令\n来源于：[Tmux使用教程_tmux 新建窗口-CSDN博客](https://blog.csdn.net/NSJim/article/details/127754413)\n### 启动与退出\n安装完成后，输入tmux命令，就进入了 Tmux 窗口。\n```bash\ntmux\n```\n上面命令会启动 Tmux 窗口，底部有一个状态栏。状态栏的左侧是窗口信息（编号和名称），右侧是系统信息。\n按下`Ctrl+d`或者显式输入exit命令，就可以退出 Tmux 窗口。\n```bash\nexit\n```\n### 使用流程\n以下是 Tmux 的最简使用流程：\n\n新建会话\n```bash\ntmux new -s my_session\n```\n\n在 Tmux 窗口运行所需的程序。\n按下快捷键`Ctrl+b d`或使用命令\n```bash\ntmux detach\n```\n将会话分离。\n\n下次使用时，重新连接到会话\n```bash\ntmux attach -t my_session\n```\n\n### 前缀键和快捷键\nTmux 窗口有大量的快捷键。所有快捷键都要通过前缀键唤起。默认的前缀键是`Ctrl+b`，按下后快捷键才会生效。\n\n举例来说，帮助命令的快捷键是`Ctrl+b ?`。它的用法是，在 Tmux 窗口中，先按下`Ctrl+b`，再按下`?`，就会显示帮助信息。按下ESC键或q键，就可以退出帮助。\n\n==会话快捷键==\n下面是一些会话相关的快捷键。\n```\nCtrl+b d：分离当前会话。\nCtrl+b s：列出所有会话。\nCtrl+b $：重命名当前会话。\n```\n\n==窗格快捷键==\n下面是一些窗格操作的快捷键。\n```\nCtrl+b %：划分左右两个窗格。\nCtrl+b \"：划分上下两个窗格。\nCtrl+b arrow key：光标切换到其他窗格。\nCtrl+b ;：光标切换到上一个窗格。\nCtrl+b o：光标切换到下一个窗格。\nCtrl+b {：当前窗格与上一个窗格交换位置。\nCtrl+b }：当前窗格与下一个窗格交换位置。\nCtrl+b Ctrl+o：所有窗格向前移动一个位置，第一个窗格变成最后一个窗格。\nCtrl+b Alt+o：所有窗格向后移动一个位置，最后一个窗格变成第一个窗格。\nCtrl+b x：关闭当前窗格。\nCtrl+b !：将当前窗格拆分为一个独立窗口。\nCtrl+b z：当前窗格全屏显示，再使用一次会变回原来大小。\nCtrl+b Ctrl+arrow key：按箭头方向调整窗格大小。\nCtrl+b q：显示窗格编号。\n```\n其中，arrow key是指向要切换到的窗格的方向键，比如切换到下方窗格，就按方向键Down。\n\n==窗格滚动快捷键==\n\n```\nCtrl+b pageUp：向上滚动窗格。\nCtrl+b pageDown：向下滚动窗格。\n```\n进入窗格滚动模式后，使用鼠标滚轮可上下移动光标。\n此模式下，输入快捷键 q 即可退出滚动模式。\n\n==窗口快捷键==\n下面是一些窗口操作的快捷键。\n```\nCtrl+b c：创建一个新窗口，状态栏会显示多个窗口的信息。\nCtrl+b p：切换到上一个窗口（按照状态栏上的顺序）。\nCtrl+b n：切换到下一个窗口。\nCtrl+b <number>：切换到指定编号的窗口，其中的<number>是状态栏上的窗口编号。\nCtrl+b w：从列表中选择窗口。\nCtrl+b ,：窗口重命名。\n```\n\n### 会话管理\n==新建会话==\n第一个启动的 Tmux 窗口，编号是0，第二个窗口的编号是1，以此类推。这些窗口对应的会话，就是 0 号会话、1 号会话。\n\n使用编号区分会话，不太直观，更好的方法是为会话起名。\n\n```\ntmux new -s <session-name>\n\n```\n上面命令新建一个指定名称的会话。\n\n==分离会话==\n在 Tmux 窗口中，按下Ctrl+b d或者输入`tmux detach`命令，就会将当前会话与窗口分离。\n```\ntmux detach\n```\n上面命令执行后，就会退出当前 Tmux 窗口，但是会话和里面的进程仍然在后台运行。\n\n==查看会话==\n`tmux list-session`命令可以查看当前所有的 Tmux 会话。\n简写：\n`tmux ls`\n\n==接入会话==\n`tmux attach-session`命令用于重新接入某个已存在的会话。\n简写：\n```\ntmux attach\n```\n\n使用会话编号\n```\ntmux attach -t <session-no>\n```\n\n使用会话名称\n```\ntmux attach -t <session-name>\n```\n\n==杀死会话==\n`tmux kill-session`命令用于杀死某个会话.\n使用会话编号\n```\ntmux kill-session -t <session-no>\n```\n\n使用会话名称\n```\ntmux kill-session -t <session-name>\n```\n\n==切换会话==\n`tmux switch`命令用于切换会话。\n\n使用会话编号\n```\ntmux switch -t <session-no>\n```\n\n使用会话名称\n```\ntmux switch -t <session-name>\n```\n\n==重命名会话==\n`tmux rename-session`命令用于重命名会话。\n简写：`tmux rename`\n\n使用会话编号\n```\ntmux rename -t <session-no> <new-name>\n```\n\n使用会话名称\n```\ntmux rename -t <old-name> <new-name>\n```\n\n上方命令可将会话重命名。\n\n### 窗格管理\nTmux 可以将窗口分成多个窗格（pane），每个窗格运行不同的命令。以下命令都是在 Tmux 窗口中执行。\n\n效果展示如下：\n\n==划分窗格==\n`tmux split-window`命令用来划分窗格。\n\n划分上下两个窗格\n```\ntmux split-window\n```\n\n划分左右两个窗格\n```\ntmux split-window -h\n```\n\n==移动光标==\n`tmux select-pane`命令用来移动光标位置。\n\n光标切换到上方窗格\n```\ntmux select-pane -U\n```\n\n光标切换到下方窗格\n```\ntmux select-pane -D\n```\n\n光标切换到左边窗格\n```\ntmux select-pane -L\n```\n\n光标切换到右边窗格\n```\ntmux select-pane -R\n```\n\n==交换窗格位置==\n`tmux swap-pane`命令用来交换窗格位置。\n\n当前窗格上移\n```\ntmux swap-pane -U\n```\n\n当前窗格下移\n```\ntmux swap-pane -D\n```\n\n### 窗口管理\n除了将一个窗口划分成多个窗格，Tmux 也允许新建多个窗口。\n\n==新建窗口==\n`tmux new-window`命令用来创建新窗口。\n\n```\ntmux new-window\n```\n\n新建一个指定名称的窗口\n```\ntmux new-window -n <window-name>\n```\n\n==切换窗口==\n`tmux select-window`命令用来切换窗口。\n\n切换到指定编号的窗口\n```\ntmux select-window -t <window-number>\n```\n\n切换到指定名称的窗口\n```\ntmux select-window -t <window-name>\n```\n\n==重命名窗口==\n`tmux rename-window`命令用于为当前窗口起名（或重命名）。\n\n```\ntmux rename-window <new-name>\n```\n\n==其他命令==\n下面是一些其他命令。\n\n列出所有快捷键，及其对应的 Tmux 命令\n```\ntmux list-keys\n```\n\n列出所有 Tmux 命令及其参数\n```\ntmux list-commands\n```\n\n列出当前所有 Tmux 会话的信息\n```\ntmux info\n```\n\n重新加载当前的 Tmux 配置\n```\ntmux source-file ~/.tmux.conf\n```","slug":"2025-06-01-会话管理Tmux","published":1,"__permalink":"会话管理—tmux/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0n7000szovdd893akto","content":"<p>Tmux 是一个终端多路复用器（terminal multiplexer），功能强大方便，支持在一个终端窗口中同时运行多个终端会话，还支持将会话与窗口解绑。当我们使用SSH连接远程服务器时，若关闭窗口（包含网络断线），则与服务器的会话也会断开，会话内部的进程也会随之终止，不管进程是否运行完毕。</p>\n<p>使用Tmux可以解决避免这种问题的发生，它可以将会话与窗口解绑。窗口关闭时，会话并不终止，而是继续运行，等到以后需要的时候，再让会话绑定其他窗口。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu-22.04 NVIDIA  A10 阿里云服务器 </p>\n</blockquote>\n<p>使用apt安装。(Ubuntu 或 Debian)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install tmux</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h2><p>来源于：<a href=\"https://blog.csdn.net/NSJim/article/details/127754413\">Tmux使用教程_tmux 新建窗口-CSDN博客</a></p>\n<h3 id=\"启动与退出\"><a href=\"#启动与退出\" class=\"headerlink\" title=\"启动与退出\"></a>启动与退出</h3><p>安装完成后，输入tmux命令，就进入了 Tmux 窗口。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux</span><br></pre></td></tr></table></figure>\n<p>上面命令会启动 Tmux 窗口，底部有一个状态栏。状态栏的左侧是窗口信息（编号和名称），右侧是系统信息。<br>按下<code>Ctrl+d</code>或者显式输入exit命令，就可以退出 Tmux 窗口。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用流程\"><a href=\"#使用流程\" class=\"headerlink\" title=\"使用流程\"></a>使用流程</h3><p>以下是 Tmux 的最简使用流程：</p>\n<p>新建会话</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux new -s my_session</span><br></pre></td></tr></table></figure>\n\n<p>在 Tmux 窗口运行所需的程序。<br>按下快捷键<code>Ctrl+b d</code>或使用命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux detach</span><br></pre></td></tr></table></figure>\n<p>将会话分离。</p>\n<p>下次使用时，重新连接到会话</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux attach -t my_session</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"前缀键和快捷键\"><a href=\"#前缀键和快捷键\" class=\"headerlink\" title=\"前缀键和快捷键\"></a>前缀键和快捷键</h3><p>Tmux 窗口有大量的快捷键。所有快捷键都要通过前缀键唤起。默认的前缀键是<code>Ctrl+b</code>，按下后快捷键才会生效。</p>\n<p>举例来说，帮助命令的快捷键是<code>Ctrl+b ?</code>。它的用法是，在 Tmux 窗口中，先按下<code>Ctrl+b</code>，再按下<code>?</code>，就会显示帮助信息。按下ESC键或q键，就可以退出帮助。</p>\n<p>&#x3D;&#x3D;会话快捷键&#x3D;&#x3D;<br>下面是一些会话相关的快捷键。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl+b d：分离当前会话。</span><br><span class=\"line\">Ctrl+b s：列出所有会话。</span><br><span class=\"line\">Ctrl+b $：重命名当前会话。</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;窗格快捷键&#x3D;&#x3D;<br>下面是一些窗格操作的快捷键。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl+b %：划分左右两个窗格。</span><br><span class=\"line\">Ctrl+b &quot;：划分上下两个窗格。</span><br><span class=\"line\">Ctrl+b arrow key：光标切换到其他窗格。</span><br><span class=\"line\">Ctrl+b ;：光标切换到上一个窗格。</span><br><span class=\"line\">Ctrl+b o：光标切换到下一个窗格。</span><br><span class=\"line\">Ctrl+b &#123;：当前窗格与上一个窗格交换位置。</span><br><span class=\"line\">Ctrl+b &#125;：当前窗格与下一个窗格交换位置。</span><br><span class=\"line\">Ctrl+b Ctrl+o：所有窗格向前移动一个位置，第一个窗格变成最后一个窗格。</span><br><span class=\"line\">Ctrl+b Alt+o：所有窗格向后移动一个位置，最后一个窗格变成第一个窗格。</span><br><span class=\"line\">Ctrl+b x：关闭当前窗格。</span><br><span class=\"line\">Ctrl+b !：将当前窗格拆分为一个独立窗口。</span><br><span class=\"line\">Ctrl+b z：当前窗格全屏显示，再使用一次会变回原来大小。</span><br><span class=\"line\">Ctrl+b Ctrl+arrow key：按箭头方向调整窗格大小。</span><br><span class=\"line\">Ctrl+b q：显示窗格编号。</span><br></pre></td></tr></table></figure>\n<p>其中，arrow key是指向要切换到的窗格的方向键，比如切换到下方窗格，就按方向键Down。</p>\n<p>&#x3D;&#x3D;窗格滚动快捷键&#x3D;&#x3D;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl+b pageUp：向上滚动窗格。</span><br><span class=\"line\">Ctrl+b pageDown：向下滚动窗格。</span><br></pre></td></tr></table></figure>\n<p>进入窗格滚动模式后，使用鼠标滚轮可上下移动光标。<br>此模式下，输入快捷键 q 即可退出滚动模式。</p>\n<p>&#x3D;&#x3D;窗口快捷键&#x3D;&#x3D;<br>下面是一些窗口操作的快捷键。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl+b c：创建一个新窗口，状态栏会显示多个窗口的信息。</span><br><span class=\"line\">Ctrl+b p：切换到上一个窗口（按照状态栏上的顺序）。</span><br><span class=\"line\">Ctrl+b n：切换到下一个窗口。</span><br><span class=\"line\">Ctrl+b &lt;number&gt;：切换到指定编号的窗口，其中的&lt;number&gt;是状态栏上的窗口编号。</span><br><span class=\"line\">Ctrl+b w：从列表中选择窗口。</span><br><span class=\"line\">Ctrl+b ,：窗口重命名。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"会话管理\"><a href=\"#会话管理\" class=\"headerlink\" title=\"会话管理\"></a>会话管理</h3><p>&#x3D;&#x3D;新建会话&#x3D;&#x3D;<br>第一个启动的 Tmux 窗口，编号是0，第二个窗口的编号是1，以此类推。这些窗口对应的会话，就是 0 号会话、1 号会话。</p>\n<p>使用编号区分会话，不太直观，更好的方法是为会话起名。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux new -s &lt;session-name&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>上面命令新建一个指定名称的会话。</p>\n<p>&#x3D;&#x3D;分离会话&#x3D;&#x3D;<br>在 Tmux 窗口中，按下Ctrl+b d或者输入<code>tmux detach</code>命令，就会将当前会话与窗口分离。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux detach</span><br></pre></td></tr></table></figure>\n<p>上面命令执行后，就会退出当前 Tmux 窗口，但是会话和里面的进程仍然在后台运行。</p>\n<p>&#x3D;&#x3D;查看会话&#x3D;&#x3D;<br><code>tmux list-session</code>命令可以查看当前所有的 Tmux 会话。<br>简写：<br><code>tmux ls</code></p>\n<p>&#x3D;&#x3D;接入会话&#x3D;&#x3D;<br><code>tmux attach-session</code>命令用于重新接入某个已存在的会话。<br>简写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux attach</span><br></pre></td></tr></table></figure>\n\n<p>使用会话编号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux attach -t &lt;session-no&gt;</span><br></pre></td></tr></table></figure>\n\n<p>使用会话名称</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux attach -t &lt;session-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;杀死会话&#x3D;&#x3D;<br><code>tmux kill-session</code>命令用于杀死某个会话.<br>使用会话编号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux kill-session -t &lt;session-no&gt;</span><br></pre></td></tr></table></figure>\n\n<p>使用会话名称</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux kill-session -t &lt;session-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;切换会话&#x3D;&#x3D;<br><code>tmux switch</code>命令用于切换会话。</p>\n<p>使用会话编号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux switch -t &lt;session-no&gt;</span><br></pre></td></tr></table></figure>\n\n<p>使用会话名称</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux switch -t &lt;session-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;重命名会话&#x3D;&#x3D;<br><code>tmux rename-session</code>命令用于重命名会话。<br>简写：<code>tmux rename</code></p>\n<p>使用会话编号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux rename -t &lt;session-no&gt; &lt;new-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>使用会话名称</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux rename -t &lt;old-name&gt; &lt;new-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上方命令可将会话重命名。</p>\n<h3 id=\"窗格管理\"><a href=\"#窗格管理\" class=\"headerlink\" title=\"窗格管理\"></a>窗格管理</h3><p>Tmux 可以将窗口分成多个窗格（pane），每个窗格运行不同的命令。以下命令都是在 Tmux 窗口中执行。</p>\n<p>效果展示如下：</p>\n<p>&#x3D;&#x3D;划分窗格&#x3D;&#x3D;<br><code>tmux split-window</code>命令用来划分窗格。</p>\n<p>划分上下两个窗格</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux split-window</span><br></pre></td></tr></table></figure>\n\n<p>划分左右两个窗格</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux split-window -h</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;移动光标&#x3D;&#x3D;<br><code>tmux select-pane</code>命令用来移动光标位置。</p>\n<p>光标切换到上方窗格</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux select-pane -U</span><br></pre></td></tr></table></figure>\n\n<p>光标切换到下方窗格</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux select-pane -D</span><br></pre></td></tr></table></figure>\n\n<p>光标切换到左边窗格</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux select-pane -L</span><br></pre></td></tr></table></figure>\n\n<p>光标切换到右边窗格</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux select-pane -R</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;交换窗格位置&#x3D;&#x3D;<br><code>tmux swap-pane</code>命令用来交换窗格位置。</p>\n<p>当前窗格上移</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux swap-pane -U</span><br></pre></td></tr></table></figure>\n\n<p>当前窗格下移</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux swap-pane -D</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"窗口管理\"><a href=\"#窗口管理\" class=\"headerlink\" title=\"窗口管理\"></a>窗口管理</h3><p>除了将一个窗口划分成多个窗格，Tmux 也允许新建多个窗口。</p>\n<p>&#x3D;&#x3D;新建窗口&#x3D;&#x3D;<br><code>tmux new-window</code>命令用来创建新窗口。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux new-window</span><br></pre></td></tr></table></figure>\n\n<p>新建一个指定名称的窗口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux new-window -n &lt;window-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;切换窗口&#x3D;&#x3D;<br><code>tmux select-window</code>命令用来切换窗口。</p>\n<p>切换到指定编号的窗口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux select-window -t &lt;window-number&gt;</span><br></pre></td></tr></table></figure>\n\n<p>切换到指定名称的窗口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux select-window -t &lt;window-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;重命名窗口&#x3D;&#x3D;<br><code>tmux rename-window</code>命令用于为当前窗口起名（或重命名）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux rename-window &lt;new-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;其他命令&#x3D;&#x3D;<br>下面是一些其他命令。</p>\n<p>列出所有快捷键，及其对应的 Tmux 命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux list-keys</span><br></pre></td></tr></table></figure>\n\n<p>列出所有 Tmux 命令及其参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux list-commands</span><br></pre></td></tr></table></figure>\n\n<p>列出当前所有 Tmux 会话的信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux info</span><br></pre></td></tr></table></figure>\n\n<p>重新加载当前的 Tmux 配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux source-file ~/.tmux.conf</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>Tmux 是一个终端多路复用器（terminal multiplexer），功能强大方便，支持在一个终端窗口中同时运行多个终端会话，还支持将会话与窗口解绑。当我们使用SSH连接远程服务器时，若关闭窗口（包含网络断线），则与服务器的会话也会断开，会话内部的进程也会随之终止，不管进程是否运行完毕。</p>\n<p>使用Tmux可以解决避免这种问题的发生，它可以将会话与窗口解绑。窗口关闭时，会话并不终止，而是继续运行，等到以后需要的时候，再让会话绑定其他窗口。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu-22.04 NVIDIA  A10 阿里云服务器 </p>\n</blockquote>\n<p>使用apt安装。(Ubuntu 或 Debian)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install tmux</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h2><p>来源于：<a href=\"https://blog.csdn.net/NSJim/article/details/127754413\">Tmux使用教程_tmux 新建窗口-CSDN博客</a></p>\n<h3 id=\"启动与退出\"><a href=\"#启动与退出\" class=\"headerlink\" title=\"启动与退出\"></a>启动与退出</h3><p>安装完成后，输入tmux命令，就进入了 Tmux 窗口。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux</span><br></pre></td></tr></table></figure>\n<p>上面命令会启动 Tmux 窗口，底部有一个状态栏。状态栏的左侧是窗口信息（编号和名称），右侧是系统信息。<br>按下<code>Ctrl+d</code>或者显式输入exit命令，就可以退出 Tmux 窗口。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用流程\"><a href=\"#使用流程\" class=\"headerlink\" title=\"使用流程\"></a>使用流程</h3><p>以下是 Tmux 的最简使用流程：</p>\n<p>新建会话</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux new -s my_session</span><br></pre></td></tr></table></figure>\n\n<p>在 Tmux 窗口运行所需的程序。<br>按下快捷键<code>Ctrl+b d</code>或使用命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux detach</span><br></pre></td></tr></table></figure>\n<p>将会话分离。</p>\n<p>下次使用时，重新连接到会话</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux attach -t my_session</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"前缀键和快捷键\"><a href=\"#前缀键和快捷键\" class=\"headerlink\" title=\"前缀键和快捷键\"></a>前缀键和快捷键</h3><p>Tmux 窗口有大量的快捷键。所有快捷键都要通过前缀键唤起。默认的前缀键是<code>Ctrl+b</code>，按下后快捷键才会生效。</p>\n<p>举例来说，帮助命令的快捷键是<code>Ctrl+b ?</code>。它的用法是，在 Tmux 窗口中，先按下<code>Ctrl+b</code>，再按下<code>?</code>，就会显示帮助信息。按下ESC键或q键，就可以退出帮助。</p>\n<p>&#x3D;&#x3D;会话快捷键&#x3D;&#x3D;<br>下面是一些会话相关的快捷键。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl+b d：分离当前会话。</span><br><span class=\"line\">Ctrl+b s：列出所有会话。</span><br><span class=\"line\">Ctrl+b $：重命名当前会话。</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;窗格快捷键&#x3D;&#x3D;<br>下面是一些窗格操作的快捷键。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl+b %：划分左右两个窗格。</span><br><span class=\"line\">Ctrl+b &quot;：划分上下两个窗格。</span><br><span class=\"line\">Ctrl+b arrow key：光标切换到其他窗格。</span><br><span class=\"line\">Ctrl+b ;：光标切换到上一个窗格。</span><br><span class=\"line\">Ctrl+b o：光标切换到下一个窗格。</span><br><span class=\"line\">Ctrl+b &#123;：当前窗格与上一个窗格交换位置。</span><br><span class=\"line\">Ctrl+b &#125;：当前窗格与下一个窗格交换位置。</span><br><span class=\"line\">Ctrl+b Ctrl+o：所有窗格向前移动一个位置，第一个窗格变成最后一个窗格。</span><br><span class=\"line\">Ctrl+b Alt+o：所有窗格向后移动一个位置，最后一个窗格变成第一个窗格。</span><br><span class=\"line\">Ctrl+b x：关闭当前窗格。</span><br><span class=\"line\">Ctrl+b !：将当前窗格拆分为一个独立窗口。</span><br><span class=\"line\">Ctrl+b z：当前窗格全屏显示，再使用一次会变回原来大小。</span><br><span class=\"line\">Ctrl+b Ctrl+arrow key：按箭头方向调整窗格大小。</span><br><span class=\"line\">Ctrl+b q：显示窗格编号。</span><br></pre></td></tr></table></figure>\n<p>其中，arrow key是指向要切换到的窗格的方向键，比如切换到下方窗格，就按方向键Down。</p>\n<p>&#x3D;&#x3D;窗格滚动快捷键&#x3D;&#x3D;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl+b pageUp：向上滚动窗格。</span><br><span class=\"line\">Ctrl+b pageDown：向下滚动窗格。</span><br></pre></td></tr></table></figure>\n<p>进入窗格滚动模式后，使用鼠标滚轮可上下移动光标。<br>此模式下，输入快捷键 q 即可退出滚动模式。</p>\n<p>&#x3D;&#x3D;窗口快捷键&#x3D;&#x3D;<br>下面是一些窗口操作的快捷键。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl+b c：创建一个新窗口，状态栏会显示多个窗口的信息。</span><br><span class=\"line\">Ctrl+b p：切换到上一个窗口（按照状态栏上的顺序）。</span><br><span class=\"line\">Ctrl+b n：切换到下一个窗口。</span><br><span class=\"line\">Ctrl+b &lt;number&gt;：切换到指定编号的窗口，其中的&lt;number&gt;是状态栏上的窗口编号。</span><br><span class=\"line\">Ctrl+b w：从列表中选择窗口。</span><br><span class=\"line\">Ctrl+b ,：窗口重命名。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"会话管理\"><a href=\"#会话管理\" class=\"headerlink\" title=\"会话管理\"></a>会话管理</h3><p>&#x3D;&#x3D;新建会话&#x3D;&#x3D;<br>第一个启动的 Tmux 窗口，编号是0，第二个窗口的编号是1，以此类推。这些窗口对应的会话，就是 0 号会话、1 号会话。</p>\n<p>使用编号区分会话，不太直观，更好的方法是为会话起名。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux new -s &lt;session-name&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>上面命令新建一个指定名称的会话。</p>\n<p>&#x3D;&#x3D;分离会话&#x3D;&#x3D;<br>在 Tmux 窗口中，按下Ctrl+b d或者输入<code>tmux detach</code>命令，就会将当前会话与窗口分离。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux detach</span><br></pre></td></tr></table></figure>\n<p>上面命令执行后，就会退出当前 Tmux 窗口，但是会话和里面的进程仍然在后台运行。</p>\n<p>&#x3D;&#x3D;查看会话&#x3D;&#x3D;<br><code>tmux list-session</code>命令可以查看当前所有的 Tmux 会话。<br>简写：<br><code>tmux ls</code></p>\n<p>&#x3D;&#x3D;接入会话&#x3D;&#x3D;<br><code>tmux attach-session</code>命令用于重新接入某个已存在的会话。<br>简写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux attach</span><br></pre></td></tr></table></figure>\n\n<p>使用会话编号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux attach -t &lt;session-no&gt;</span><br></pre></td></tr></table></figure>\n\n<p>使用会话名称</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux attach -t &lt;session-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;杀死会话&#x3D;&#x3D;<br><code>tmux kill-session</code>命令用于杀死某个会话.<br>使用会话编号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux kill-session -t &lt;session-no&gt;</span><br></pre></td></tr></table></figure>\n\n<p>使用会话名称</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux kill-session -t &lt;session-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;切换会话&#x3D;&#x3D;<br><code>tmux switch</code>命令用于切换会话。</p>\n<p>使用会话编号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux switch -t &lt;session-no&gt;</span><br></pre></td></tr></table></figure>\n\n<p>使用会话名称</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux switch -t &lt;session-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;重命名会话&#x3D;&#x3D;<br><code>tmux rename-session</code>命令用于重命名会话。<br>简写：<code>tmux rename</code></p>\n<p>使用会话编号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux rename -t &lt;session-no&gt; &lt;new-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>使用会话名称</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux rename -t &lt;old-name&gt; &lt;new-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上方命令可将会话重命名。</p>\n<h3 id=\"窗格管理\"><a href=\"#窗格管理\" class=\"headerlink\" title=\"窗格管理\"></a>窗格管理</h3><p>Tmux 可以将窗口分成多个窗格（pane），每个窗格运行不同的命令。以下命令都是在 Tmux 窗口中执行。</p>\n<p>效果展示如下：</p>\n<p>&#x3D;&#x3D;划分窗格&#x3D;&#x3D;<br><code>tmux split-window</code>命令用来划分窗格。</p>\n<p>划分上下两个窗格</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux split-window</span><br></pre></td></tr></table></figure>\n\n<p>划分左右两个窗格</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux split-window -h</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;移动光标&#x3D;&#x3D;<br><code>tmux select-pane</code>命令用来移动光标位置。</p>\n<p>光标切换到上方窗格</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux select-pane -U</span><br></pre></td></tr></table></figure>\n\n<p>光标切换到下方窗格</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux select-pane -D</span><br></pre></td></tr></table></figure>\n\n<p>光标切换到左边窗格</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux select-pane -L</span><br></pre></td></tr></table></figure>\n\n<p>光标切换到右边窗格</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux select-pane -R</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;交换窗格位置&#x3D;&#x3D;<br><code>tmux swap-pane</code>命令用来交换窗格位置。</p>\n<p>当前窗格上移</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux swap-pane -U</span><br></pre></td></tr></table></figure>\n\n<p>当前窗格下移</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux swap-pane -D</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"窗口管理\"><a href=\"#窗口管理\" class=\"headerlink\" title=\"窗口管理\"></a>窗口管理</h3><p>除了将一个窗口划分成多个窗格，Tmux 也允许新建多个窗口。</p>\n<p>&#x3D;&#x3D;新建窗口&#x3D;&#x3D;<br><code>tmux new-window</code>命令用来创建新窗口。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux new-window</span><br></pre></td></tr></table></figure>\n\n<p>新建一个指定名称的窗口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux new-window -n &lt;window-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;切换窗口&#x3D;&#x3D;<br><code>tmux select-window</code>命令用来切换窗口。</p>\n<p>切换到指定编号的窗口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux select-window -t &lt;window-number&gt;</span><br></pre></td></tr></table></figure>\n\n<p>切换到指定名称的窗口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux select-window -t &lt;window-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;重命名窗口&#x3D;&#x3D;<br><code>tmux rename-window</code>命令用于为当前窗口起名（或重命名）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux rename-window &lt;new-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;其他命令&#x3D;&#x3D;<br>下面是一些其他命令。</p>\n<p>列出所有快捷键，及其对应的 Tmux 命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux list-keys</span><br></pre></td></tr></table></figure>\n\n<p>列出所有 Tmux 命令及其参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux list-commands</span><br></pre></td></tr></table></figure>\n\n<p>列出当前所有 Tmux 会话的信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux info</span><br></pre></td></tr></table></figure>\n\n<p>重新加载当前的 Tmux 配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux source-file ~/.tmux.conf</span><br></pre></td></tr></table></figure>"},{"title":"修改时间","date":"2025-06-01T02:34:58.000Z","updated":"2024-12-24T01:33:26.000Z","_content":"\n$Last Edited：{{date}}/{{time}}$\n___","source":"_posts/2025-06-01-修改时间.md","raw":"---\ntitle: 修改时间\ndate: 2025-06-01 10:34:58\nupdated: 2024-12-24 09:33:26\ncategories:\n  - [Temp]\ntags:\npermalink: 修改时间/\n---\n\n$Last Edited：{{date}}/{{time}}$\n___","slug":"2025-06-01-修改时间","published":1,"__permalink":"修改时间/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0n8000uzovd5x9p1ncg","content":"<p>$Last Edited：1748745298000&#x2F;$</p>\n<hr>\n","excerpt":"","more":"<p>$Last Edited：1748745298000&#x2F;$</p>\n<hr>\n"},{"title":"内网穿透—AutoSSH","date":"2025-06-01T02:34:58.000Z","updated":"2025-04-20T09:27:53.000Z","_content":"\n$Last Edited：2025.04.20/17:25$\n___\n\n参考：[利用AutoSSH建立SSH隧道，实现内网穿透 - 知乎](https://zhuanlan.zhihu.com/p/112227542)\n[autossh 配置开机启动_autossh开机自启-CSDN博客](https://blog.csdn.net/matrix273/article/details/104058716)\n[SSH隧道详解与使用AutoSSH实现稳定的内网穿透_autossh实现内网穿透-CSDN博客](https://blog.csdn.net/yao51011010/article/details/137122354)\n### 1.前期配置\n#### 免密登录\n​SSH反向链接会因为超时而关闭，如果关闭了那从外网连通内网的通道就无法维持，为此我们需要结合免密码登录及 AutoSSH 来提供稳定的 SSH 反向代理隧道。\n\n​ 在内网主机上产生公钥和私钥\n```bash\nssh-keygen\n```\n然后按三次回车执行默认选项生成公钥和私钥。会生成密钥文件和私钥文件 id_rsa,id_rsa.pub 或 id_dsa,id_dsa.pub\n\n​拷贝秘钥 在内网主机上继续执行如下命令，将内网主机上的秘钥文件 copy 到云服务器中。\n```bash\nssh-copy-id  username@ip\n```\n其中“username”是云服务器的用户名，ip 为云服务器的 ip，然后按照提示输入云服务器的密码就完成了。\n\n#### 修改SSH配置文件\n修改云服务器的 SSH 配置文件`/etc/ssh/sshd_config`\n```text\nGatewayPorts yes\n```\n​ 这样可以把监听的端口绑定到任意 IP 0.0.0.0 上，否则只有本机 127.0.0.1 可以访问。\n\n​ 重启SSHD服务\n```bash\nsudo service sshd restart\n```\n\n#### 云服务器开放端口\n将云服务器用于转发的端口放通，在安全组设置中，只放通入方向的就可以，协议为TCP。\n\n### 2. 安装与使用`autossh`\n在内网主机中安装。\n在大多数Linux发行版中，可以通过包管理器安装`autossh`：\n```bash\nsudo apt-get install autossh  # Debian/Ubuntu\nsudo yum install autossh      # CentOS\n```\n\n在内网主机 A上，利用 `autossh`建立一条 SSH 隧道\n```bash\nautossh -M 4010 -NR 80:localhost:4000 [用户名]@[服务器ip] (-p xxxx)\n```\n​\n检查端口情况：\n```bash\nlsof -i:4010\n```\n\n**参数解释：**\n- “-M 4010”意思是使用内网主机 A 的 4010 端口监视 SSH 连接状态，连接出问题了会自动重连\n- “ -N”意思是不执行远程命令\n- “-R”意思是将远程主机（公网主机 B）的某个端口转发到本地指定机器的指定端口\n\n​ **代码解释：**\n- “80:localhost:4000”意思是将内网主机 A 的 4000 号端口转发至公网主机 B 的 80 号端口上  \n- “-p xxxx”意思是公网主机 B 的 SSH 端口，如果是默认的 22 号端口，则可以不输入\n\n### 3. 使用`systemd`自启动服务\n\n创建一个`systemd`服务文件，例如`autossh-tunnel.service`：\n```bash\nsudo nano /etc/systemd/system/autossh-tunnel.service\n```\n\n在文件中添加以下内容：\n```ini\n[Unit]\nDescription=Autossh Reverse Tunnel Service\nAfter=network.target\n\n[Service]\nType=simple\nUser=orangepi\nGroup=orangepi\nEnvironment=\"AUTOSSH_GATETIME=0\"\nExecStart=/usr/bin/autossh -M [监视端口] -N -R [远程端口]:localhost:22 -i /home/orangepi/.ssh/id_rsa [用户名]@[服务器ip]\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n```\n其中22端口为SSH登录的端口。\n\n启用并启动服务：\n```bash\nsudo systemctl daemon-reload\nsudo systemctl enable autossh-tunnel.service\nsudo systemctl start autossh-tunnel.service\n```","source":"_posts/2025-06-01-内网穿透AutoSSH.md","raw":"---\ntitle: 内网穿透—AutoSSH\ndate: 2025-06-01 10:34:58\nupdated: 2025-04-20 17:27:53\ncategories:\n  - [服务器&嵌入式平台操作, 工具]\ntags:\npermalink: 内网穿透—autossh/\n---\n\n$Last Edited：2025.04.20/17:25$\n___\n\n参考：[利用AutoSSH建立SSH隧道，实现内网穿透 - 知乎](https://zhuanlan.zhihu.com/p/112227542)\n[autossh 配置开机启动_autossh开机自启-CSDN博客](https://blog.csdn.net/matrix273/article/details/104058716)\n[SSH隧道详解与使用AutoSSH实现稳定的内网穿透_autossh实现内网穿透-CSDN博客](https://blog.csdn.net/yao51011010/article/details/137122354)\n### 1.前期配置\n#### 免密登录\n​SSH反向链接会因为超时而关闭，如果关闭了那从外网连通内网的通道就无法维持，为此我们需要结合免密码登录及 AutoSSH 来提供稳定的 SSH 反向代理隧道。\n\n​ 在内网主机上产生公钥和私钥\n```bash\nssh-keygen\n```\n然后按三次回车执行默认选项生成公钥和私钥。会生成密钥文件和私钥文件 id_rsa,id_rsa.pub 或 id_dsa,id_dsa.pub\n\n​拷贝秘钥 在内网主机上继续执行如下命令，将内网主机上的秘钥文件 copy 到云服务器中。\n```bash\nssh-copy-id  username@ip\n```\n其中“username”是云服务器的用户名，ip 为云服务器的 ip，然后按照提示输入云服务器的密码就完成了。\n\n#### 修改SSH配置文件\n修改云服务器的 SSH 配置文件`/etc/ssh/sshd_config`\n```text\nGatewayPorts yes\n```\n​ 这样可以把监听的端口绑定到任意 IP 0.0.0.0 上，否则只有本机 127.0.0.1 可以访问。\n\n​ 重启SSHD服务\n```bash\nsudo service sshd restart\n```\n\n#### 云服务器开放端口\n将云服务器用于转发的端口放通，在安全组设置中，只放通入方向的就可以，协议为TCP。\n\n### 2. 安装与使用`autossh`\n在内网主机中安装。\n在大多数Linux发行版中，可以通过包管理器安装`autossh`：\n```bash\nsudo apt-get install autossh  # Debian/Ubuntu\nsudo yum install autossh      # CentOS\n```\n\n在内网主机 A上，利用 `autossh`建立一条 SSH 隧道\n```bash\nautossh -M 4010 -NR 80:localhost:4000 [用户名]@[服务器ip] (-p xxxx)\n```\n​\n检查端口情况：\n```bash\nlsof -i:4010\n```\n\n**参数解释：**\n- “-M 4010”意思是使用内网主机 A 的 4010 端口监视 SSH 连接状态，连接出问题了会自动重连\n- “ -N”意思是不执行远程命令\n- “-R”意思是将远程主机（公网主机 B）的某个端口转发到本地指定机器的指定端口\n\n​ **代码解释：**\n- “80:localhost:4000”意思是将内网主机 A 的 4000 号端口转发至公网主机 B 的 80 号端口上  \n- “-p xxxx”意思是公网主机 B 的 SSH 端口，如果是默认的 22 号端口，则可以不输入\n\n### 3. 使用`systemd`自启动服务\n\n创建一个`systemd`服务文件，例如`autossh-tunnel.service`：\n```bash\nsudo nano /etc/systemd/system/autossh-tunnel.service\n```\n\n在文件中添加以下内容：\n```ini\n[Unit]\nDescription=Autossh Reverse Tunnel Service\nAfter=network.target\n\n[Service]\nType=simple\nUser=orangepi\nGroup=orangepi\nEnvironment=\"AUTOSSH_GATETIME=0\"\nExecStart=/usr/bin/autossh -M [监视端口] -N -R [远程端口]:localhost:22 -i /home/orangepi/.ssh/id_rsa [用户名]@[服务器ip]\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n```\n其中22端口为SSH登录的端口。\n\n启用并启动服务：\n```bash\nsudo systemctl daemon-reload\nsudo systemctl enable autossh-tunnel.service\nsudo systemctl start autossh-tunnel.service\n```","slug":"2025-06-01-内网穿透AutoSSH","published":1,"__permalink":"内网穿透—autossh/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0n9000xzovd332gfwxq","content":"<p>$Last Edited：2025.04.20&#x2F;17:25$</p>\n<hr>\n<p>参考：<a href=\"https://zhuanlan.zhihu.com/p/112227542\">利用AutoSSH建立SSH隧道，实现内网穿透 - 知乎</a><br><a href=\"https://blog.csdn.net/matrix273/article/details/104058716\">autossh 配置开机启动_autossh开机自启-CSDN博客</a><br><a href=\"https://blog.csdn.net/yao51011010/article/details/137122354\">SSH隧道详解与使用AutoSSH实现稳定的内网穿透_autossh实现内网穿透-CSDN博客</a></p>\n<h3 id=\"1-前期配置\"><a href=\"#1-前期配置\" class=\"headerlink\" title=\"1.前期配置\"></a>1.前期配置</h3><h4 id=\"免密登录\"><a href=\"#免密登录\" class=\"headerlink\" title=\"免密登录\"></a>免密登录</h4><p>​SSH反向链接会因为超时而关闭，如果关闭了那从外网连通内网的通道就无法维持，为此我们需要结合免密码登录及 AutoSSH 来提供稳定的 SSH 反向代理隧道。</p>\n<p>​ 在内网主机上产生公钥和私钥</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br></pre></td></tr></table></figure>\n<p>然后按三次回车执行默认选项生成公钥和私钥。会生成密钥文件和私钥文件 id_rsa,id_rsa.pub 或 id_dsa,id_dsa.pub</p>\n<p>​拷贝秘钥 在内网主机上继续执行如下命令，将内网主机上的秘钥文件 copy 到云服务器中。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id  username@ip</span><br></pre></td></tr></table></figure>\n<p>其中“username”是云服务器的用户名，ip 为云服务器的 ip，然后按照提示输入云服务器的密码就完成了。</p>\n<h4 id=\"修改SSH配置文件\"><a href=\"#修改SSH配置文件\" class=\"headerlink\" title=\"修改SSH配置文件\"></a>修改SSH配置文件</h4><p>修改云服务器的 SSH 配置文件<code>/etc/ssh/sshd_config</code></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GatewayPorts yes</span><br></pre></td></tr></table></figure>\n<p>​ 这样可以把监听的端口绑定到任意 IP 0.0.0.0 上，否则只有本机 127.0.0.1 可以访问。</p>\n<p>​ 重启SSHD服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> service sshd restart</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"云服务器开放端口\"><a href=\"#云服务器开放端口\" class=\"headerlink\" title=\"云服务器开放端口\"></a>云服务器开放端口</h4><p>将云服务器用于转发的端口放通，在安全组设置中，只放通入方向的就可以，协议为TCP。</p>\n<h3 id=\"2-安装与使用autossh\"><a href=\"#2-安装与使用autossh\" class=\"headerlink\" title=\"2. 安装与使用autossh\"></a>2. 安装与使用<code>autossh</code></h3><p>在内网主机中安装。<br>在大多数Linux发行版中，可以通过包管理器安装<code>autossh</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install autossh  <span class=\"comment\"># Debian/Ubuntu</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> yum install autossh      <span class=\"comment\"># CentOS</span></span><br></pre></td></tr></table></figure>\n\n<p>在内网主机 A上，利用 <code>autossh</code>建立一条 SSH 隧道</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">autossh -M 4010 -NR 80:localhost:4000 [用户名]@[服务器ip] (-p xxxx)</span><br></pre></td></tr></table></figure>\n<p>​<br>检查端口情况：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:4010</span><br></pre></td></tr></table></figure>\n\n<p><strong>参数解释：</strong></p>\n<ul>\n<li>“-M 4010”意思是使用内网主机 A 的 4010 端口监视 SSH 连接状态，连接出问题了会自动重连</li>\n<li>“ -N”意思是不执行远程命令</li>\n<li>“-R”意思是将远程主机（公网主机 B）的某个端口转发到本地指定机器的指定端口</li>\n</ul>\n<p>​ <strong>代码解释：</strong></p>\n<ul>\n<li>“80:localhost:4000”意思是将内网主机 A 的 4000 号端口转发至公网主机 B 的 80 号端口上  </li>\n<li>“-p xxxx”意思是公网主机 B 的 SSH 端口，如果是默认的 22 号端口，则可以不输入</li>\n</ul>\n<h3 id=\"3-使用systemd自启动服务\"><a href=\"#3-使用systemd自启动服务\" class=\"headerlink\" title=\"3. 使用systemd自启动服务\"></a>3. 使用<code>systemd</code>自启动服务</h3><p>创建一个<code>systemd</code>服务文件，例如<code>autossh-tunnel.service</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nano /etc/systemd/system/autossh-tunnel.service</span><br></pre></td></tr></table></figure>\n\n<p>在文件中添加以下内容：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[Unit]</span></span><br><span class=\"line\"><span class=\"attr\">Description</span>=Autossh Reverse Tunnel Service</span><br><span class=\"line\"><span class=\"attr\">After</span>=network.target</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Service]</span></span><br><span class=\"line\"><span class=\"attr\">Type</span>=simple</span><br><span class=\"line\"><span class=\"attr\">User</span>=orangepi</span><br><span class=\"line\"><span class=\"attr\">Group</span>=orangepi</span><br><span class=\"line\"><span class=\"attr\">Environment</span>=<span class=\"string\">&quot;AUTOSSH_GATETIME=0&quot;</span></span><br><span class=\"line\"><span class=\"attr\">ExecStart</span>=/usr/bin/autossh -M [监视端口] -N -R [远程端口]:localhost:<span class=\"number\">22</span> -i /home/orangepi/.ssh/id_rsa [用户名]@[服务器ip]</span><br><span class=\"line\"><span class=\"attr\">Restart</span>=<span class=\"literal\">on</span>-failure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Install]</span></span><br><span class=\"line\"><span class=\"attr\">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>\n<p>其中22端口为SSH登录的端口。</p>\n<p>启用并启动服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl daemon-reload</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl <span class=\"built_in\">enable</span> autossh-tunnel.service</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl start autossh-tunnel.service</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>$Last Edited：2025.04.20&#x2F;17:25$</p>\n<hr>\n<p>参考：<a href=\"https://zhuanlan.zhihu.com/p/112227542\">利用AutoSSH建立SSH隧道，实现内网穿透 - 知乎</a><br><a href=\"https://blog.csdn.net/matrix273/article/details/104058716\">autossh 配置开机启动_autossh开机自启-CSDN博客</a><br><a href=\"https://blog.csdn.net/yao51011010/article/details/137122354\">SSH隧道详解与使用AutoSSH实现稳定的内网穿透_autossh实现内网穿透-CSDN博客</a></p>\n<h3 id=\"1-前期配置\"><a href=\"#1-前期配置\" class=\"headerlink\" title=\"1.前期配置\"></a>1.前期配置</h3><h4 id=\"免密登录\"><a href=\"#免密登录\" class=\"headerlink\" title=\"免密登录\"></a>免密登录</h4><p>​SSH反向链接会因为超时而关闭，如果关闭了那从外网连通内网的通道就无法维持，为此我们需要结合免密码登录及 AutoSSH 来提供稳定的 SSH 反向代理隧道。</p>\n<p>​ 在内网主机上产生公钥和私钥</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br></pre></td></tr></table></figure>\n<p>然后按三次回车执行默认选项生成公钥和私钥。会生成密钥文件和私钥文件 id_rsa,id_rsa.pub 或 id_dsa,id_dsa.pub</p>\n<p>​拷贝秘钥 在内网主机上继续执行如下命令，将内网主机上的秘钥文件 copy 到云服务器中。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id  username@ip</span><br></pre></td></tr></table></figure>\n<p>其中“username”是云服务器的用户名，ip 为云服务器的 ip，然后按照提示输入云服务器的密码就完成了。</p>\n<h4 id=\"修改SSH配置文件\"><a href=\"#修改SSH配置文件\" class=\"headerlink\" title=\"修改SSH配置文件\"></a>修改SSH配置文件</h4><p>修改云服务器的 SSH 配置文件<code>/etc/ssh/sshd_config</code></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GatewayPorts yes</span><br></pre></td></tr></table></figure>\n<p>​ 这样可以把监听的端口绑定到任意 IP 0.0.0.0 上，否则只有本机 127.0.0.1 可以访问。</p>\n<p>​ 重启SSHD服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> service sshd restart</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"云服务器开放端口\"><a href=\"#云服务器开放端口\" class=\"headerlink\" title=\"云服务器开放端口\"></a>云服务器开放端口</h4><p>将云服务器用于转发的端口放通，在安全组设置中，只放通入方向的就可以，协议为TCP。</p>\n<h3 id=\"2-安装与使用autossh\"><a href=\"#2-安装与使用autossh\" class=\"headerlink\" title=\"2. 安装与使用autossh\"></a>2. 安装与使用<code>autossh</code></h3><p>在内网主机中安装。<br>在大多数Linux发行版中，可以通过包管理器安装<code>autossh</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install autossh  <span class=\"comment\"># Debian/Ubuntu</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> yum install autossh      <span class=\"comment\"># CentOS</span></span><br></pre></td></tr></table></figure>\n\n<p>在内网主机 A上，利用 <code>autossh</code>建立一条 SSH 隧道</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">autossh -M 4010 -NR 80:localhost:4000 [用户名]@[服务器ip] (-p xxxx)</span><br></pre></td></tr></table></figure>\n<p>​<br>检查端口情况：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:4010</span><br></pre></td></tr></table></figure>\n\n<p><strong>参数解释：</strong></p>\n<ul>\n<li>“-M 4010”意思是使用内网主机 A 的 4010 端口监视 SSH 连接状态，连接出问题了会自动重连</li>\n<li>“ -N”意思是不执行远程命令</li>\n<li>“-R”意思是将远程主机（公网主机 B）的某个端口转发到本地指定机器的指定端口</li>\n</ul>\n<p>​ <strong>代码解释：</strong></p>\n<ul>\n<li>“80:localhost:4000”意思是将内网主机 A 的 4000 号端口转发至公网主机 B 的 80 号端口上  </li>\n<li>“-p xxxx”意思是公网主机 B 的 SSH 端口，如果是默认的 22 号端口，则可以不输入</li>\n</ul>\n<h3 id=\"3-使用systemd自启动服务\"><a href=\"#3-使用systemd自启动服务\" class=\"headerlink\" title=\"3. 使用systemd自启动服务\"></a>3. 使用<code>systemd</code>自启动服务</h3><p>创建一个<code>systemd</code>服务文件，例如<code>autossh-tunnel.service</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nano /etc/systemd/system/autossh-tunnel.service</span><br></pre></td></tr></table></figure>\n\n<p>在文件中添加以下内容：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[Unit]</span></span><br><span class=\"line\"><span class=\"attr\">Description</span>=Autossh Reverse Tunnel Service</span><br><span class=\"line\"><span class=\"attr\">After</span>=network.target</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Service]</span></span><br><span class=\"line\"><span class=\"attr\">Type</span>=simple</span><br><span class=\"line\"><span class=\"attr\">User</span>=orangepi</span><br><span class=\"line\"><span class=\"attr\">Group</span>=orangepi</span><br><span class=\"line\"><span class=\"attr\">Environment</span>=<span class=\"string\">&quot;AUTOSSH_GATETIME=0&quot;</span></span><br><span class=\"line\"><span class=\"attr\">ExecStart</span>=/usr/bin/autossh -M [监视端口] -N -R [远程端口]:localhost:<span class=\"number\">22</span> -i /home/orangepi/.ssh/id_rsa [用户名]@[服务器ip]</span><br><span class=\"line\"><span class=\"attr\">Restart</span>=<span class=\"literal\">on</span>-failure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Install]</span></span><br><span class=\"line\"><span class=\"attr\">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>\n<p>其中22端口为SSH登录的端口。</p>\n<p>启用并启动服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl daemon-reload</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl <span class=\"built_in\">enable</span> autossh-tunnel.service</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl start autossh-tunnel.service</span><br></pre></td></tr></table></figure>"},{"title":"内网穿透—Frp","date":"2025-06-01T02:34:58.000Z","updated":"2024-12-22T12:53:39.000Z","_content":"\nfrp 是一款高性能的反向代理应用，专注于内网穿透。它支持多种协议，包括 TCP、UDP、HTTP、HTTPS 等，并且具备 P2P 通信功能。使用 frp，您可以安全、便捷地将内网服务暴露到公网，通过拥有公网 IP 的节点进行中转。\n## SSH访问内网——服务器端配置\n参考：[将内网linux服务器映射到云服务器上，使用ssh远程访问（frp内网穿透）_本地ip映射到云服务器-CSDN博客](https://blog.csdn.net/qq_38212715/article/details/129490126?spm=1001.2014.3001.5506)\n[frp (gofrp.org)](https://gofrp.org/zh-cn/)\n\n> [!NOTE] 操作环境\n> 服务器端——阿里云服务器Ubuntu 22.04.2 LTS (GNU/Linux 5.15.0-71-generic x86_64)\n> 客户端——香橙派\n> \n### 1.云服务器设置\n云服务器选择的是`阿里云`,需要开放服务器用于`frp连接`和`SSH登录`的端口，可以自行设置。这里frp开放默认的7000端口，SSH开放默认的6000端口和2001-2004端口，只需要在`入方向`开放。\n![Frp-阿里云安全组配置.png](/images/Frp-阿里云安全组配置.png)\n### 2.下载frp\n在网站[Releases · fatedier/frp (github.com)](https://github.com/fatedier/frp/releases)上下载对应系统的frp。可以用以下指令显示系统全部信息\n```bash\nuname -a\n```\n![Frp-release.png](/images/Frp-release.png)\n### 3.配置frps.toml文件\n将上一步得到的安装包上传linux客户端并解压。\n```bash\ntar -zxvf frp_0.53.2_linux_amd64.tar.gz\n```\n进入文件夹并编辑配置文件`frps.toml`。\n```bash\ncd frp_0.53.2_linux_amd64\nsudo vim frps.toml\n```\n修改bind_port为`frp连接`用到的端口\n```bash\nbindPort = 7000\n```\n### 4.使用systemd管理服务\n如果 Linux 客户端上尚未安装 systemd，可以使用包管理器如 `yum`（适用于 CentOS/RHEL）或 `apt`（适用于 Debian/Ubuntu）来安装它：\n```bash\n# 使用 yum 安装 systemd（CentOS/RHEL）\nyum install systemd\n\n# 使用 apt 安装 systemd（Debian/Ubuntu）\napt install systemd\n```\n使用文本编辑器 (如 vim) 在 `/etc/systemd/system` 目录下创建一个 `frps.service` 文件，用于配置 frps 服务\n```bash\nsudo vim /etc/systemd/system/frps.service\n```\n写入内容\n```bash\n[Unit]\n# 服务名称，可自定义\nDescription = frp server\nAfter = network.target syslog.target\nWants = network.target\n\n[Service]\nType = simple\n# 启动frps的命令，需修改为您的frps的安装路径\nExecStart = /root/frp_0.53.2_linux_amd64/frps -c /root/frp_0.53.2_linux_amd64/frps.toml\n\n[Install]\nWantedBy = multi-user.target\n```\nsystemd常用命令\n```bash\n# 启动frp\nsudo systemctl start frps\n# 停止frp\nsudo systemctl stop frps\n# 重启frp\nsudo systemctl restart frps\n# 查看frp状态\nsudo systemctl status frps\n# 设置服务开机自启动\nsudo systemctl enable frps\n```\n\n## SSH访问内网——客户端配置\n\n> [!NOTE] 操作环境\n> 服务器端——阿里云服务器Ubuntu 22.04.2 LTS (GNU/Linux 5.15.0-71-generic x86_64)\n> 客户端——香橙派\n> \n### 1.下载frp\n==可参照服务器配置篇==\n### 2.配置frpc.toml文件\n将上一步得到的安装包上传linux客户端并解压。\n```\ntar -zxvf frp_0.53.2_linux_arm64.tar.gz\n```\n进入文件夹并编辑配置文件`frpc.toml`。\n```\ncd frp_0.53.2_linux_arm64\nsudo vim frpc.toml\n```\n修改目录下的配置文件,`云服务器ip`为59.110.168.138，`Frp端口`默认7000，`远程SSH端口`默认6000。根据实际修改文件中的这部分信息。\n```\nserverAddr = \"59.110.168.138\"\nserverPort = 7000\n\n[proxies](proxies)\nname = \"ubuntu\"\ntype = \"tcp\"\nlocalIP = \"127.0.0.1\"\nlocalPort = 22\nremotePort = 6000\n```\n### 3.使用systemd管理服务\n参考：[frp 开机自启动，解决了网络依赖问题。_frp 搭建 start error: proxy [nacos_tcp] already exis-CSDN博客](https://blog.csdn.net/programguo/article/details/108435717?spm=1001.2014.3001.5506)\n\n如果 Linux 客户端上尚未安装 systemd，可以使用包管理器如 `yum`（适用于 CentOS/RHEL）或 `apt`（适用于 Debian/Ubuntu）来安装它：\n```bash\n# 使用 yum 安装 systemd（CentOS/RHEL）\nyum install systemd\n\n# 使用 apt 安装 systemd（Debian/Ubuntu）\napt install systemd\n```\n使用文本编辑器 (如 vim) 在 `/etc/systemd/system` 目录下创建一个 `frpc.service` 文件，用于配置 frpc 服务\n```bash\nsudo vim /etc/systemd/system/frpc.service\n```\n写入内容\n```text\n[Unit]\n# 服务名称，可自定义\nDescription = frp client\nAfter = network.target syslog.target\nWants = network.target\n\n[Service]\nType = simple `启动frps的命令，需修改为您的frps的安装路径`\nExecStart = /root/frp_0.53.2_linux_arm64/frpc -c /root/frp_0.53.2_linux_arm64/frpc.toml\n `防止客户端开机未联网，导致启动失败。设置1分钟后再次启动`\nRestart= always\nRestartSec=1min\n\n[Install]\nWantedBy = multi-user.target\n```\nsystemd常用命令\n```bash `启动frp`\nsudo systemctl start frpc `停止frp`\nsudo systemctl stop frpc `重启frp`\nsudo systemctl restart frpc `查看frp状态`\nsudo systemctl status frpc `设置服务开机自启动`\nsudo systemctl enable frpc\n```","source":"_posts/2025-06-01-内网穿透Frp.md","raw":"---\ntitle: 内网穿透—Frp\ndate: 2025-06-01 10:34:58\nupdated: 2024-12-22 20:53:39\ncategories:\n  - [服务器&嵌入式平台操作, 工具]\ntags:\npermalink: 内网穿透—frp/\n---\n\nfrp 是一款高性能的反向代理应用，专注于内网穿透。它支持多种协议，包括 TCP、UDP、HTTP、HTTPS 等，并且具备 P2P 通信功能。使用 frp，您可以安全、便捷地将内网服务暴露到公网，通过拥有公网 IP 的节点进行中转。\n## SSH访问内网——服务器端配置\n参考：[将内网linux服务器映射到云服务器上，使用ssh远程访问（frp内网穿透）_本地ip映射到云服务器-CSDN博客](https://blog.csdn.net/qq_38212715/article/details/129490126?spm=1001.2014.3001.5506)\n[frp (gofrp.org)](https://gofrp.org/zh-cn/)\n\n> [!NOTE] 操作环境\n> 服务器端——阿里云服务器Ubuntu 22.04.2 LTS (GNU/Linux 5.15.0-71-generic x86_64)\n> 客户端——香橙派\n> \n### 1.云服务器设置\n云服务器选择的是`阿里云`,需要开放服务器用于`frp连接`和`SSH登录`的端口，可以自行设置。这里frp开放默认的7000端口，SSH开放默认的6000端口和2001-2004端口，只需要在`入方向`开放。\n![Frp-阿里云安全组配置.png](/images/Frp-阿里云安全组配置.png)\n### 2.下载frp\n在网站[Releases · fatedier/frp (github.com)](https://github.com/fatedier/frp/releases)上下载对应系统的frp。可以用以下指令显示系统全部信息\n```bash\nuname -a\n```\n![Frp-release.png](/images/Frp-release.png)\n### 3.配置frps.toml文件\n将上一步得到的安装包上传linux客户端并解压。\n```bash\ntar -zxvf frp_0.53.2_linux_amd64.tar.gz\n```\n进入文件夹并编辑配置文件`frps.toml`。\n```bash\ncd frp_0.53.2_linux_amd64\nsudo vim frps.toml\n```\n修改bind_port为`frp连接`用到的端口\n```bash\nbindPort = 7000\n```\n### 4.使用systemd管理服务\n如果 Linux 客户端上尚未安装 systemd，可以使用包管理器如 `yum`（适用于 CentOS/RHEL）或 `apt`（适用于 Debian/Ubuntu）来安装它：\n```bash\n# 使用 yum 安装 systemd（CentOS/RHEL）\nyum install systemd\n\n# 使用 apt 安装 systemd（Debian/Ubuntu）\napt install systemd\n```\n使用文本编辑器 (如 vim) 在 `/etc/systemd/system` 目录下创建一个 `frps.service` 文件，用于配置 frps 服务\n```bash\nsudo vim /etc/systemd/system/frps.service\n```\n写入内容\n```bash\n[Unit]\n# 服务名称，可自定义\nDescription = frp server\nAfter = network.target syslog.target\nWants = network.target\n\n[Service]\nType = simple\n# 启动frps的命令，需修改为您的frps的安装路径\nExecStart = /root/frp_0.53.2_linux_amd64/frps -c /root/frp_0.53.2_linux_amd64/frps.toml\n\n[Install]\nWantedBy = multi-user.target\n```\nsystemd常用命令\n```bash\n# 启动frp\nsudo systemctl start frps\n# 停止frp\nsudo systemctl stop frps\n# 重启frp\nsudo systemctl restart frps\n# 查看frp状态\nsudo systemctl status frps\n# 设置服务开机自启动\nsudo systemctl enable frps\n```\n\n## SSH访问内网——客户端配置\n\n> [!NOTE] 操作环境\n> 服务器端——阿里云服务器Ubuntu 22.04.2 LTS (GNU/Linux 5.15.0-71-generic x86_64)\n> 客户端——香橙派\n> \n### 1.下载frp\n==可参照服务器配置篇==\n### 2.配置frpc.toml文件\n将上一步得到的安装包上传linux客户端并解压。\n```\ntar -zxvf frp_0.53.2_linux_arm64.tar.gz\n```\n进入文件夹并编辑配置文件`frpc.toml`。\n```\ncd frp_0.53.2_linux_arm64\nsudo vim frpc.toml\n```\n修改目录下的配置文件,`云服务器ip`为59.110.168.138，`Frp端口`默认7000，`远程SSH端口`默认6000。根据实际修改文件中的这部分信息。\n```\nserverAddr = \"59.110.168.138\"\nserverPort = 7000\n\n[proxies](proxies)\nname = \"ubuntu\"\ntype = \"tcp\"\nlocalIP = \"127.0.0.1\"\nlocalPort = 22\nremotePort = 6000\n```\n### 3.使用systemd管理服务\n参考：[frp 开机自启动，解决了网络依赖问题。_frp 搭建 start error: proxy [nacos_tcp] already exis-CSDN博客](https://blog.csdn.net/programguo/article/details/108435717?spm=1001.2014.3001.5506)\n\n如果 Linux 客户端上尚未安装 systemd，可以使用包管理器如 `yum`（适用于 CentOS/RHEL）或 `apt`（适用于 Debian/Ubuntu）来安装它：\n```bash\n# 使用 yum 安装 systemd（CentOS/RHEL）\nyum install systemd\n\n# 使用 apt 安装 systemd（Debian/Ubuntu）\napt install systemd\n```\n使用文本编辑器 (如 vim) 在 `/etc/systemd/system` 目录下创建一个 `frpc.service` 文件，用于配置 frpc 服务\n```bash\nsudo vim /etc/systemd/system/frpc.service\n```\n写入内容\n```text\n[Unit]\n# 服务名称，可自定义\nDescription = frp client\nAfter = network.target syslog.target\nWants = network.target\n\n[Service]\nType = simple `启动frps的命令，需修改为您的frps的安装路径`\nExecStart = /root/frp_0.53.2_linux_arm64/frpc -c /root/frp_0.53.2_linux_arm64/frpc.toml\n `防止客户端开机未联网，导致启动失败。设置1分钟后再次启动`\nRestart= always\nRestartSec=1min\n\n[Install]\nWantedBy = multi-user.target\n```\nsystemd常用命令\n```bash `启动frp`\nsudo systemctl start frpc `停止frp`\nsudo systemctl stop frpc `重启frp`\nsudo systemctl restart frpc `查看frp状态`\nsudo systemctl status frpc `设置服务开机自启动`\nsudo systemctl enable frpc\n```","slug":"2025-06-01-内网穿透Frp","published":1,"__permalink":"内网穿透—frp/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0na000zzovdhm8o044e","content":"<p>frp 是一款高性能的反向代理应用，专注于内网穿透。它支持多种协议，包括 TCP、UDP、HTTP、HTTPS 等，并且具备 P2P 通信功能。使用 frp，您可以安全、便捷地将内网服务暴露到公网，通过拥有公网 IP 的节点进行中转。</p>\n<h2 id=\"SSH访问内网——服务器端配置\"><a href=\"#SSH访问内网——服务器端配置\" class=\"headerlink\" title=\"SSH访问内网——服务器端配置\"></a>SSH访问内网——服务器端配置</h2><p>参考：<a href=\"https://blog.csdn.net/qq_38212715/article/details/129490126?spm=1001.2014.3001.5506\">将内网linux服务器映射到云服务器上，使用ssh远程访问（frp内网穿透）_本地ip映射到云服务器-CSDN博客</a><br><a href=\"https://gofrp.org/zh-cn/\">frp (gofrp.org)</a></p>\n<blockquote>\n<p>[!NOTE] 操作环境<br>服务器端——阿里云服务器Ubuntu 22.04.2 LTS (GNU&#x2F;Linux 5.15.0-71-generic x86_64)<br>客户端——香橙派</p>\n</blockquote>\n<h3 id=\"1-云服务器设置\"><a href=\"#1-云服务器设置\" class=\"headerlink\" title=\"1.云服务器设置\"></a>1.云服务器设置</h3><p>云服务器选择的是<code>阿里云</code>,需要开放服务器用于<code>frp连接</code>和<code>SSH登录</code>的端口，可以自行设置。这里frp开放默认的7000端口，SSH开放默认的6000端口和2001-2004端口，只需要在<code>入方向</code>开放。<br><img src=\"/418blog/images/Frp-%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%89%E5%85%A8%E7%BB%84%E9%85%8D%E7%BD%AE.png\" alt=\"Frp-阿里云安全组配置.png\"></p>\n<h3 id=\"2-下载frp\"><a href=\"#2-下载frp\" class=\"headerlink\" title=\"2.下载frp\"></a>2.下载frp</h3><p>在网站<a href=\"https://github.com/fatedier/frp/releases\">Releases · fatedier&#x2F;frp (github.com)</a>上下载对应系统的frp。可以用以下指令显示系统全部信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">uname</span> -a</span><br></pre></td></tr></table></figure>\n<p><img src=\"/418blog/images/Frp-release.png\" alt=\"Frp-release.png\"></p>\n<h3 id=\"3-配置frps-toml文件\"><a href=\"#3-配置frps-toml文件\" class=\"headerlink\" title=\"3.配置frps.toml文件\"></a>3.配置frps.toml文件</h3><p>将上一步得到的安装包上传linux客户端并解压。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf frp_0.53.2_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>\n<p>进入文件夹并编辑配置文件<code>frps.toml</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> frp_0.53.2_linux_amd64</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> vim frps.toml</span><br></pre></td></tr></table></figure>\n<p>修改bind_port为<code>frp连接</code>用到的端口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bindPort = 7000</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-使用systemd管理服务\"><a href=\"#4-使用systemd管理服务\" class=\"headerlink\" title=\"4.使用systemd管理服务\"></a>4.使用systemd管理服务</h3><p>如果 Linux 客户端上尚未安装 systemd，可以使用包管理器如 <code>yum</code>（适用于 CentOS&#x2F;RHEL）或 <code>apt</code>（适用于 Debian&#x2F;Ubuntu）来安装它：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用 yum 安装 systemd（CentOS/RHEL）</span></span><br><span class=\"line\">yum install systemd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 apt 安装 systemd（Debian/Ubuntu）</span></span><br><span class=\"line\">apt install systemd</span><br></pre></td></tr></table></figure>\n<p>使用文本编辑器 (如 vim) 在 <code>/etc/systemd/system</code> 目录下创建一个 <code>frps.service</code> 文件，用于配置 frps 服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> vim /etc/systemd/system/frps.service</span><br></pre></td></tr></table></figure>\n<p>写入内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\"><span class=\"comment\"># 服务名称，可自定义</span></span><br><span class=\"line\">Description = frp server</span><br><span class=\"line\">After = network.target syslog.target</span><br><span class=\"line\">Wants = network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type = simple</span><br><span class=\"line\"><span class=\"comment\"># 启动frps的命令，需修改为您的frps的安装路径</span></span><br><span class=\"line\">ExecStart = /root/frp_0.53.2_linux_amd64/frps -c /root/frp_0.53.2_linux_amd64/frps.toml</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy = multi-user.target</span><br></pre></td></tr></table></figure>\n<p>systemd常用命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动frp</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl start frps</span><br><span class=\"line\"><span class=\"comment\"># 停止frp</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl stop frps</span><br><span class=\"line\"><span class=\"comment\"># 重启frp</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart frps</span><br><span class=\"line\"><span class=\"comment\"># 查看frp状态</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl status frps</span><br><span class=\"line\"><span class=\"comment\"># 设置服务开机自启动</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl <span class=\"built_in\">enable</span> frps</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SSH访问内网——客户端配置\"><a href=\"#SSH访问内网——客户端配置\" class=\"headerlink\" title=\"SSH访问内网——客户端配置\"></a>SSH访问内网——客户端配置</h2><blockquote>\n<p>[!NOTE] 操作环境<br>服务器端——阿里云服务器Ubuntu 22.04.2 LTS (GNU&#x2F;Linux 5.15.0-71-generic x86_64)<br>客户端——香橙派</p>\n</blockquote>\n<h3 id=\"1-下载frp\"><a href=\"#1-下载frp\" class=\"headerlink\" title=\"1.下载frp\"></a>1.下载frp</h3><p>&#x3D;&#x3D;可参照服务器配置篇&#x3D;&#x3D;</p>\n<h3 id=\"2-配置frpc-toml文件\"><a href=\"#2-配置frpc-toml文件\" class=\"headerlink\" title=\"2.配置frpc.toml文件\"></a>2.配置frpc.toml文件</h3><p>将上一步得到的安装包上传linux客户端并解压。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf frp_0.53.2_linux_arm64.tar.gz</span><br></pre></td></tr></table></figure>\n<p>进入文件夹并编辑配置文件<code>frpc.toml</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd frp_0.53.2_linux_arm64</span><br><span class=\"line\">sudo vim frpc.toml</span><br></pre></td></tr></table></figure>\n<p>修改目录下的配置文件,<code>云服务器ip</code>为59.110.168.138，<code>Frp端口</code>默认7000，<code>远程SSH端口</code>默认6000。根据实际修改文件中的这部分信息。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">serverAddr = &quot;59.110.168.138&quot;</span><br><span class=\"line\">serverPort = 7000</span><br><span class=\"line\"></span><br><span class=\"line\">[proxies](proxies)</span><br><span class=\"line\">name = &quot;ubuntu&quot;</span><br><span class=\"line\">type = &quot;tcp&quot;</span><br><span class=\"line\">localIP = &quot;127.0.0.1&quot;</span><br><span class=\"line\">localPort = 22</span><br><span class=\"line\">remotePort = 6000</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-使用systemd管理服务\"><a href=\"#3-使用systemd管理服务\" class=\"headerlink\" title=\"3.使用systemd管理服务\"></a>3.使用systemd管理服务</h3><p>参考：<a href=\"https://blog.csdn.net/programguo/article/details/108435717?spm=1001.2014.3001.5506\">frp 开机自启动，解决了网络依赖问题。_frp 搭建 start error: proxy [nacos_tcp] already exis-CSDN博客</a></p>\n<p>如果 Linux 客户端上尚未安装 systemd，可以使用包管理器如 <code>yum</code>（适用于 CentOS&#x2F;RHEL）或 <code>apt</code>（适用于 Debian&#x2F;Ubuntu）来安装它：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用 yum 安装 systemd（CentOS/RHEL）</span></span><br><span class=\"line\">yum install systemd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 apt 安装 systemd（Debian/Ubuntu）</span></span><br><span class=\"line\">apt install systemd</span><br></pre></td></tr></table></figure>\n<p>使用文本编辑器 (如 vim) 在 <code>/etc/systemd/system</code> 目录下创建一个 <code>frpc.service</code> 文件，用于配置 frpc 服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> vim /etc/systemd/system/frpc.service</span><br></pre></td></tr></table></figure>\n<p>写入内容</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\"># 服务名称，可自定义</span><br><span class=\"line\">Description = frp client</span><br><span class=\"line\">After = network.target syslog.target</span><br><span class=\"line\">Wants = network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type = simple `启动frps的命令，需修改为您的frps的安装路径`</span><br><span class=\"line\">ExecStart = /root/frp_0.53.2_linux_arm64/frpc -c /root/frp_0.53.2_linux_arm64/frpc.toml</span><br><span class=\"line\"> `防止客户端开机未联网，导致启动失败。设置1分钟后再次启动`</span><br><span class=\"line\">Restart= always</span><br><span class=\"line\">RestartSec=1min</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy = multi-user.target</span><br></pre></td></tr></table></figure>\n<p>systemd常用命令<br><code>bash `启动frp` sudo systemctl start frpc `停止frp` sudo systemctl stop frpc `重启frp` sudo systemctl restart frpc `查看frp状态` sudo systemctl status frpc `设置服务开机自启动` sudo systemctl enable frpc </code></p>\n","excerpt":"","more":"<p>frp 是一款高性能的反向代理应用，专注于内网穿透。它支持多种协议，包括 TCP、UDP、HTTP、HTTPS 等，并且具备 P2P 通信功能。使用 frp，您可以安全、便捷地将内网服务暴露到公网，通过拥有公网 IP 的节点进行中转。</p>\n<h2 id=\"SSH访问内网——服务器端配置\"><a href=\"#SSH访问内网——服务器端配置\" class=\"headerlink\" title=\"SSH访问内网——服务器端配置\"></a>SSH访问内网——服务器端配置</h2><p>参考：<a href=\"https://blog.csdn.net/qq_38212715/article/details/129490126?spm=1001.2014.3001.5506\">将内网linux服务器映射到云服务器上，使用ssh远程访问（frp内网穿透）_本地ip映射到云服务器-CSDN博客</a><br><a href=\"https://gofrp.org/zh-cn/\">frp (gofrp.org)</a></p>\n<blockquote>\n<p>[!NOTE] 操作环境<br>服务器端——阿里云服务器Ubuntu 22.04.2 LTS (GNU&#x2F;Linux 5.15.0-71-generic x86_64)<br>客户端——香橙派</p>\n</blockquote>\n<h3 id=\"1-云服务器设置\"><a href=\"#1-云服务器设置\" class=\"headerlink\" title=\"1.云服务器设置\"></a>1.云服务器设置</h3><p>云服务器选择的是<code>阿里云</code>,需要开放服务器用于<code>frp连接</code>和<code>SSH登录</code>的端口，可以自行设置。这里frp开放默认的7000端口，SSH开放默认的6000端口和2001-2004端口，只需要在<code>入方向</code>开放。<br><img src=\"/418blog/images/Frp-%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%89%E5%85%A8%E7%BB%84%E9%85%8D%E7%BD%AE.png\" alt=\"Frp-阿里云安全组配置.png\"></p>\n<h3 id=\"2-下载frp\"><a href=\"#2-下载frp\" class=\"headerlink\" title=\"2.下载frp\"></a>2.下载frp</h3><p>在网站<a href=\"https://github.com/fatedier/frp/releases\">Releases · fatedier&#x2F;frp (github.com)</a>上下载对应系统的frp。可以用以下指令显示系统全部信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">uname</span> -a</span><br></pre></td></tr></table></figure>\n<p><img src=\"/418blog/images/Frp-release.png\" alt=\"Frp-release.png\"></p>\n<h3 id=\"3-配置frps-toml文件\"><a href=\"#3-配置frps-toml文件\" class=\"headerlink\" title=\"3.配置frps.toml文件\"></a>3.配置frps.toml文件</h3><p>将上一步得到的安装包上传linux客户端并解压。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf frp_0.53.2_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>\n<p>进入文件夹并编辑配置文件<code>frps.toml</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> frp_0.53.2_linux_amd64</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> vim frps.toml</span><br></pre></td></tr></table></figure>\n<p>修改bind_port为<code>frp连接</code>用到的端口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bindPort = 7000</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-使用systemd管理服务\"><a href=\"#4-使用systemd管理服务\" class=\"headerlink\" title=\"4.使用systemd管理服务\"></a>4.使用systemd管理服务</h3><p>如果 Linux 客户端上尚未安装 systemd，可以使用包管理器如 <code>yum</code>（适用于 CentOS&#x2F;RHEL）或 <code>apt</code>（适用于 Debian&#x2F;Ubuntu）来安装它：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用 yum 安装 systemd（CentOS/RHEL）</span></span><br><span class=\"line\">yum install systemd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 apt 安装 systemd（Debian/Ubuntu）</span></span><br><span class=\"line\">apt install systemd</span><br></pre></td></tr></table></figure>\n<p>使用文本编辑器 (如 vim) 在 <code>/etc/systemd/system</code> 目录下创建一个 <code>frps.service</code> 文件，用于配置 frps 服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> vim /etc/systemd/system/frps.service</span><br></pre></td></tr></table></figure>\n<p>写入内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\"><span class=\"comment\"># 服务名称，可自定义</span></span><br><span class=\"line\">Description = frp server</span><br><span class=\"line\">After = network.target syslog.target</span><br><span class=\"line\">Wants = network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type = simple</span><br><span class=\"line\"><span class=\"comment\"># 启动frps的命令，需修改为您的frps的安装路径</span></span><br><span class=\"line\">ExecStart = /root/frp_0.53.2_linux_amd64/frps -c /root/frp_0.53.2_linux_amd64/frps.toml</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy = multi-user.target</span><br></pre></td></tr></table></figure>\n<p>systemd常用命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动frp</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl start frps</span><br><span class=\"line\"><span class=\"comment\"># 停止frp</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl stop frps</span><br><span class=\"line\"><span class=\"comment\"># 重启frp</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart frps</span><br><span class=\"line\"><span class=\"comment\"># 查看frp状态</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl status frps</span><br><span class=\"line\"><span class=\"comment\"># 设置服务开机自启动</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl <span class=\"built_in\">enable</span> frps</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SSH访问内网——客户端配置\"><a href=\"#SSH访问内网——客户端配置\" class=\"headerlink\" title=\"SSH访问内网——客户端配置\"></a>SSH访问内网——客户端配置</h2><blockquote>\n<p>[!NOTE] 操作环境<br>服务器端——阿里云服务器Ubuntu 22.04.2 LTS (GNU&#x2F;Linux 5.15.0-71-generic x86_64)<br>客户端——香橙派</p>\n</blockquote>\n<h3 id=\"1-下载frp\"><a href=\"#1-下载frp\" class=\"headerlink\" title=\"1.下载frp\"></a>1.下载frp</h3><p>&#x3D;&#x3D;可参照服务器配置篇&#x3D;&#x3D;</p>\n<h3 id=\"2-配置frpc-toml文件\"><a href=\"#2-配置frpc-toml文件\" class=\"headerlink\" title=\"2.配置frpc.toml文件\"></a>2.配置frpc.toml文件</h3><p>将上一步得到的安装包上传linux客户端并解压。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf frp_0.53.2_linux_arm64.tar.gz</span><br></pre></td></tr></table></figure>\n<p>进入文件夹并编辑配置文件<code>frpc.toml</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd frp_0.53.2_linux_arm64</span><br><span class=\"line\">sudo vim frpc.toml</span><br></pre></td></tr></table></figure>\n<p>修改目录下的配置文件,<code>云服务器ip</code>为59.110.168.138，<code>Frp端口</code>默认7000，<code>远程SSH端口</code>默认6000。根据实际修改文件中的这部分信息。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">serverAddr = &quot;59.110.168.138&quot;</span><br><span class=\"line\">serverPort = 7000</span><br><span class=\"line\"></span><br><span class=\"line\">[proxies](proxies)</span><br><span class=\"line\">name = &quot;ubuntu&quot;</span><br><span class=\"line\">type = &quot;tcp&quot;</span><br><span class=\"line\">localIP = &quot;127.0.0.1&quot;</span><br><span class=\"line\">localPort = 22</span><br><span class=\"line\">remotePort = 6000</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-使用systemd管理服务\"><a href=\"#3-使用systemd管理服务\" class=\"headerlink\" title=\"3.使用systemd管理服务\"></a>3.使用systemd管理服务</h3><p>参考：<a href=\"https://blog.csdn.net/programguo/article/details/108435717?spm=1001.2014.3001.5506\">frp 开机自启动，解决了网络依赖问题。_frp 搭建 start error: proxy [nacos_tcp] already exis-CSDN博客</a></p>\n<p>如果 Linux 客户端上尚未安装 systemd，可以使用包管理器如 <code>yum</code>（适用于 CentOS&#x2F;RHEL）或 <code>apt</code>（适用于 Debian&#x2F;Ubuntu）来安装它：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用 yum 安装 systemd（CentOS/RHEL）</span></span><br><span class=\"line\">yum install systemd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 apt 安装 systemd（Debian/Ubuntu）</span></span><br><span class=\"line\">apt install systemd</span><br></pre></td></tr></table></figure>\n<p>使用文本编辑器 (如 vim) 在 <code>/etc/systemd/system</code> 目录下创建一个 <code>frpc.service</code> 文件，用于配置 frpc 服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> vim /etc/systemd/system/frpc.service</span><br></pre></td></tr></table></figure>\n<p>写入内容</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\"># 服务名称，可自定义</span><br><span class=\"line\">Description = frp client</span><br><span class=\"line\">After = network.target syslog.target</span><br><span class=\"line\">Wants = network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type = simple `启动frps的命令，需修改为您的frps的安装路径`</span><br><span class=\"line\">ExecStart = /root/frp_0.53.2_linux_arm64/frpc -c /root/frp_0.53.2_linux_arm64/frpc.toml</span><br><span class=\"line\"> `防止客户端开机未联网，导致启动失败。设置1分钟后再次启动`</span><br><span class=\"line\">Restart= always</span><br><span class=\"line\">RestartSec=1min</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy = multi-user.target</span><br></pre></td></tr></table></figure>\n<p>systemd常用命令<br><code>bash `启动frp` sudo systemctl start frpc `停止frp` sudo systemctl stop frpc `重启frp` sudo systemctl restart frpc `查看frp状态` sudo systemctl status frpc `设置服务开机自启动` sudo systemctl enable frpc </code></p>\n"},{"title":"开启休眠模式","date":"2025-06-01T02:34:58.000Z","updated":"2025-04-29T09:56:47.000Z","_content":"\n","source":"_posts/2025-06-01-开启休眠模式.md","raw":"---\ntitle: 开启休眠模式\ndate: 2025-06-01 10:34:58\nupdated: 2025-04-29 17:56:47\ncategories:\n  - [Windows主机操作]\ntags:\npermalink: 开启休眠模式/\n---\n\n","slug":"2025-06-01-开启休眠模式","published":1,"__permalink":"开启休眠模式/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0nb0012zovd1frf20fi","content":"","excerpt":"","more":""},{"title":"摄像头相关","date":"2025-06-01T02:34:58.000Z","updated":"2025-03-05T12:06:05.000Z","_content":"\n## 树莓派官方CMI摄像头——基础配置\n\n> [!NOTE] 操作环境\n> 树莓派4 官方系统Raspberry Pi OS Lite版\n> Linux raspberrypi 6.1.0-rpi7-rpi-v8 `1` SMP PREEMPT Debian 1:6.1.63-1+rpt1 (2023-11-24) aarch64\n> Python 3.11.2\n> 摄像头感光芯片OV5647\n> \n### 1.驱动\n当前版本的CMI摄像头官方驱动是libcamera\n### 2.Python所需package\n来源于：[解决树莓派原装libcamera(csi)摄像头无法通过opencv读取数据的问题_libcamera opencv-CSDN博客](https://blog.csdn.net/zhangmou_9008/article/details/134047114)\n\n1. 首先创建虚拟环境\n来源于：[[BUG] python3-libcamera not available in venv · Issue `341` · raspberrypi/picamera2 · GitHub](https://github.com/raspberrypi/picamera2/issues/341)\n[Python 使虚拟环境集成特定全局包|极客教程 (geek-docs.com)](https://geek-docs.com/python/python-ask-answer/71_python_make_virtualenv_inherit_specific_packages_from_your_global_sitepackages.html)\n\n```bash\npython -m venv --system-site-packages myenv\n```\n注意指定`--system-site-packages`选项来让虚拟环境继承全局site-packages，便于在虚拟环境中使用`libcamera`包。（由于libcamera目前无法在虚拟环境中安装和使用）\n\n接下来进入虚拟环境\n```bash\nsource myenv/bin/activate\n```\n\n2. 安装OpenCV\n```bash\npip install opencv-python\npip install opencv-python-headless\n```\n\n3. 安装picamera2\n来源于：[GitHub - raspberrypi/picamera2: New libcamera based python library](https://github.com/raspberrypi/picamera2)\n[安装python-prctl报错_you need to install libcap development headers to -CSDN博客](https://blog.csdn.net/xyxyxxxy/article/details/108729329)\n[You need to install libcap development headers to build this module · Issue `18` · facebookresearch/vilbert-multi-task · GitHub](https://github.com/facebookresearch/vilbert-multi-task/issues/18)\n[Welcome to python-prctl’s documentation! — python-prctl 1.6.1 documentation (pythonhosted.org)](https://pythonhosted.org/python-prctl/)\n```bash\nsudo apt install -y python3-libcamera python3-kms++\nsudo apt install -y python3-pyqt5 python3-prctl libatlas-base-dev ffmpeg python3-pip\npip3 install numpy --upgrade\npip3 install picamera2[gui]\n```\n\n对于最后一步可能会出现的错误`You need to install libcap development headers to build this module` 解决方法如下：\n```bash\napt-get update\napt-get install build-essential libcap-dev\n```\n\n### 3.测试程序\n```bash\nfrom picamera2 import Picamera2  \nimport cv2  \nimport time  \n   `初始化`  \npicam2 = Picamera2()    `创建摄像头对象开启摄像头，只能创建一次`  \npicam2.start()  `开启摄像头，无需重复开启`  \ntime.sleep(1)  \n   `抓拍`  \narray = picam2.capture_array(\"main\")    `捕获一帧相机数据，输出为numpy.ndarray类型，与opencv无缝连接`  \n  \ncv2.imwrite('test.png',array)\n```\n\n### 4.其他可行的方法\n在系统环境下安装：\n```bash\nsudo apt install -y python3-picamera2\n```\n\n之后直接创建一个继承全局包的虚拟环境。\nOpenCV的安装方法不变。","source":"_posts/2025-06-01-摄像头相关.md","raw":"---\ntitle: 摄像头相关\ndate: 2025-06-01 10:34:58\nupdated: 2025-03-05 20:06:05\ncategories:\n  - [服务器&嵌入式平台操作, 嵌入式&硬件]\ntags:\npermalink: 摄像头相关/\n---\n\n## 树莓派官方CMI摄像头——基础配置\n\n> [!NOTE] 操作环境\n> 树莓派4 官方系统Raspberry Pi OS Lite版\n> Linux raspberrypi 6.1.0-rpi7-rpi-v8 `1` SMP PREEMPT Debian 1:6.1.63-1+rpt1 (2023-11-24) aarch64\n> Python 3.11.2\n> 摄像头感光芯片OV5647\n> \n### 1.驱动\n当前版本的CMI摄像头官方驱动是libcamera\n### 2.Python所需package\n来源于：[解决树莓派原装libcamera(csi)摄像头无法通过opencv读取数据的问题_libcamera opencv-CSDN博客](https://blog.csdn.net/zhangmou_9008/article/details/134047114)\n\n1. 首先创建虚拟环境\n来源于：[[BUG] python3-libcamera not available in venv · Issue `341` · raspberrypi/picamera2 · GitHub](https://github.com/raspberrypi/picamera2/issues/341)\n[Python 使虚拟环境集成特定全局包|极客教程 (geek-docs.com)](https://geek-docs.com/python/python-ask-answer/71_python_make_virtualenv_inherit_specific_packages_from_your_global_sitepackages.html)\n\n```bash\npython -m venv --system-site-packages myenv\n```\n注意指定`--system-site-packages`选项来让虚拟环境继承全局site-packages，便于在虚拟环境中使用`libcamera`包。（由于libcamera目前无法在虚拟环境中安装和使用）\n\n接下来进入虚拟环境\n```bash\nsource myenv/bin/activate\n```\n\n2. 安装OpenCV\n```bash\npip install opencv-python\npip install opencv-python-headless\n```\n\n3. 安装picamera2\n来源于：[GitHub - raspberrypi/picamera2: New libcamera based python library](https://github.com/raspberrypi/picamera2)\n[安装python-prctl报错_you need to install libcap development headers to -CSDN博客](https://blog.csdn.net/xyxyxxxy/article/details/108729329)\n[You need to install libcap development headers to build this module · Issue `18` · facebookresearch/vilbert-multi-task · GitHub](https://github.com/facebookresearch/vilbert-multi-task/issues/18)\n[Welcome to python-prctl’s documentation! — python-prctl 1.6.1 documentation (pythonhosted.org)](https://pythonhosted.org/python-prctl/)\n```bash\nsudo apt install -y python3-libcamera python3-kms++\nsudo apt install -y python3-pyqt5 python3-prctl libatlas-base-dev ffmpeg python3-pip\npip3 install numpy --upgrade\npip3 install picamera2[gui]\n```\n\n对于最后一步可能会出现的错误`You need to install libcap development headers to build this module` 解决方法如下：\n```bash\napt-get update\napt-get install build-essential libcap-dev\n```\n\n### 3.测试程序\n```bash\nfrom picamera2 import Picamera2  \nimport cv2  \nimport time  \n   `初始化`  \npicam2 = Picamera2()    `创建摄像头对象开启摄像头，只能创建一次`  \npicam2.start()  `开启摄像头，无需重复开启`  \ntime.sleep(1)  \n   `抓拍`  \narray = picam2.capture_array(\"main\")    `捕获一帧相机数据，输出为numpy.ndarray类型，与opencv无缝连接`  \n  \ncv2.imwrite('test.png',array)\n```\n\n### 4.其他可行的方法\n在系统环境下安装：\n```bash\nsudo apt install -y python3-picamera2\n```\n\n之后直接创建一个继承全局包的虚拟环境。\nOpenCV的安装方法不变。","slug":"2025-06-01-摄像头相关","published":1,"__permalink":"摄像头相关/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0nb0014zovd30n9aj4b","content":"<h2 id=\"树莓派官方CMI摄像头——基础配置\"><a href=\"#树莓派官方CMI摄像头——基础配置\" class=\"headerlink\" title=\"树莓派官方CMI摄像头——基础配置\"></a>树莓派官方CMI摄像头——基础配置</h2><blockquote>\n<p>[!NOTE] 操作环境<br>树莓派4 官方系统Raspberry Pi OS Lite版<br>Linux raspberrypi 6.1.0-rpi7-rpi-v8 <code>1</code> SMP PREEMPT Debian 1:6.1.63-1+rpt1 (2023-11-24) aarch64<br>Python 3.11.2<br>摄像头感光芯片OV5647</p>\n</blockquote>\n<h3 id=\"1-驱动\"><a href=\"#1-驱动\" class=\"headerlink\" title=\"1.驱动\"></a>1.驱动</h3><p>当前版本的CMI摄像头官方驱动是libcamera</p>\n<h3 id=\"2-Python所需package\"><a href=\"#2-Python所需package\" class=\"headerlink\" title=\"2.Python所需package\"></a>2.Python所需package</h3><p>来源于：<a href=\"https://blog.csdn.net/zhangmou_9008/article/details/134047114\">解决树莓派原装libcamera(csi)摄像头无法通过opencv读取数据的问题_libcamera opencv-CSDN博客</a></p>\n<ol>\n<li>首先创建虚拟环境<br>来源于：<a href=\"https://github.com/raspberrypi/picamera2/issues/341\">[BUG] python3-libcamera not available in venv · Issue <code>341</code> · raspberrypi&#x2F;picamera2 · GitHub</a><br><a href=\"https://geek-docs.com/python/python-ask-answer/71_python_make_virtualenv_inherit_specific_packages_from_your_global_sitepackages.html\">Python 使虚拟环境集成特定全局包|极客教程 (geek-docs.com)</a></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m venv --system-site-packages myenv</span><br></pre></td></tr></table></figure>\n<p>注意指定<code>--system-site-packages</code>选项来让虚拟环境继承全局site-packages，便于在虚拟环境中使用<code>libcamera</code>包。（由于libcamera目前无法在虚拟环境中安装和使用）</p>\n<p>接下来进入虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> myenv/bin/activate</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>安装OpenCV</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install opencv-python</span><br><span class=\"line\">pip install opencv-python-headless</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装picamera2<br>来源于：<a href=\"https://github.com/raspberrypi/picamera2\">GitHub - raspberrypi&#x2F;picamera2: New libcamera based python library</a><br><a href=\"https://blog.csdn.net/xyxyxxxy/article/details/108729329\">安装python-prctl报错_you need to install libcap development headers to -CSDN博客</a><br><a href=\"https://github.com/facebookresearch/vilbert-multi-task/issues/18\">You need to install libcap development headers to build this module · Issue <code>18</code> · facebookresearch&#x2F;vilbert-multi-task · GitHub</a><br><a href=\"https://pythonhosted.org/python-prctl/\">Welcome to python-prctl’s documentation! — python-prctl 1.6.1 documentation (pythonhosted.org)</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install -y python3-libcamera python3-kms++</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt install -y python3-pyqt5 python3-prctl libatlas-base-dev ffmpeg python3-pip</span><br><span class=\"line\">pip3 install numpy --upgrade</span><br><span class=\"line\">pip3 install picamera2[gui]</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>对于最后一步可能会出现的错误<code>You need to install libcap development headers to build this module</code> 解决方法如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install build-essential libcap-dev</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-测试程序\"><a href=\"#3-测试程序\" class=\"headerlink\" title=\"3.测试程序\"></a>3.测试程序</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from picamera2 import Picamera2  </span><br><span class=\"line\">import cv2  </span><br><span class=\"line\">import <span class=\"keyword\">time</span>  </span><br><span class=\"line\">   `初始化`  </span><br><span class=\"line\">picam2 = Picamera2()    `创建摄像头对象开启摄像头，只能创建一次`  </span><br><span class=\"line\">picam2.start()  `开启摄像头，无需重复开启`  </span><br><span class=\"line\">time.sleep(1)  </span><br><span class=\"line\">   `抓拍`  </span><br><span class=\"line\">array = picam2.capture_array(<span class=\"string\">&quot;main&quot;</span>)    `捕获一帧相机数据，输出为numpy.ndarray类型，与opencv无缝连接`  </span><br><span class=\"line\">  </span><br><span class=\"line\">cv2.imwrite(<span class=\"string\">&#x27;test.png&#x27;</span>,array)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-其他可行的方法\"><a href=\"#4-其他可行的方法\" class=\"headerlink\" title=\"4.其他可行的方法\"></a>4.其他可行的方法</h3><p>在系统环境下安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install -y python3-picamera2</span><br></pre></td></tr></table></figure>\n\n<p>之后直接创建一个继承全局包的虚拟环境。<br>OpenCV的安装方法不变。</p>\n","excerpt":"","more":"<h2 id=\"树莓派官方CMI摄像头——基础配置\"><a href=\"#树莓派官方CMI摄像头——基础配置\" class=\"headerlink\" title=\"树莓派官方CMI摄像头——基础配置\"></a>树莓派官方CMI摄像头——基础配置</h2><blockquote>\n<p>[!NOTE] 操作环境<br>树莓派4 官方系统Raspberry Pi OS Lite版<br>Linux raspberrypi 6.1.0-rpi7-rpi-v8 <code>1</code> SMP PREEMPT Debian 1:6.1.63-1+rpt1 (2023-11-24) aarch64<br>Python 3.11.2<br>摄像头感光芯片OV5647</p>\n</blockquote>\n<h3 id=\"1-驱动\"><a href=\"#1-驱动\" class=\"headerlink\" title=\"1.驱动\"></a>1.驱动</h3><p>当前版本的CMI摄像头官方驱动是libcamera</p>\n<h3 id=\"2-Python所需package\"><a href=\"#2-Python所需package\" class=\"headerlink\" title=\"2.Python所需package\"></a>2.Python所需package</h3><p>来源于：<a href=\"https://blog.csdn.net/zhangmou_9008/article/details/134047114\">解决树莓派原装libcamera(csi)摄像头无法通过opencv读取数据的问题_libcamera opencv-CSDN博客</a></p>\n<ol>\n<li>首先创建虚拟环境<br>来源于：<a href=\"https://github.com/raspberrypi/picamera2/issues/341\">[BUG] python3-libcamera not available in venv · Issue <code>341</code> · raspberrypi&#x2F;picamera2 · GitHub</a><br><a href=\"https://geek-docs.com/python/python-ask-answer/71_python_make_virtualenv_inherit_specific_packages_from_your_global_sitepackages.html\">Python 使虚拟环境集成特定全局包|极客教程 (geek-docs.com)</a></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m venv --system-site-packages myenv</span><br></pre></td></tr></table></figure>\n<p>注意指定<code>--system-site-packages</code>选项来让虚拟环境继承全局site-packages，便于在虚拟环境中使用<code>libcamera</code>包。（由于libcamera目前无法在虚拟环境中安装和使用）</p>\n<p>接下来进入虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> myenv/bin/activate</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>安装OpenCV</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install opencv-python</span><br><span class=\"line\">pip install opencv-python-headless</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装picamera2<br>来源于：<a href=\"https://github.com/raspberrypi/picamera2\">GitHub - raspberrypi&#x2F;picamera2: New libcamera based python library</a><br><a href=\"https://blog.csdn.net/xyxyxxxy/article/details/108729329\">安装python-prctl报错_you need to install libcap development headers to -CSDN博客</a><br><a href=\"https://github.com/facebookresearch/vilbert-multi-task/issues/18\">You need to install libcap development headers to build this module · Issue <code>18</code> · facebookresearch&#x2F;vilbert-multi-task · GitHub</a><br><a href=\"https://pythonhosted.org/python-prctl/\">Welcome to python-prctl’s documentation! — python-prctl 1.6.1 documentation (pythonhosted.org)</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install -y python3-libcamera python3-kms++</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt install -y python3-pyqt5 python3-prctl libatlas-base-dev ffmpeg python3-pip</span><br><span class=\"line\">pip3 install numpy --upgrade</span><br><span class=\"line\">pip3 install picamera2[gui]</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>对于最后一步可能会出现的错误<code>You need to install libcap development headers to build this module</code> 解决方法如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install build-essential libcap-dev</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-测试程序\"><a href=\"#3-测试程序\" class=\"headerlink\" title=\"3.测试程序\"></a>3.测试程序</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from picamera2 import Picamera2  </span><br><span class=\"line\">import cv2  </span><br><span class=\"line\">import <span class=\"keyword\">time</span>  </span><br><span class=\"line\">   `初始化`  </span><br><span class=\"line\">picam2 = Picamera2()    `创建摄像头对象开启摄像头，只能创建一次`  </span><br><span class=\"line\">picam2.start()  `开启摄像头，无需重复开启`  </span><br><span class=\"line\">time.sleep(1)  </span><br><span class=\"line\">   `抓拍`  </span><br><span class=\"line\">array = picam2.capture_array(<span class=\"string\">&quot;main&quot;</span>)    `捕获一帧相机数据，输出为numpy.ndarray类型，与opencv无缝连接`  </span><br><span class=\"line\">  </span><br><span class=\"line\">cv2.imwrite(<span class=\"string\">&#x27;test.png&#x27;</span>,array)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-其他可行的方法\"><a href=\"#4-其他可行的方法\" class=\"headerlink\" title=\"4.其他可行的方法\"></a>4.其他可行的方法</h3><p>在系统环境下安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install -y python3-picamera2</span><br></pre></td></tr></table></figure>\n\n<p>之后直接创建一个继承全局包的虚拟环境。<br>OpenCV的安装方法不变。</p>\n"},{"title":"更新香橙派内核","date":"2025-06-01T02:34:58.000Z","updated":"2025-05-29T07:51:59.000Z","_content":"\n","source":"_posts/2025-06-01-更新香橙派内核.md","raw":"---\ntitle: 更新香橙派内核\ndate: 2025-06-01 10:34:58\nupdated: 2025-05-29 15:51:59\ncategories:\n  - [服务器&嵌入式平台操作, 嵌入式&硬件]\ntags:\npermalink: 更新香橙派内核/\n---\n\n","slug":"2025-06-01-更新香橙派内核","published":1,"__permalink":"更新香橙派内核/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0nc0017zovda9x48ai7","content":"","excerpt":"","more":""},{"title":"杂项","date":"2025-06-01T02:34:58.000Z","updated":"2025-07-21T03:22:23.000Z","_content":"\n## 网速测试\n### 使用`iperf`工具\n$Last Edited：2025.01.14/15:54$\n___\n\n`iperf`是一个非常流行的网络性能测试工具，可以测量TCP和UDP带宽质量，报告带宽、延迟抖动和数据包丢失情况。以下是使用`iperf`进行多机通信速率测试的步骤：\n1. 安装`iperf`\n\n在所有参与测试的机器上安装`iperf`：\n```bash\nsudo apt-get install iperf\n```\n\n2.  服务器端配置\n在一台机器上启动`iperf`服务器模式：\n```bash\niperf -s\n```\n这将在默认端口5001上启动`iperf`服务器。\n\n3. 客户端配置\n在另一台机器上启动`iperf`客户端模式，连接到服务器：\n```bash\niperf -c <服务器IP地址>\n```\n\n例如：\n```bash\niperf -c 192.168.0.110\n```\n\n4. 查看结果\n服务器端和客户端都会显示测试结果，包括传输速率和带宽。例如：\n服务器端：\n```text\nroot@pi1:~# iperf -s\n------------------------------------------------------------\nServer listening on TCP port 5001\nTCP window size: 85.3 KByte (default)\n------------------------------------------------------------\n[  4] local 192.168.0.110 port 5001 connected with 192.168.0.111 port 56440\n[ ID] Interval       Transfer     Bandwidth\n[  4]  0.0-10.0 sec  1.09 GBytes   934 Mbits/sec\n```\n\n客户端：\n```text\nroot@pi2:~# iperf -c pi1\n------------------------------------------------------------\nClient connecting to pi1, TCP port 5001\nTCP window size: 85.0 KByte (default)\n------------------------------------------------------------\n[  3] local 192.168.0.111 port 56440 connected with 192.168.0.110 port 5001\n[ ID] Interval       Transfer     Bandwidth\n[  3]  0.0-10.0 sec  1.09 GBytes   936 Mbits/sec\n```\n\n## Labelme","source":"_posts/2025-06-01-杂项.md","raw":"---\ntitle: 杂项\ndate: 2025-06-01 10:34:58\nupdated: 2025-07-21 11:22:23\ncategories:\n  - [服务器&嵌入式平台操作, 工具]\ntags:\npermalink: 杂项/\n---\n\n## 网速测试\n### 使用`iperf`工具\n$Last Edited：2025.01.14/15:54$\n___\n\n`iperf`是一个非常流行的网络性能测试工具，可以测量TCP和UDP带宽质量，报告带宽、延迟抖动和数据包丢失情况。以下是使用`iperf`进行多机通信速率测试的步骤：\n1. 安装`iperf`\n\n在所有参与测试的机器上安装`iperf`：\n```bash\nsudo apt-get install iperf\n```\n\n2.  服务器端配置\n在一台机器上启动`iperf`服务器模式：\n```bash\niperf -s\n```\n这将在默认端口5001上启动`iperf`服务器。\n\n3. 客户端配置\n在另一台机器上启动`iperf`客户端模式，连接到服务器：\n```bash\niperf -c <服务器IP地址>\n```\n\n例如：\n```bash\niperf -c 192.168.0.110\n```\n\n4. 查看结果\n服务器端和客户端都会显示测试结果，包括传输速率和带宽。例如：\n服务器端：\n```text\nroot@pi1:~# iperf -s\n------------------------------------------------------------\nServer listening on TCP port 5001\nTCP window size: 85.3 KByte (default)\n------------------------------------------------------------\n[  4] local 192.168.0.110 port 5001 connected with 192.168.0.111 port 56440\n[ ID] Interval       Transfer     Bandwidth\n[  4]  0.0-10.0 sec  1.09 GBytes   934 Mbits/sec\n```\n\n客户端：\n```text\nroot@pi2:~# iperf -c pi1\n------------------------------------------------------------\nClient connecting to pi1, TCP port 5001\nTCP window size: 85.0 KByte (default)\n------------------------------------------------------------\n[  3] local 192.168.0.111 port 56440 connected with 192.168.0.110 port 5001\n[ ID] Interval       Transfer     Bandwidth\n[  3]  0.0-10.0 sec  1.09 GBytes   936 Mbits/sec\n```\n\n## Labelme","slug":"2025-06-01-杂项","published":1,"__permalink":"杂项/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0nd0019zovd6sljguu4","content":"<h2 id=\"网速测试\"><a href=\"#网速测试\" class=\"headerlink\" title=\"网速测试\"></a>网速测试</h2><h3 id=\"使用iperf工具\"><a href=\"#使用iperf工具\" class=\"headerlink\" title=\"使用iperf工具\"></a>使用<code>iperf</code>工具</h3><p>$Last Edited：2025.01.14&#x2F;15:54$</p>\n<hr>\n<p><code>iperf</code>是一个非常流行的网络性能测试工具，可以测量TCP和UDP带宽质量，报告带宽、延迟抖动和数据包丢失情况。以下是使用<code>iperf</code>进行多机通信速率测试的步骤：</p>\n<ol>\n<li>安装<code>iperf</code></li>\n</ol>\n<p>在所有参与测试的机器上安装<code>iperf</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install iperf</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>服务器端配置<br>在一台机器上启动<code>iperf</code>服务器模式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iperf -s</span><br></pre></td></tr></table></figure>\n<p>这将在默认端口5001上启动<code>iperf</code>服务器。</p>\n</li>\n<li><p>客户端配置<br>在另一台机器上启动<code>iperf</code>客户端模式，连接到服务器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iperf -c &lt;服务器IP地址&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iperf -c 192.168.0.110</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>查看结果<br>服务器端和客户端都会显示测试结果，包括传输速率和带宽。例如：<br>服务器端：<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@pi1:~# iperf -s</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">Server listening on TCP port 5001</span><br><span class=\"line\">TCP window size: 85.3 KByte (default)</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">[  4] local 192.168.0.110 port 5001 connected with 192.168.0.111 port 56440</span><br><span class=\"line\">[ ID] Interval       Transfer     Bandwidth</span><br><span class=\"line\">[  4]  0.0-10.0 sec  1.09 GBytes   934 Mbits/sec</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>客户端：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@pi2:~# iperf -c pi1</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">Client connecting to pi1, TCP port 5001</span><br><span class=\"line\">TCP window size: 85.0 KByte (default)</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">[  3] local 192.168.0.111 port 56440 connected with 192.168.0.110 port 5001</span><br><span class=\"line\">[ ID] Interval       Transfer     Bandwidth</span><br><span class=\"line\">[  3]  0.0-10.0 sec  1.09 GBytes   936 Mbits/sec</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Labelme\"><a href=\"#Labelme\" class=\"headerlink\" title=\"Labelme\"></a>Labelme</h2>","excerpt":"","more":"<h2 id=\"网速测试\"><a href=\"#网速测试\" class=\"headerlink\" title=\"网速测试\"></a>网速测试</h2><h3 id=\"使用iperf工具\"><a href=\"#使用iperf工具\" class=\"headerlink\" title=\"使用iperf工具\"></a>使用<code>iperf</code>工具</h3><p>$Last Edited：2025.01.14&#x2F;15:54$</p>\n<hr>\n<p><code>iperf</code>是一个非常流行的网络性能测试工具，可以测量TCP和UDP带宽质量，报告带宽、延迟抖动和数据包丢失情况。以下是使用<code>iperf</code>进行多机通信速率测试的步骤：</p>\n<ol>\n<li>安装<code>iperf</code></li>\n</ol>\n<p>在所有参与测试的机器上安装<code>iperf</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install iperf</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>服务器端配置<br>在一台机器上启动<code>iperf</code>服务器模式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iperf -s</span><br></pre></td></tr></table></figure>\n<p>这将在默认端口5001上启动<code>iperf</code>服务器。</p>\n</li>\n<li><p>客户端配置<br>在另一台机器上启动<code>iperf</code>客户端模式，连接到服务器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iperf -c &lt;服务器IP地址&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iperf -c 192.168.0.110</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>查看结果<br>服务器端和客户端都会显示测试结果，包括传输速率和带宽。例如：<br>服务器端：<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@pi1:~# iperf -s</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">Server listening on TCP port 5001</span><br><span class=\"line\">TCP window size: 85.3 KByte (default)</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">[  4] local 192.168.0.110 port 5001 connected with 192.168.0.111 port 56440</span><br><span class=\"line\">[ ID] Interval       Transfer     Bandwidth</span><br><span class=\"line\">[  4]  0.0-10.0 sec  1.09 GBytes   934 Mbits/sec</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>客户端：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@pi2:~# iperf -c pi1</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">Client connecting to pi1, TCP port 5001</span><br><span class=\"line\">TCP window size: 85.0 KByte (default)</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">[  3] local 192.168.0.111 port 56440 connected with 192.168.0.110 port 5001</span><br><span class=\"line\">[ ID] Interval       Transfer     Bandwidth</span><br><span class=\"line\">[  3]  0.0-10.0 sec  1.09 GBytes   936 Mbits/sec</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Labelme\"><a href=\"#Labelme\" class=\"headerlink\" title=\"Labelme\"></a>Labelme</h2>"},{"title":"树莓派-Q&A","date":"2025-06-01T02:34:58.000Z","updated":"2025-04-25T09:34:08.000Z","_content":"\n## Ubuntu树莓派安装raspi-config\n\n> [!NOTE] 操作环境\n> Ubuntu-22.04.3 server 树莓派4\n\n### 方法一\n参考：[树莓派安装非官方系统没有raspi-config命令的解决方法_sudo raspi-config找不到命令-CSDN博客](https://blog.csdn.net/no1xium/article/details/107477055)\n1. 安装依赖\n```bash\nsudo apt install whiptail parted lua5.1 alsa-utils psmisc\n```\n\n2. 从Raspberrypi官网下载最新的deb安装包\n```bash\nwget http://archive.raspberrypi.org/debian/pool/main/r/raspi-config/raspi-config_20200707_all.deb\n```\n[官网下载地址:Index of /debian/pool/main/r/raspi-config (raspberrypi.org)](https://archive.raspberrypi.org/debian/pool/main/r/raspi-config/)\n\n3. 安装deb安装包\n```bash\nsudo dpkg -i raspi-config_20200707_all.deb\n```\n\n4. 装好软件还是提示缺少依赖执行错误\n```bash\nsudo apt install -f -y\n```\n\n5. 运行raspi-config，需要sudo或以上权限\n```bash\nsudo raspi-config\n```\n### 方法二（建议）\n参考：[#RaspberryPi – Install raspi-config on Ubuntu 22.04.1 LTS - DEV Community](https://dev.to/elbruno/raspberrypi-install-raspi-config-on-ubuntu-22041-lts-195j)\n1. Add the debian repository to the source list\n```bash\necho \"deb http://archive.raspberrypi.org/debian/ buster main\" >> /etc/apt/sources.list\n```\n\n2. GPG密钥(应该不是必须的)\n```bash\ngpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 7FA3303E\ngpg --export --armor 7FA3303E | sudo tee /etc/apt/trusted.gpg.d/key.gpg\n```\n其他操作，比如查看密钥列表：\n```bash\ngpg --list-keys\n```\n删除密钥：\n```bash\nsudo rm /etc/apt/trusted.gpg.d/key.gpg\n```\n上述命令中的 `key.gpg` 应该替换为你实际添加的密钥的文件名\n\n3. And, the update and install raspi config\n```bash\nsudo apt-get update\nsudo apt-get install raspi-config\n```\n\n4. And now we can run raspi-config (in sudo mode)\n```bash\nsudo raspi-config\n```\n\n## raspi-config启动摄像头出错\n\n> [!NOTE] 操作环境\n> Ubuntu-22.04.3 server 树莓派4\n\n参考：[树莓派通过raspi-config启动摄像头时，出错:Your firmwave appears to be out of date (no start_x.elf). Please update_your firmware appears to be out of date (no │ │ st-CSDN博客](https://blog.csdn.net/qq_34493401/article/details/107672691)\n解决方法：  \n1、查看boot分区所在的设备号，设备号可能是：/dev/mmcblk0p1\n```bash\ndf -h\n```\n\n2、将该设备号挂载在/boot上\n```bash\nmount /dev/mmcblk0p1 /boot\n```","source":"_posts/2025-06-01-树莓派-QA.md","raw":"---\ntitle: 树莓派-Q&A\ndate: 2025-06-01 10:34:58\nupdated: 2025-04-25 17:34:08\ncategories:\n  - [服务器&嵌入式平台操作, Q&A问题及解决汇总]\ntags:\npermalink: 树莓派-q&a/\n---\n\n## Ubuntu树莓派安装raspi-config\n\n> [!NOTE] 操作环境\n> Ubuntu-22.04.3 server 树莓派4\n\n### 方法一\n参考：[树莓派安装非官方系统没有raspi-config命令的解决方法_sudo raspi-config找不到命令-CSDN博客](https://blog.csdn.net/no1xium/article/details/107477055)\n1. 安装依赖\n```bash\nsudo apt install whiptail parted lua5.1 alsa-utils psmisc\n```\n\n2. 从Raspberrypi官网下载最新的deb安装包\n```bash\nwget http://archive.raspberrypi.org/debian/pool/main/r/raspi-config/raspi-config_20200707_all.deb\n```\n[官网下载地址:Index of /debian/pool/main/r/raspi-config (raspberrypi.org)](https://archive.raspberrypi.org/debian/pool/main/r/raspi-config/)\n\n3. 安装deb安装包\n```bash\nsudo dpkg -i raspi-config_20200707_all.deb\n```\n\n4. 装好软件还是提示缺少依赖执行错误\n```bash\nsudo apt install -f -y\n```\n\n5. 运行raspi-config，需要sudo或以上权限\n```bash\nsudo raspi-config\n```\n### 方法二（建议）\n参考：[#RaspberryPi – Install raspi-config on Ubuntu 22.04.1 LTS - DEV Community](https://dev.to/elbruno/raspberrypi-install-raspi-config-on-ubuntu-22041-lts-195j)\n1. Add the debian repository to the source list\n```bash\necho \"deb http://archive.raspberrypi.org/debian/ buster main\" >> /etc/apt/sources.list\n```\n\n2. GPG密钥(应该不是必须的)\n```bash\ngpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 7FA3303E\ngpg --export --armor 7FA3303E | sudo tee /etc/apt/trusted.gpg.d/key.gpg\n```\n其他操作，比如查看密钥列表：\n```bash\ngpg --list-keys\n```\n删除密钥：\n```bash\nsudo rm /etc/apt/trusted.gpg.d/key.gpg\n```\n上述命令中的 `key.gpg` 应该替换为你实际添加的密钥的文件名\n\n3. And, the update and install raspi config\n```bash\nsudo apt-get update\nsudo apt-get install raspi-config\n```\n\n4. And now we can run raspi-config (in sudo mode)\n```bash\nsudo raspi-config\n```\n\n## raspi-config启动摄像头出错\n\n> [!NOTE] 操作环境\n> Ubuntu-22.04.3 server 树莓派4\n\n参考：[树莓派通过raspi-config启动摄像头时，出错:Your firmwave appears to be out of date (no start_x.elf). Please update_your firmware appears to be out of date (no │ │ st-CSDN博客](https://blog.csdn.net/qq_34493401/article/details/107672691)\n解决方法：  \n1、查看boot分区所在的设备号，设备号可能是：/dev/mmcblk0p1\n```bash\ndf -h\n```\n\n2、将该设备号挂载在/boot上\n```bash\nmount /dev/mmcblk0p1 /boot\n```","slug":"2025-06-01-树莓派-QA","published":1,"__permalink":"树莓派-q&a/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0ng001czovdd6p50enf","content":"<h2 id=\"Ubuntu树莓派安装raspi-config\"><a href=\"#Ubuntu树莓派安装raspi-config\" class=\"headerlink\" title=\"Ubuntu树莓派安装raspi-config\"></a>Ubuntu树莓派安装raspi-config</h2><blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu-22.04.3 server 树莓派4</p>\n</blockquote>\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>参考：<a href=\"https://blog.csdn.net/no1xium/article/details/107477055\">树莓派安装非官方系统没有raspi-config命令的解决方法_sudo raspi-config找不到命令-CSDN博客</a></p>\n<ol>\n<li><p>安装依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install whiptail parted lua5.1 alsa-utils psmisc</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从Raspberrypi官网下载最新的deb安装包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://archive.raspberrypi.org/debian/pool/main/r/raspi-config/raspi-config_20200707_all.deb</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://archive.raspberrypi.org/debian/pool/main/r/raspi-config/\">官网下载地址:Index of &#x2F;debian&#x2F;pool&#x2F;main&#x2F;r&#x2F;raspi-config (raspberrypi.org)</a></p>\n</li>\n<li><p>安装deb安装包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> dpkg -i raspi-config_20200707_all.deb</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>装好软件还是提示缺少依赖执行错误</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install -f -y</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行raspi-config，需要sudo或以上权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> raspi-config</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"方法二（建议）\"><a href=\"#方法二（建议）\" class=\"headerlink\" title=\"方法二（建议）\"></a>方法二（建议）</h3><p>参考：<a href=\"https://dev.to/elbruno/raspberrypi-install-raspi-config-on-ubuntu-22041-lts-195j\">#RaspberryPi – Install raspi-config on Ubuntu 22.04.1 LTS - DEV Community</a></p>\n<ol>\n<li><p>Add the debian repository to the source list</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;deb http://archive.raspberrypi.org/debian/ buster main&quot;</span> &gt;&gt; /etc/apt/sources.list</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>GPG密钥(应该不是必须的)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 7FA3303E</span><br><span class=\"line\">gpg --<span class=\"built_in\">export</span> --armor 7FA3303E | <span class=\"built_in\">sudo</span> <span class=\"built_in\">tee</span> /etc/apt/trusted.gpg.d/key.gpg</span><br></pre></td></tr></table></figure>\n<p>其他操作，比如查看密钥列表：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --list-keys</span><br></pre></td></tr></table></figure>\n<p>删除密钥：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">rm</span> /etc/apt/trusted.gpg.d/key.gpg</span><br></pre></td></tr></table></figure>\n<p>上述命令中的 <code>key.gpg</code> 应该替换为你实际添加的密钥的文件名</p>\n</li>\n<li><p>And, the update and install raspi config</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get update</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install raspi-config</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>And now we can run raspi-config (in sudo mode)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> raspi-config</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"raspi-config启动摄像头出错\"><a href=\"#raspi-config启动摄像头出错\" class=\"headerlink\" title=\"raspi-config启动摄像头出错\"></a>raspi-config启动摄像头出错</h2><blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu-22.04.3 server 树莓派4</p>\n</blockquote>\n<p>参考：<a href=\"https://blog.csdn.net/qq_34493401/article/details/107672691\">树莓派通过raspi-config启动摄像头时，出错:Your firmwave appears to be out of date (no start_x.elf). Please update_your firmware appears to be out of date (no │ │ st-CSDN博客</a><br>解决方法：<br>1、查看boot分区所在的设备号，设备号可能是：&#x2F;dev&#x2F;mmcblk0p1</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">df</span> -h</span><br></pre></td></tr></table></figure>\n\n<p>2、将该设备号挂载在&#x2F;boot上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount /dev/mmcblk0p1 /boot</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Ubuntu树莓派安装raspi-config\"><a href=\"#Ubuntu树莓派安装raspi-config\" class=\"headerlink\" title=\"Ubuntu树莓派安装raspi-config\"></a>Ubuntu树莓派安装raspi-config</h2><blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu-22.04.3 server 树莓派4</p>\n</blockquote>\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>参考：<a href=\"https://blog.csdn.net/no1xium/article/details/107477055\">树莓派安装非官方系统没有raspi-config命令的解决方法_sudo raspi-config找不到命令-CSDN博客</a></p>\n<ol>\n<li><p>安装依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install whiptail parted lua5.1 alsa-utils psmisc</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从Raspberrypi官网下载最新的deb安装包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://archive.raspberrypi.org/debian/pool/main/r/raspi-config/raspi-config_20200707_all.deb</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://archive.raspberrypi.org/debian/pool/main/r/raspi-config/\">官网下载地址:Index of &#x2F;debian&#x2F;pool&#x2F;main&#x2F;r&#x2F;raspi-config (raspberrypi.org)</a></p>\n</li>\n<li><p>安装deb安装包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> dpkg -i raspi-config_20200707_all.deb</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>装好软件还是提示缺少依赖执行错误</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install -f -y</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行raspi-config，需要sudo或以上权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> raspi-config</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"方法二（建议）\"><a href=\"#方法二（建议）\" class=\"headerlink\" title=\"方法二（建议）\"></a>方法二（建议）</h3><p>参考：<a href=\"https://dev.to/elbruno/raspberrypi-install-raspi-config-on-ubuntu-22041-lts-195j\">#RaspberryPi – Install raspi-config on Ubuntu 22.04.1 LTS - DEV Community</a></p>\n<ol>\n<li><p>Add the debian repository to the source list</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;deb http://archive.raspberrypi.org/debian/ buster main&quot;</span> &gt;&gt; /etc/apt/sources.list</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>GPG密钥(应该不是必须的)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 7FA3303E</span><br><span class=\"line\">gpg --<span class=\"built_in\">export</span> --armor 7FA3303E | <span class=\"built_in\">sudo</span> <span class=\"built_in\">tee</span> /etc/apt/trusted.gpg.d/key.gpg</span><br></pre></td></tr></table></figure>\n<p>其他操作，比如查看密钥列表：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --list-keys</span><br></pre></td></tr></table></figure>\n<p>删除密钥：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">rm</span> /etc/apt/trusted.gpg.d/key.gpg</span><br></pre></td></tr></table></figure>\n<p>上述命令中的 <code>key.gpg</code> 应该替换为你实际添加的密钥的文件名</p>\n</li>\n<li><p>And, the update and install raspi config</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get update</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install raspi-config</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>And now we can run raspi-config (in sudo mode)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> raspi-config</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"raspi-config启动摄像头出错\"><a href=\"#raspi-config启动摄像头出错\" class=\"headerlink\" title=\"raspi-config启动摄像头出错\"></a>raspi-config启动摄像头出错</h2><blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu-22.04.3 server 树莓派4</p>\n</blockquote>\n<p>参考：<a href=\"https://blog.csdn.net/qq_34493401/article/details/107672691\">树莓派通过raspi-config启动摄像头时，出错:Your firmwave appears to be out of date (no start_x.elf). Please update_your firmware appears to be out of date (no │ │ st-CSDN博客</a><br>解决方法：<br>1、查看boot分区所在的设备号，设备号可能是：&#x2F;dev&#x2F;mmcblk0p1</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">df</span> -h</span><br></pre></td></tr></table></figure>\n\n<p>2、将该设备号挂载在&#x2F;boot上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount /dev/mmcblk0p1 /boot</span><br></pre></td></tr></table></figure>"},{"title":"树莓派摄像头","date":"2025-06-01T02:34:58.000Z","updated":"2024-03-04T03:12:36.000Z","_content":"\n","source":"_posts/2025-06-01-树莓派摄像头.md","raw":"---\ntitle: 树莓派摄像头\ndate: 2025-06-01 10:34:58\nupdated: 2024-03-04 11:12:36\ncategories:\n  - [程序相关]\ntags:\npermalink: 树莓派摄像头/\n---\n\n","slug":"2025-06-01-树莓派摄像头","published":1,"__permalink":"树莓派摄像头/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0nn001ezovdg8f06mwa","content":"","excerpt":"","more":""},{"title":"消息传递并行—MPI","date":"2025-06-01T02:34:58.000Z","updated":"2025-05-30T02:16:09.000Z","_content":"\nMPI是一个消息传递库接口规范，这个定义的所有部分都很重要。MPI主要针对消息传递并行编程模型，其中数据通过每个进程上的协作操作从一个进程的地址空间移动到另一个进程的地址空间。在集合操作、远程内存访问操作、动态进程创建和并行I/O等方面提供了对“经典”消息传递模型的扩展。MPI是一个规范，不是一个实现；有多个MPI的实现。这个规范是一个库接口；MPI不是一种语言，所有MPI操作都表达为函数、子程序或方法，根据适当的语言绑定，对于C和Fortran来说，这些是MPI标准的一部分。这个标准是通过一个由并行计算供应商、计算机科学家和应用开发者组成的社区的开放过程定义的。\n## 在Python+MPI开发环境中安装\n\n> [!NOTE] 操作环境\n> 香橙派4-lts Orange Pi 3.0.6 Buster with Linux 4.4.179-rk3399\n> python3.9.19 ~~pip24.0~~ pip24.3.1\n\n### MPICH的安装\n$Last Edited：2024.12.23/19:50$\n___\n\n参考：[两小时入门MPI与并行计算（二）：MPI的安装与配置 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/356705583)\n[Downloads | MPICH](https://www.mpich.org/downloads/)\nMPICH与OpenMPI是对MPI标准的具体实现。\n\n1. 安装前先检查是否有需要的编译器：\n```bash\nwhich gcc \nwhich gfortran \n```\n输出安装目录时，可以进行下一步安装。否则需要先安装好这两个编译器。\n\n2. 下载合适的安装文件。\n我选择的是用deb包安装（直接用apt安装应该也可以）。因为是Debian系统，可以从这个网址下载[Debian -- 软件包下载地址选择 -- mpich_3.3-3_arm64.deb](https://packages.debian.org/buster/arm64/mpich/download)也可以从网站上找到其他版本。此外，也可以看到mpich依赖的软件包：[Debian -- 在 buster 中的 mpich 软件包详细信息](https://packages.debian.org/buster/mpich)\n复制下载地址，输入:\n```bash\nwget http://ftp.cn.debian.org/debian/pool/main/m/mpich/mpich_3.3-3_arm64.deb\n```\n\n下载完成后，安装deb包：\n```bash\nsudo dpkg -i mpich_3.3-3_arm64.deb\n```\n\n3. 上述2步相当于：(可替代)\n```bash\nsudo apt install mpich\n```\n\n4. 缺失的依赖用以下指令安装：\n```bash\napt --fix-broken install\n```\n\n接下来还需要执行：\n```bash\nsudo apt install libmpich-dev\n```\n\n5. 测试程序\n来源于：[02-第一个MPI程序：Hello world_头歌第2关:使用mpi运行\"hello world-CSDN博客](https://blog.csdn.net/Sunshine8430/article/details/80982847)\n创建一个helloworld文件：\n```bash\nvim helloworld.c\n```\n\n内容如下：\n```C `include` <mpi.h> `include` <stdio.h>\n\nint main(int argc, char** argv){\n    //初始化MPI环境\n    MPI_Init(NULL, NULL);\n\n    //获取进程数\n    int world_size;\n    MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n    //获取进程的等级\n    int world_rank;\n    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n    //获取进程的名字\n    char processor_name[MPI_MAX_PROCESSOR_NAME];\n    int name_len;\n    MPI_Get_processor_name(processor_name, &name_len);\n\n    //打印helloworld\n    printf(\"Hello world from processor %s, rank %d out of %d processors\\n\",processor_name, world_rank, world_size);\n\n    //关闭MPI环境\n    MPI_Finalize();\n}\n```\n复制进去，保存退出。\n\n编译文件：\n```bash\nmpicc helloworld.c -o helloworld\n```\n成功编译后，目录中会出现helloworld文件。\n\n运行：\n```bash\nmpirun -np 4 ./helloworld\n```\n\n结果如下：\n```text\nHello world from processor orangepi4-lts, rank 1 out of 4 processors\nHello world from processor orangepi4-lts, rank 2 out of 4 processors\nHello world from processor orangepi4-lts, rank 3 out of 4 processors\nHello world from processor orangepi4-lts, rank 0 out of 4 processors\n```\n### mpi4py的安装\n$Last Edited：2024.12.30/15:24$\n___\n\n参考官方文档：[Installation — MPI for Python 3.1.6 documentation (mpi4py.readthedocs.io)](https://mpi4py.readthedocs.io/en/stable/install.html#testing)\n\n1. 直接用pip安装：\n```bash\npython -m pip install mpi4py\n```\n报错缺什么包就装什么，安装不上也有可能是版本问题，可以换一个版本的Python和pip试试。\n\n2. 检查版本\n```bash\npip show mpi4py\n```\n\n或者\n```bash\npip list\n```\n我安装的是4.0.1，与pip-24.3.1匹配\n\n显示\n```text\nroot@pi1:~# pip show mpi4py\nName: mpi4py\nVersion: 4.0.1\nSummary: Python bindings for MPI\nHome-page: https://mpi4py.github.io\nAuthor: Lisandro Dalcin\nAuthor-email: dalcinl@gmail.com\nLicense: BSD-3-Clause\nLocation: /usr/local/python3/lib/python3.9/site-packages\nRequires: \nRequired-by: \n```\n\n3. 测试1\n用到了`mpi4py.bench` 模块中的具体基准测试，输入指令：\n```bash\nmpiexec -n 5 python -m mpi4py.bench helloworld\n```\n- `-n 5`：这个选项指定了要启动的进程数，这里是5个。\n- `python`：这是您想要使用的Python解释器。想在虚拟环境运行就是虚拟环境解释器的路径==./myenv/bin/python==\n- `-m`：这个选项用于运行Python模块。\n\n输出：\n```text\nHello, World! I am process 0 of 5 on orangepi4-lts.\nHello, World! I am process 1 of 5 on orangepi4-lts.\nHello, World! I am process 2 of 5 on orangepi4-lts.\nHello, World! I am process 3 of 5 on orangepi4-lts.\nHello, World! I am process 4 of 5 on orangepi4-lts.\n```\n\n4. 测试2\n来源于：[Python使用MPI实现分布式计算（mpi4py） - 知乎](https://zhuanlan.zhihu.com/p/157804393)\n\n创建一个mpi_test.py文件，写入：\n```python\nfrom mpi4py import MPI\n\ncomm = MPI.COMM_WORLD\nsize = comm.Get_size()\nrank = comm.Get_rank()\n\nif rank == 0:\n    msg = 'Hello, world'\n    comm.send(msg, dest=1)\nelif rank == 1:\n    s = comm.recv()\n    print(\"rank %d: %s\" % (rank, s))\nelse:\n    print(\"rank %d: idle\" % (rank))\n```\n\n输入指令：\n```bash\nmpiexec -np 8 python mpi_test.py\n```\n\n输出：\n```text\nrank 3: idle\nrank 4: idle\nrank 5: idle\nrank 7: idle\nrank 2: idle\nrank 6: idle\nrank 1: Hello, world\n```\n\n## 在集群中配置MPI\n\n> [!NOTE] 操作环境\n> 同一局域网下的多台香橙派4-lts Orange Pi 3.0.6 Buster with Linux 4.4.179-rk3399\n> ip地址为192.168.0.110-192.168.0.113\n### 实现SSH免密登录\n详见[SSH#SSH免密登录](SSH#SSH免密登录)\n\n### 多主机并行测试\n$Last Edited：2024.12.31/10:32$\n___\n\n参考：[MPI多机器实现并行计算 - earth_houge - 博客园](https://www.cnblogs.com/earthhouge/p/9275250.html)\n[利用MPI多节点分布式并行计算PI实验报告_多节点并行计算-CSDN博客](https://blog.csdn.net/lhc121386/article/details/111600228)\n[mpich/doc/wiki/how_to/Using_the_Hydra_Process_Manager.md at main · pmodels/mpich](https://github.com/pmodels/mpich/blob/main/doc/wiki/how_to/Using_the_Hydra_Process_Manager.md)\n前置条件：==MPI在单机正常运行、多主机之间可以相互SSH免密登录、多主机的mpich和用到的库版本相同==。（只是单方面免密登录会报错，但只要主机和从机间双向免密，多个从机相互之间不配置免密似乎也可行）\n\n1. 创建一个文件，我命名的是mpi_hosts，直接在root目录下创建的。\n```bash\nvim mpihosts\n```\n\n输入==主机名称:运行的进程数==，如:\n```text\npi1:4\npi2:4\npi3:4\npi4:4\n```\n注意上述==主机名称==要和前面==ip映射的主机名称==对应。进程会按照主机名称顺序循环执行。\n\n做过实验，在pi4运行程序，而pi1不知道主机名到ip的映射，会出现报错：\n```text\n[proxy:0:0@pi1] HYDU_sock_connect (utils/sock/sock.c:145): unable to get host address for pi4 (1)\n[proxy:0:0@pi1] main (pm/pmiserv/pmip.c:183): unable to connect to server pi4 at port 34078 (check for firewalls!)\n```\n*将上述mpi_hosts中的pi4改为局域网ip*或者*修改pi1的主机映射*才可以正常运行。值得一提的是，如果使用前一种方法，在pi4上输出的结果仍显示pi4，说明这个名称为实际运行进程主机的主机名。\n\n2. 利用前面MPICH的hellworld程序测试：\n```bash\nmpirun -n 6 -f mpi_hosts ./helloworld\n```\n\n注意，多机运行程序时，要保证==程序在每个机器的相同目录下都存在==\n否则会报错：\n```text\n[proxy:0:0@pi3] HYDU_create_process (utils/launch/launch.c:74): execvp error on file ./helloworld (No such file or directory)\n```\n\n3. 只用pi3和pi4两个主机，在pi4上运行时输出如下：\n```text\nHello world from processor pi4, rank 5 out of 6 processors\nHello world from processor pi4, rank 4 out of 6 processors\nHello world from processor pi3, rank 1 out of 6 processors\nHello world from processor pi3, rank 2 out of 6 processors\nHello world from processor pi3, rank 3 out of 6 processors\nHello world from processor pi3, rank 0 out of 6 processors\n```\n\n4. 试了一下修改pi3的程序再运行。\n改了print函数中的内容：\n```text\nHello world from processor pi4, rank 5 out of 6 processors\nHello world from processor pi4, rank 4 out of 6 processors\nI changed Hello world from processor pi3, rank 3 out of 6 processors\nI changed Hello world from processor pi3, rank 2 out of 6 processors\nI changed Hello world from processor pi3, rank 1 out of 6 processors\nI changed Hello world from processor pi3, rank 0 out of 6 processors\n```\n\n改变量名，也没出现问题。甚至多机之间数组大小不匹配，只要程序本身没有语法问题也可以运行，只是最后会出现乱码（用numpy做gather试的），所以代码内部检查还是有必要的。\n\n## 为MPI并行任务优化集群\n\n> [!NOTE] 操作环境\n> 同一局域网下的多台香橙派4-lts Orange Pi 3.0.6 Buster with Linux 4.4.179-rk3399\n> ip地址为192.168.0.110-192.168.0.113\n\n### 时间同步\n$Last Edited：2025.01.14/12:11$\n___\n\n配置NTP服务器以同步局域网内的设备主要分为两部分：配置NTP服务器（服务端）和配置NTP客户端。以下是详细的步骤和配置方法：\n#### 配置NTP服务器（服务端）\n选择pi1（IP地址为192.168.0.110）作为NTP服务器。\n\n1. 安装NTP服务\n在pi1上安装NTP服务（如果尚未安装）：\n```bash\nsudo apt-get install ntp\n```\n\n2. 编辑NTP配置文件\n编辑`/etc/ntp.conf`文件，进行以下配置：\n```bash\nsudo nano /etc/ntp.conf\n```\n\n3. 配置内容\n```text\n# 使用公共NTP服务器作为时间源\nserver ntp.ntsc.ac.cn iburst\n `本地时间对外对时`\nserver 127.127.1.0\nfudge 127.127.1.0 stratum 5\n\n# 允许本地网络的机器同步时间\nrestrict 192.168.0.0 mask 255.255.255.0 nomodify notrap\n\nbroadcast pi2\nbroadcast pi3\n```\n4. 保存并退出编辑器\n保存并退出编辑器后，重启NTP服务使配置生效：\n```bash\nsudo service ntp restart\n```\n\n#### 配置NTP客户端\n假设pi2、pi3、pi4（IP地址分别为192.168.0.111、192.168.0.112、192.168.0.113）作为NTP客户端。\n\n1. 安装NTP服务\n在每个客户端上安装NTP服务（如果尚未安装）：\n```bash\nsudo apt-get update\nsudo apt-get install ntp\n```\n\n2. 编辑NTP配置文件\n编辑`/etc/ntp.conf`文件，进行以下配置：\n```bash\nsudo nano /etc/ntp.conf\n```\n\n3.  配置内容\n这里我还将配置文件中`pool`还有其他`server`的行注释掉了。\n```text\n# 从pi1同步时间\nserver pi1\n\ndisable auth\nbroadcastclient\n```\n\n4. 保存并退出编辑器\n保存并退出编辑器后，重启NTP服务使配置生效：\n```bash\nsudo service ntp restart\n```\n\n5. 在客户端验证\n在pi2、pi3、pi4上执行`ntpq -p`命令，查看是否成功与pi1同步时间：\n```bash\nntpq -p\n```\n\n```text\n     remote           refid      st t when poll reach   delay   offset  jitter\n==============================================================================\n*pi1             202.112.29.82    2 u   56  512  377    0.819    0.321   0.119\n```\n输出结果中`remote`应显示为pi1的IP地址，`refid`应显示为pi1的上级时间源IP或域名，`st`应为较低的值（如3或4），`reach`应为非0值（如377），表示成功同步。\n\n###  NFS共享文件\n受内核限制","source":"_posts/2025-06-01-消息传递并行MPI.md","raw":"---\ntitle: 消息传递并行—MPI\ndate: 2025-06-01 10:34:58\nupdated: 2025-05-30 10:16:09\ncategories:\n  - [服务器&嵌入式平台操作, 工具]\ntags:\npermalink: 消息传递并行—mpi/\n---\n\nMPI是一个消息传递库接口规范，这个定义的所有部分都很重要。MPI主要针对消息传递并行编程模型，其中数据通过每个进程上的协作操作从一个进程的地址空间移动到另一个进程的地址空间。在集合操作、远程内存访问操作、动态进程创建和并行I/O等方面提供了对“经典”消息传递模型的扩展。MPI是一个规范，不是一个实现；有多个MPI的实现。这个规范是一个库接口；MPI不是一种语言，所有MPI操作都表达为函数、子程序或方法，根据适当的语言绑定，对于C和Fortran来说，这些是MPI标准的一部分。这个标准是通过一个由并行计算供应商、计算机科学家和应用开发者组成的社区的开放过程定义的。\n## 在Python+MPI开发环境中安装\n\n> [!NOTE] 操作环境\n> 香橙派4-lts Orange Pi 3.0.6 Buster with Linux 4.4.179-rk3399\n> python3.9.19 ~~pip24.0~~ pip24.3.1\n\n### MPICH的安装\n$Last Edited：2024.12.23/19:50$\n___\n\n参考：[两小时入门MPI与并行计算（二）：MPI的安装与配置 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/356705583)\n[Downloads | MPICH](https://www.mpich.org/downloads/)\nMPICH与OpenMPI是对MPI标准的具体实现。\n\n1. 安装前先检查是否有需要的编译器：\n```bash\nwhich gcc \nwhich gfortran \n```\n输出安装目录时，可以进行下一步安装。否则需要先安装好这两个编译器。\n\n2. 下载合适的安装文件。\n我选择的是用deb包安装（直接用apt安装应该也可以）。因为是Debian系统，可以从这个网址下载[Debian -- 软件包下载地址选择 -- mpich_3.3-3_arm64.deb](https://packages.debian.org/buster/arm64/mpich/download)也可以从网站上找到其他版本。此外，也可以看到mpich依赖的软件包：[Debian -- 在 buster 中的 mpich 软件包详细信息](https://packages.debian.org/buster/mpich)\n复制下载地址，输入:\n```bash\nwget http://ftp.cn.debian.org/debian/pool/main/m/mpich/mpich_3.3-3_arm64.deb\n```\n\n下载完成后，安装deb包：\n```bash\nsudo dpkg -i mpich_3.3-3_arm64.deb\n```\n\n3. 上述2步相当于：(可替代)\n```bash\nsudo apt install mpich\n```\n\n4. 缺失的依赖用以下指令安装：\n```bash\napt --fix-broken install\n```\n\n接下来还需要执行：\n```bash\nsudo apt install libmpich-dev\n```\n\n5. 测试程序\n来源于：[02-第一个MPI程序：Hello world_头歌第2关:使用mpi运行\"hello world-CSDN博客](https://blog.csdn.net/Sunshine8430/article/details/80982847)\n创建一个helloworld文件：\n```bash\nvim helloworld.c\n```\n\n内容如下：\n```C `include` <mpi.h> `include` <stdio.h>\n\nint main(int argc, char** argv){\n    //初始化MPI环境\n    MPI_Init(NULL, NULL);\n\n    //获取进程数\n    int world_size;\n    MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n    //获取进程的等级\n    int world_rank;\n    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n    //获取进程的名字\n    char processor_name[MPI_MAX_PROCESSOR_NAME];\n    int name_len;\n    MPI_Get_processor_name(processor_name, &name_len);\n\n    //打印helloworld\n    printf(\"Hello world from processor %s, rank %d out of %d processors\\n\",processor_name, world_rank, world_size);\n\n    //关闭MPI环境\n    MPI_Finalize();\n}\n```\n复制进去，保存退出。\n\n编译文件：\n```bash\nmpicc helloworld.c -o helloworld\n```\n成功编译后，目录中会出现helloworld文件。\n\n运行：\n```bash\nmpirun -np 4 ./helloworld\n```\n\n结果如下：\n```text\nHello world from processor orangepi4-lts, rank 1 out of 4 processors\nHello world from processor orangepi4-lts, rank 2 out of 4 processors\nHello world from processor orangepi4-lts, rank 3 out of 4 processors\nHello world from processor orangepi4-lts, rank 0 out of 4 processors\n```\n### mpi4py的安装\n$Last Edited：2024.12.30/15:24$\n___\n\n参考官方文档：[Installation — MPI for Python 3.1.6 documentation (mpi4py.readthedocs.io)](https://mpi4py.readthedocs.io/en/stable/install.html#testing)\n\n1. 直接用pip安装：\n```bash\npython -m pip install mpi4py\n```\n报错缺什么包就装什么，安装不上也有可能是版本问题，可以换一个版本的Python和pip试试。\n\n2. 检查版本\n```bash\npip show mpi4py\n```\n\n或者\n```bash\npip list\n```\n我安装的是4.0.1，与pip-24.3.1匹配\n\n显示\n```text\nroot@pi1:~# pip show mpi4py\nName: mpi4py\nVersion: 4.0.1\nSummary: Python bindings for MPI\nHome-page: https://mpi4py.github.io\nAuthor: Lisandro Dalcin\nAuthor-email: dalcinl@gmail.com\nLicense: BSD-3-Clause\nLocation: /usr/local/python3/lib/python3.9/site-packages\nRequires: \nRequired-by: \n```\n\n3. 测试1\n用到了`mpi4py.bench` 模块中的具体基准测试，输入指令：\n```bash\nmpiexec -n 5 python -m mpi4py.bench helloworld\n```\n- `-n 5`：这个选项指定了要启动的进程数，这里是5个。\n- `python`：这是您想要使用的Python解释器。想在虚拟环境运行就是虚拟环境解释器的路径==./myenv/bin/python==\n- `-m`：这个选项用于运行Python模块。\n\n输出：\n```text\nHello, World! I am process 0 of 5 on orangepi4-lts.\nHello, World! I am process 1 of 5 on orangepi4-lts.\nHello, World! I am process 2 of 5 on orangepi4-lts.\nHello, World! I am process 3 of 5 on orangepi4-lts.\nHello, World! I am process 4 of 5 on orangepi4-lts.\n```\n\n4. 测试2\n来源于：[Python使用MPI实现分布式计算（mpi4py） - 知乎](https://zhuanlan.zhihu.com/p/157804393)\n\n创建一个mpi_test.py文件，写入：\n```python\nfrom mpi4py import MPI\n\ncomm = MPI.COMM_WORLD\nsize = comm.Get_size()\nrank = comm.Get_rank()\n\nif rank == 0:\n    msg = 'Hello, world'\n    comm.send(msg, dest=1)\nelif rank == 1:\n    s = comm.recv()\n    print(\"rank %d: %s\" % (rank, s))\nelse:\n    print(\"rank %d: idle\" % (rank))\n```\n\n输入指令：\n```bash\nmpiexec -np 8 python mpi_test.py\n```\n\n输出：\n```text\nrank 3: idle\nrank 4: idle\nrank 5: idle\nrank 7: idle\nrank 2: idle\nrank 6: idle\nrank 1: Hello, world\n```\n\n## 在集群中配置MPI\n\n> [!NOTE] 操作环境\n> 同一局域网下的多台香橙派4-lts Orange Pi 3.0.6 Buster with Linux 4.4.179-rk3399\n> ip地址为192.168.0.110-192.168.0.113\n### 实现SSH免密登录\n详见[SSH#SSH免密登录](SSH#SSH免密登录)\n\n### 多主机并行测试\n$Last Edited：2024.12.31/10:32$\n___\n\n参考：[MPI多机器实现并行计算 - earth_houge - 博客园](https://www.cnblogs.com/earthhouge/p/9275250.html)\n[利用MPI多节点分布式并行计算PI实验报告_多节点并行计算-CSDN博客](https://blog.csdn.net/lhc121386/article/details/111600228)\n[mpich/doc/wiki/how_to/Using_the_Hydra_Process_Manager.md at main · pmodels/mpich](https://github.com/pmodels/mpich/blob/main/doc/wiki/how_to/Using_the_Hydra_Process_Manager.md)\n前置条件：==MPI在单机正常运行、多主机之间可以相互SSH免密登录、多主机的mpich和用到的库版本相同==。（只是单方面免密登录会报错，但只要主机和从机间双向免密，多个从机相互之间不配置免密似乎也可行）\n\n1. 创建一个文件，我命名的是mpi_hosts，直接在root目录下创建的。\n```bash\nvim mpihosts\n```\n\n输入==主机名称:运行的进程数==，如:\n```text\npi1:4\npi2:4\npi3:4\npi4:4\n```\n注意上述==主机名称==要和前面==ip映射的主机名称==对应。进程会按照主机名称顺序循环执行。\n\n做过实验，在pi4运行程序，而pi1不知道主机名到ip的映射，会出现报错：\n```text\n[proxy:0:0@pi1] HYDU_sock_connect (utils/sock/sock.c:145): unable to get host address for pi4 (1)\n[proxy:0:0@pi1] main (pm/pmiserv/pmip.c:183): unable to connect to server pi4 at port 34078 (check for firewalls!)\n```\n*将上述mpi_hosts中的pi4改为局域网ip*或者*修改pi1的主机映射*才可以正常运行。值得一提的是，如果使用前一种方法，在pi4上输出的结果仍显示pi4，说明这个名称为实际运行进程主机的主机名。\n\n2. 利用前面MPICH的hellworld程序测试：\n```bash\nmpirun -n 6 -f mpi_hosts ./helloworld\n```\n\n注意，多机运行程序时，要保证==程序在每个机器的相同目录下都存在==\n否则会报错：\n```text\n[proxy:0:0@pi3] HYDU_create_process (utils/launch/launch.c:74): execvp error on file ./helloworld (No such file or directory)\n```\n\n3. 只用pi3和pi4两个主机，在pi4上运行时输出如下：\n```text\nHello world from processor pi4, rank 5 out of 6 processors\nHello world from processor pi4, rank 4 out of 6 processors\nHello world from processor pi3, rank 1 out of 6 processors\nHello world from processor pi3, rank 2 out of 6 processors\nHello world from processor pi3, rank 3 out of 6 processors\nHello world from processor pi3, rank 0 out of 6 processors\n```\n\n4. 试了一下修改pi3的程序再运行。\n改了print函数中的内容：\n```text\nHello world from processor pi4, rank 5 out of 6 processors\nHello world from processor pi4, rank 4 out of 6 processors\nI changed Hello world from processor pi3, rank 3 out of 6 processors\nI changed Hello world from processor pi3, rank 2 out of 6 processors\nI changed Hello world from processor pi3, rank 1 out of 6 processors\nI changed Hello world from processor pi3, rank 0 out of 6 processors\n```\n\n改变量名，也没出现问题。甚至多机之间数组大小不匹配，只要程序本身没有语法问题也可以运行，只是最后会出现乱码（用numpy做gather试的），所以代码内部检查还是有必要的。\n\n## 为MPI并行任务优化集群\n\n> [!NOTE] 操作环境\n> 同一局域网下的多台香橙派4-lts Orange Pi 3.0.6 Buster with Linux 4.4.179-rk3399\n> ip地址为192.168.0.110-192.168.0.113\n\n### 时间同步\n$Last Edited：2025.01.14/12:11$\n___\n\n配置NTP服务器以同步局域网内的设备主要分为两部分：配置NTP服务器（服务端）和配置NTP客户端。以下是详细的步骤和配置方法：\n#### 配置NTP服务器（服务端）\n选择pi1（IP地址为192.168.0.110）作为NTP服务器。\n\n1. 安装NTP服务\n在pi1上安装NTP服务（如果尚未安装）：\n```bash\nsudo apt-get install ntp\n```\n\n2. 编辑NTP配置文件\n编辑`/etc/ntp.conf`文件，进行以下配置：\n```bash\nsudo nano /etc/ntp.conf\n```\n\n3. 配置内容\n```text\n# 使用公共NTP服务器作为时间源\nserver ntp.ntsc.ac.cn iburst\n `本地时间对外对时`\nserver 127.127.1.0\nfudge 127.127.1.0 stratum 5\n\n# 允许本地网络的机器同步时间\nrestrict 192.168.0.0 mask 255.255.255.0 nomodify notrap\n\nbroadcast pi2\nbroadcast pi3\n```\n4. 保存并退出编辑器\n保存并退出编辑器后，重启NTP服务使配置生效：\n```bash\nsudo service ntp restart\n```\n\n#### 配置NTP客户端\n假设pi2、pi3、pi4（IP地址分别为192.168.0.111、192.168.0.112、192.168.0.113）作为NTP客户端。\n\n1. 安装NTP服务\n在每个客户端上安装NTP服务（如果尚未安装）：\n```bash\nsudo apt-get update\nsudo apt-get install ntp\n```\n\n2. 编辑NTP配置文件\n编辑`/etc/ntp.conf`文件，进行以下配置：\n```bash\nsudo nano /etc/ntp.conf\n```\n\n3.  配置内容\n这里我还将配置文件中`pool`还有其他`server`的行注释掉了。\n```text\n# 从pi1同步时间\nserver pi1\n\ndisable auth\nbroadcastclient\n```\n\n4. 保存并退出编辑器\n保存并退出编辑器后，重启NTP服务使配置生效：\n```bash\nsudo service ntp restart\n```\n\n5. 在客户端验证\n在pi2、pi3、pi4上执行`ntpq -p`命令，查看是否成功与pi1同步时间：\n```bash\nntpq -p\n```\n\n```text\n     remote           refid      st t when poll reach   delay   offset  jitter\n==============================================================================\n*pi1             202.112.29.82    2 u   56  512  377    0.819    0.321   0.119\n```\n输出结果中`remote`应显示为pi1的IP地址，`refid`应显示为pi1的上级时间源IP或域名，`st`应为较低的值（如3或4），`reach`应为非0值（如377），表示成功同步。\n\n###  NFS共享文件\n受内核限制","slug":"2025-06-01-消息传递并行MPI","published":1,"__permalink":"消息传递并行—mpi/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0no001hzovdb3684d3m","content":"<p>MPI是一个消息传递库接口规范，这个定义的所有部分都很重要。MPI主要针对消息传递并行编程模型，其中数据通过每个进程上的协作操作从一个进程的地址空间移动到另一个进程的地址空间。在集合操作、远程内存访问操作、动态进程创建和并行I&#x2F;O等方面提供了对“经典”消息传递模型的扩展。MPI是一个规范，不是一个实现；有多个MPI的实现。这个规范是一个库接口；MPI不是一种语言，所有MPI操作都表达为函数、子程序或方法，根据适当的语言绑定，对于C和Fortran来说，这些是MPI标准的一部分。这个标准是通过一个由并行计算供应商、计算机科学家和应用开发者组成的社区的开放过程定义的。</p>\n<h2 id=\"在Python-MPI开发环境中安装\"><a href=\"#在Python-MPI开发环境中安装\" class=\"headerlink\" title=\"在Python+MPI开发环境中安装\"></a>在Python+MPI开发环境中安装</h2><blockquote>\n<p>[!NOTE] 操作环境<br>香橙派4-lts Orange Pi 3.0.6 Buster with Linux 4.4.179-rk3399<br>python3.9.19 <del>pip24.0</del> pip24.3.1</p>\n</blockquote>\n<h3 id=\"MPICH的安装\"><a href=\"#MPICH的安装\" class=\"headerlink\" title=\"MPICH的安装\"></a>MPICH的安装</h3><p>$Last Edited：2024.12.23&#x2F;19:50$</p>\n<hr>\n<p>参考：<a href=\"https://zhuanlan.zhihu.com/p/356705583\">两小时入门MPI与并行计算（二）：MPI的安装与配置 - 知乎 (zhihu.com)</a><br><a href=\"https://www.mpich.org/downloads/\">Downloads | MPICH</a><br>MPICH与OpenMPI是对MPI标准的具体实现。</p>\n<ol>\n<li><p>安装前先检查是否有需要的编译器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">which</span> gcc </span><br><span class=\"line\"><span class=\"built_in\">which</span> gfortran </span><br></pre></td></tr></table></figure>\n<p>输出安装目录时，可以进行下一步安装。否则需要先安装好这两个编译器。</p>\n</li>\n<li><p>下载合适的安装文件。<br>我选择的是用deb包安装（直接用apt安装应该也可以）。因为是Debian系统，可以从这个网址下载<a href=\"https://packages.debian.org/buster/arm64/mpich/download\">Debian – 软件包下载地址选择 – mpich_3.3-3_arm64.deb</a>也可以从网站上找到其他版本。此外，也可以看到mpich依赖的软件包：<a href=\"https://packages.debian.org/buster/mpich\">Debian – 在 buster 中的 mpich 软件包详细信息</a><br>复制下载地址，输入:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://ftp.cn.debian.org/debian/pool/main/m/mpich/mpich_3.3-3_arm64.deb</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>下载完成后，安装deb包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> dpkg -i mpich_3.3-3_arm64.deb</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p>上述2步相当于：(可替代)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install mpich</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>缺失的依赖用以下指令安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt --fix-broken install</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>接下来还需要执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install libmpich-dev</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>测试程序<br>来源于：<a href=\"https://blog.csdn.net/Sunshine8430/article/details/80982847\">02-第一个MPI程序：Hello world_头歌第2关:使用mpi运行”hello world-CSDN博客</a><br>创建一个helloworld文件：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim helloworld.c</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>内容如下：</p>\n<figure class=\"highlight c\"><figcaption><span>`include` <mpi.h> `include` <stdio.h></span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>** argv)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//初始化MPI环境</span></span><br><span class=\"line\">    MPI_Init(<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取进程数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> world_size;</span><br><span class=\"line\">    MPI_Comm_size(MPI_COMM_WORLD, &amp;world_size);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取进程的等级</span></span><br><span class=\"line\">    <span class=\"type\">int</span> world_rank;</span><br><span class=\"line\">    MPI_Comm_rank(MPI_COMM_WORLD, &amp;world_rank);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取进程的名字</span></span><br><span class=\"line\">    <span class=\"type\">char</span> processor_name[MPI_MAX_PROCESSOR_NAME];</span><br><span class=\"line\">    <span class=\"type\">int</span> name_len;</span><br><span class=\"line\">    MPI_Get_processor_name(processor_name, &amp;name_len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//打印helloworld</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Hello world from processor %s, rank %d out of %d processors\\n&quot;</span>,processor_name, world_rank, world_size);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//关闭MPI环境</span></span><br><span class=\"line\">    MPI_Finalize();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>复制进去，保存退出。</p>\n<p>编译文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mpicc helloworld.c -o helloworld</span><br></pre></td></tr></table></figure>\n<p>成功编译后，目录中会出现helloworld文件。</p>\n<p>运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mpirun -np 4 ./helloworld</span><br></pre></td></tr></table></figure>\n\n<p>结果如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello world from processor orangepi4-lts, rank 1 out of 4 processors</span><br><span class=\"line\">Hello world from processor orangepi4-lts, rank 2 out of 4 processors</span><br><span class=\"line\">Hello world from processor orangepi4-lts, rank 3 out of 4 processors</span><br><span class=\"line\">Hello world from processor orangepi4-lts, rank 0 out of 4 processors</span><br></pre></td></tr></table></figure>\n<h3 id=\"mpi4py的安装\"><a href=\"#mpi4py的安装\" class=\"headerlink\" title=\"mpi4py的安装\"></a>mpi4py的安装</h3><p>$Last Edited：2024.12.30&#x2F;15:24$</p>\n<hr>\n<p>参考官方文档：<a href=\"https://mpi4py.readthedocs.io/en/stable/install.html#testing\">Installation — MPI for Python 3.1.6 documentation (mpi4py.readthedocs.io)</a></p>\n<ol>\n<li><p>直接用pip安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m pip install mpi4py</span><br></pre></td></tr></table></figure>\n<p>报错缺什么包就装什么，安装不上也有可能是版本问题，可以换一个版本的Python和pip试试。</p>\n</li>\n<li><p>检查版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip show mpi4py</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip list</span><br></pre></td></tr></table></figure>\n<p>我安装的是4.0.1，与pip-24.3.1匹配</p>\n<p>显示</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@pi1:~# pip show mpi4py</span><br><span class=\"line\">Name: mpi4py</span><br><span class=\"line\">Version: 4.0.1</span><br><span class=\"line\">Summary: Python bindings for MPI</span><br><span class=\"line\">Home-page: https://mpi4py.github.io</span><br><span class=\"line\">Author: Lisandro Dalcin</span><br><span class=\"line\">Author-email: dalcinl@gmail.com</span><br><span class=\"line\">License: BSD-3-Clause</span><br><span class=\"line\">Location: /usr/local/python3/lib/python3.9/site-packages</span><br><span class=\"line\">Requires: </span><br><span class=\"line\">Required-by: </span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>测试1<br>用到了<code>mpi4py.bench</code> 模块中的具体基准测试，输入指令：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mpiexec -n 5 python -m mpi4py.bench helloworld</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li><code>-n 5</code>：这个选项指定了要启动的进程数，这里是5个。</li>\n<li><code>python</code>：这是您想要使用的Python解释器。想在虚拟环境运行就是虚拟环境解释器的路径&#x3D;&#x3D;.&#x2F;myenv&#x2F;bin&#x2F;python&#x3D;&#x3D;</li>\n<li><code>-m</code>：这个选项用于运行Python模块。</li>\n</ul>\n<p>输出：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello, World! I am process 0 of 5 on orangepi4-lts.</span><br><span class=\"line\">Hello, World! I am process 1 of 5 on orangepi4-lts.</span><br><span class=\"line\">Hello, World! I am process 2 of 5 on orangepi4-lts.</span><br><span class=\"line\">Hello, World! I am process 3 of 5 on orangepi4-lts.</span><br><span class=\"line\">Hello, World! I am process 4 of 5 on orangepi4-lts.</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>测试2<br>来源于：<a href=\"https://zhuanlan.zhihu.com/p/157804393\">Python使用MPI实现分布式计算（mpi4py） - 知乎</a></li>\n</ol>\n<p>创建一个mpi_test.py文件，写入：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> mpi4py <span class=\"keyword\">import</span> MPI</span><br><span class=\"line\"></span><br><span class=\"line\">comm = MPI.COMM_WORLD</span><br><span class=\"line\">size = comm.Get_size()</span><br><span class=\"line\">rank = comm.Get_rank()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> rank == <span class=\"number\">0</span>:</span><br><span class=\"line\">    msg = <span class=\"string\">&#x27;Hello, world&#x27;</span></span><br><span class=\"line\">    comm.send(msg, dest=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> rank == <span class=\"number\">1</span>:</span><br><span class=\"line\">    s = comm.recv()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;rank %d: %s&quot;</span> % (rank, s))</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;rank %d: idle&quot;</span> % (rank))</span><br></pre></td></tr></table></figure>\n\n<p>输入指令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mpiexec -np 8 python mpi_test.py</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rank 3: idle</span><br><span class=\"line\">rank 4: idle</span><br><span class=\"line\">rank 5: idle</span><br><span class=\"line\">rank 7: idle</span><br><span class=\"line\">rank 2: idle</span><br><span class=\"line\">rank 6: idle</span><br><span class=\"line\">rank 1: Hello, world</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在集群中配置MPI\"><a href=\"#在集群中配置MPI\" class=\"headerlink\" title=\"在集群中配置MPI\"></a>在集群中配置MPI</h2><blockquote>\n<p>[!NOTE] 操作环境<br>同一局域网下的多台香橙派4-lts Orange Pi 3.0.6 Buster with Linux 4.4.179-rk3399<br>ip地址为192.168.0.110-192.168.0.113</p>\n</blockquote>\n<h3 id=\"实现SSH免密登录\"><a href=\"#实现SSH免密登录\" class=\"headerlink\" title=\"实现SSH免密登录\"></a>实现SSH免密登录</h3><p>详见<a href=\"SSH#SSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95\">SSH#SSH免密登录</a></p>\n<h3 id=\"多主机并行测试\"><a href=\"#多主机并行测试\" class=\"headerlink\" title=\"多主机并行测试\"></a>多主机并行测试</h3><p>$Last Edited：2024.12.31&#x2F;10:32$</p>\n<hr>\n<p>参考：<a href=\"https://www.cnblogs.com/earthhouge/p/9275250.html\">MPI多机器实现并行计算 - earth_houge - 博客园</a><br><a href=\"https://blog.csdn.net/lhc121386/article/details/111600228\">利用MPI多节点分布式并行计算PI实验报告_多节点并行计算-CSDN博客</a><br><a href=\"https://github.com/pmodels/mpich/blob/main/doc/wiki/how_to/Using_the_Hydra_Process_Manager.md\">mpich&#x2F;doc&#x2F;wiki&#x2F;how_to&#x2F;Using_the_Hydra_Process_Manager.md at main · pmodels&#x2F;mpich</a><br>前置条件：&#x3D;&#x3D;MPI在单机正常运行、多主机之间可以相互SSH免密登录、多主机的mpich和用到的库版本相同&#x3D;&#x3D;。（只是单方面免密登录会报错，但只要主机和从机间双向免密，多个从机相互之间不配置免密似乎也可行）</p>\n<ol>\n<li>创建一个文件，我命名的是mpi_hosts，直接在root目录下创建的。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim mpihosts</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>输入&#x3D;&#x3D;主机名称:运行的进程数&#x3D;&#x3D;，如:</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pi1:4</span><br><span class=\"line\">pi2:4</span><br><span class=\"line\">pi3:4</span><br><span class=\"line\">pi4:4</span><br></pre></td></tr></table></figure>\n<p>注意上述&#x3D;&#x3D;主机名称&#x3D;&#x3D;要和前面&#x3D;&#x3D;ip映射的主机名称&#x3D;&#x3D;对应。进程会按照主机名称顺序循环执行。</p>\n<p>做过实验，在pi4运行程序，而pi1不知道主机名到ip的映射，会出现报错：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[proxy:0:0@pi1] HYDU_sock_connect (utils/sock/sock.c:145): unable to get host address for pi4 (1)</span><br><span class=\"line\">[proxy:0:0@pi1] main (pm/pmiserv/pmip.c:183): unable to connect to server pi4 at port 34078 (check for firewalls!)</span><br></pre></td></tr></table></figure>\n<p><em>将上述mpi_hosts中的pi4改为局域网ip</em>或者<em>修改pi1的主机映射</em>才可以正常运行。值得一提的是，如果使用前一种方法，在pi4上输出的结果仍显示pi4，说明这个名称为实际运行进程主机的主机名。</p>\n<ol start=\"2\">\n<li>利用前面MPICH的hellworld程序测试：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mpirun -n 6 -f mpi_hosts ./helloworld</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>注意，多机运行程序时，要保证&#x3D;&#x3D;程序在每个机器的相同目录下都存在&#x3D;&#x3D;<br>否则会报错：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[proxy:0:0@pi3] HYDU_create_process (utils/launch/launch.c:74): execvp error on file ./helloworld (No such file or directory)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p>只用pi3和pi4两个主机，在pi4上运行时输出如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello world from processor pi4, rank 5 out of 6 processors</span><br><span class=\"line\">Hello world from processor pi4, rank 4 out of 6 processors</span><br><span class=\"line\">Hello world from processor pi3, rank 1 out of 6 processors</span><br><span class=\"line\">Hello world from processor pi3, rank 2 out of 6 processors</span><br><span class=\"line\">Hello world from processor pi3, rank 3 out of 6 processors</span><br><span class=\"line\">Hello world from processor pi3, rank 0 out of 6 processors</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>试了一下修改pi3的程序再运行。<br>改了print函数中的内容：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello world from processor pi4, rank 5 out of 6 processors</span><br><span class=\"line\">Hello world from processor pi4, rank 4 out of 6 processors</span><br><span class=\"line\">I changed Hello world from processor pi3, rank 3 out of 6 processors</span><br><span class=\"line\">I changed Hello world from processor pi3, rank 2 out of 6 processors</span><br><span class=\"line\">I changed Hello world from processor pi3, rank 1 out of 6 processors</span><br><span class=\"line\">I changed Hello world from processor pi3, rank 0 out of 6 processors</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>改变量名，也没出现问题。甚至多机之间数组大小不匹配，只要程序本身没有语法问题也可以运行，只是最后会出现乱码（用numpy做gather试的），所以代码内部检查还是有必要的。</p>\n<h2 id=\"为MPI并行任务优化集群\"><a href=\"#为MPI并行任务优化集群\" class=\"headerlink\" title=\"为MPI并行任务优化集群\"></a>为MPI并行任务优化集群</h2><blockquote>\n<p>[!NOTE] 操作环境<br>同一局域网下的多台香橙派4-lts Orange Pi 3.0.6 Buster with Linux 4.4.179-rk3399<br>ip地址为192.168.0.110-192.168.0.113</p>\n</blockquote>\n<h3 id=\"时间同步\"><a href=\"#时间同步\" class=\"headerlink\" title=\"时间同步\"></a>时间同步</h3><p>$Last Edited：2025.01.14&#x2F;12:11$</p>\n<hr>\n<p>配置NTP服务器以同步局域网内的设备主要分为两部分：配置NTP服务器（服务端）和配置NTP客户端。以下是详细的步骤和配置方法：</p>\n<h4 id=\"配置NTP服务器（服务端）\"><a href=\"#配置NTP服务器（服务端）\" class=\"headerlink\" title=\"配置NTP服务器（服务端）\"></a>配置NTP服务器（服务端）</h4><p>选择pi1（IP地址为192.168.0.110）作为NTP服务器。</p>\n<ol>\n<li><p>安装NTP服务<br>在pi1上安装NTP服务（如果尚未安装）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install ntp</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑NTP配置文件<br>编辑<code>/etc/ntp.conf</code>文件，进行以下配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nano /etc/ntp.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置内容</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用公共NTP服务器作为时间源</span><br><span class=\"line\">server ntp.ntsc.ac.cn iburst</span><br><span class=\"line\"> `本地时间对外对时`</span><br><span class=\"line\">server 127.127.1.0</span><br><span class=\"line\">fudge 127.127.1.0 stratum 5</span><br><span class=\"line\"></span><br><span class=\"line\"># 允许本地网络的机器同步时间</span><br><span class=\"line\">restrict 192.168.0.0 mask 255.255.255.0 nomodify notrap</span><br><span class=\"line\"></span><br><span class=\"line\">broadcast pi2</span><br><span class=\"line\">broadcast pi3</span><br></pre></td></tr></table></figure></li>\n<li><p>保存并退出编辑器<br>保存并退出编辑器后，重启NTP服务使配置生效：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> service ntp restart</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"配置NTP客户端\"><a href=\"#配置NTP客户端\" class=\"headerlink\" title=\"配置NTP客户端\"></a>配置NTP客户端</h4><p>假设pi2、pi3、pi4（IP地址分别为192.168.0.111、192.168.0.112、192.168.0.113）作为NTP客户端。</p>\n<ol>\n<li><p>安装NTP服务<br>在每个客户端上安装NTP服务（如果尚未安装）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get update</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install ntp</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑NTP配置文件<br>编辑<code>/etc/ntp.conf</code>文件，进行以下配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nano /etc/ntp.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置内容<br>这里我还将配置文件中<code>pool</code>还有其他<code>server</code>的行注释掉了。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 从pi1同步时间</span><br><span class=\"line\">server pi1</span><br><span class=\"line\"></span><br><span class=\"line\">disable auth</span><br><span class=\"line\">broadcastclient</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>保存并退出编辑器<br>保存并退出编辑器后，重启NTP服务使配置生效：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> service ntp restart</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在客户端验证<br>在pi2、pi3、pi4上执行<code>ntpq -p</code>命令，查看是否成功与pi1同步时间：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ntpq -p</span><br></pre></td></tr></table></figure></li>\n</ol>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     remote           refid      st t when poll reach   delay   offset  jitter</span><br><span class=\"line\">==============================================================================</span><br><span class=\"line\">*pi1             202.112.29.82    2 u   56  512  377    0.819    0.321   0.119</span><br></pre></td></tr></table></figure>\n<p>输出结果中<code>remote</code>应显示为pi1的IP地址，<code>refid</code>应显示为pi1的上级时间源IP或域名，<code>st</code>应为较低的值（如3或4），<code>reach</code>应为非0值（如377），表示成功同步。</p>\n<h3 id=\"NFS共享文件\"><a href=\"#NFS共享文件\" class=\"headerlink\" title=\"NFS共享文件\"></a>NFS共享文件</h3><p>受内核限制</p>\n","excerpt":"","more":"<p>MPI是一个消息传递库接口规范，这个定义的所有部分都很重要。MPI主要针对消息传递并行编程模型，其中数据通过每个进程上的协作操作从一个进程的地址空间移动到另一个进程的地址空间。在集合操作、远程内存访问操作、动态进程创建和并行I&#x2F;O等方面提供了对“经典”消息传递模型的扩展。MPI是一个规范，不是一个实现；有多个MPI的实现。这个规范是一个库接口；MPI不是一种语言，所有MPI操作都表达为函数、子程序或方法，根据适当的语言绑定，对于C和Fortran来说，这些是MPI标准的一部分。这个标准是通过一个由并行计算供应商、计算机科学家和应用开发者组成的社区的开放过程定义的。</p>\n<h2 id=\"在Python-MPI开发环境中安装\"><a href=\"#在Python-MPI开发环境中安装\" class=\"headerlink\" title=\"在Python+MPI开发环境中安装\"></a>在Python+MPI开发环境中安装</h2><blockquote>\n<p>[!NOTE] 操作环境<br>香橙派4-lts Orange Pi 3.0.6 Buster with Linux 4.4.179-rk3399<br>python3.9.19 <del>pip24.0</del> pip24.3.1</p>\n</blockquote>\n<h3 id=\"MPICH的安装\"><a href=\"#MPICH的安装\" class=\"headerlink\" title=\"MPICH的安装\"></a>MPICH的安装</h3><p>$Last Edited：2024.12.23&#x2F;19:50$</p>\n<hr>\n<p>参考：<a href=\"https://zhuanlan.zhihu.com/p/356705583\">两小时入门MPI与并行计算（二）：MPI的安装与配置 - 知乎 (zhihu.com)</a><br><a href=\"https://www.mpich.org/downloads/\">Downloads | MPICH</a><br>MPICH与OpenMPI是对MPI标准的具体实现。</p>\n<ol>\n<li><p>安装前先检查是否有需要的编译器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">which</span> gcc </span><br><span class=\"line\"><span class=\"built_in\">which</span> gfortran </span><br></pre></td></tr></table></figure>\n<p>输出安装目录时，可以进行下一步安装。否则需要先安装好这两个编译器。</p>\n</li>\n<li><p>下载合适的安装文件。<br>我选择的是用deb包安装（直接用apt安装应该也可以）。因为是Debian系统，可以从这个网址下载<a href=\"https://packages.debian.org/buster/arm64/mpich/download\">Debian – 软件包下载地址选择 – mpich_3.3-3_arm64.deb</a>也可以从网站上找到其他版本。此外，也可以看到mpich依赖的软件包：<a href=\"https://packages.debian.org/buster/mpich\">Debian – 在 buster 中的 mpich 软件包详细信息</a><br>复制下载地址，输入:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://ftp.cn.debian.org/debian/pool/main/m/mpich/mpich_3.3-3_arm64.deb</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>下载完成后，安装deb包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> dpkg -i mpich_3.3-3_arm64.deb</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p>上述2步相当于：(可替代)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install mpich</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>缺失的依赖用以下指令安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt --fix-broken install</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>接下来还需要执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install libmpich-dev</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>测试程序<br>来源于：<a href=\"https://blog.csdn.net/Sunshine8430/article/details/80982847\">02-第一个MPI程序：Hello world_头歌第2关:使用mpi运行”hello world-CSDN博客</a><br>创建一个helloworld文件：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim helloworld.c</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>内容如下：</p>\n<figure class=\"highlight c\"><figcaption><span>`include` <mpi.h> `include` <stdio.h></span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>** argv)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//初始化MPI环境</span></span><br><span class=\"line\">    MPI_Init(<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取进程数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> world_size;</span><br><span class=\"line\">    MPI_Comm_size(MPI_COMM_WORLD, &amp;world_size);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取进程的等级</span></span><br><span class=\"line\">    <span class=\"type\">int</span> world_rank;</span><br><span class=\"line\">    MPI_Comm_rank(MPI_COMM_WORLD, &amp;world_rank);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取进程的名字</span></span><br><span class=\"line\">    <span class=\"type\">char</span> processor_name[MPI_MAX_PROCESSOR_NAME];</span><br><span class=\"line\">    <span class=\"type\">int</span> name_len;</span><br><span class=\"line\">    MPI_Get_processor_name(processor_name, &amp;name_len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//打印helloworld</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Hello world from processor %s, rank %d out of %d processors\\n&quot;</span>,processor_name, world_rank, world_size);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//关闭MPI环境</span></span><br><span class=\"line\">    MPI_Finalize();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>复制进去，保存退出。</p>\n<p>编译文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mpicc helloworld.c -o helloworld</span><br></pre></td></tr></table></figure>\n<p>成功编译后，目录中会出现helloworld文件。</p>\n<p>运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mpirun -np 4 ./helloworld</span><br></pre></td></tr></table></figure>\n\n<p>结果如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello world from processor orangepi4-lts, rank 1 out of 4 processors</span><br><span class=\"line\">Hello world from processor orangepi4-lts, rank 2 out of 4 processors</span><br><span class=\"line\">Hello world from processor orangepi4-lts, rank 3 out of 4 processors</span><br><span class=\"line\">Hello world from processor orangepi4-lts, rank 0 out of 4 processors</span><br></pre></td></tr></table></figure>\n<h3 id=\"mpi4py的安装\"><a href=\"#mpi4py的安装\" class=\"headerlink\" title=\"mpi4py的安装\"></a>mpi4py的安装</h3><p>$Last Edited：2024.12.30&#x2F;15:24$</p>\n<hr>\n<p>参考官方文档：<a href=\"https://mpi4py.readthedocs.io/en/stable/install.html#testing\">Installation — MPI for Python 3.1.6 documentation (mpi4py.readthedocs.io)</a></p>\n<ol>\n<li><p>直接用pip安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m pip install mpi4py</span><br></pre></td></tr></table></figure>\n<p>报错缺什么包就装什么，安装不上也有可能是版本问题，可以换一个版本的Python和pip试试。</p>\n</li>\n<li><p>检查版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip show mpi4py</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip list</span><br></pre></td></tr></table></figure>\n<p>我安装的是4.0.1，与pip-24.3.1匹配</p>\n<p>显示</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@pi1:~# pip show mpi4py</span><br><span class=\"line\">Name: mpi4py</span><br><span class=\"line\">Version: 4.0.1</span><br><span class=\"line\">Summary: Python bindings for MPI</span><br><span class=\"line\">Home-page: https://mpi4py.github.io</span><br><span class=\"line\">Author: Lisandro Dalcin</span><br><span class=\"line\">Author-email: dalcinl@gmail.com</span><br><span class=\"line\">License: BSD-3-Clause</span><br><span class=\"line\">Location: /usr/local/python3/lib/python3.9/site-packages</span><br><span class=\"line\">Requires: </span><br><span class=\"line\">Required-by: </span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>测试1<br>用到了<code>mpi4py.bench</code> 模块中的具体基准测试，输入指令：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mpiexec -n 5 python -m mpi4py.bench helloworld</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li><code>-n 5</code>：这个选项指定了要启动的进程数，这里是5个。</li>\n<li><code>python</code>：这是您想要使用的Python解释器。想在虚拟环境运行就是虚拟环境解释器的路径&#x3D;&#x3D;.&#x2F;myenv&#x2F;bin&#x2F;python&#x3D;&#x3D;</li>\n<li><code>-m</code>：这个选项用于运行Python模块。</li>\n</ul>\n<p>输出：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello, World! I am process 0 of 5 on orangepi4-lts.</span><br><span class=\"line\">Hello, World! I am process 1 of 5 on orangepi4-lts.</span><br><span class=\"line\">Hello, World! I am process 2 of 5 on orangepi4-lts.</span><br><span class=\"line\">Hello, World! I am process 3 of 5 on orangepi4-lts.</span><br><span class=\"line\">Hello, World! I am process 4 of 5 on orangepi4-lts.</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>测试2<br>来源于：<a href=\"https://zhuanlan.zhihu.com/p/157804393\">Python使用MPI实现分布式计算（mpi4py） - 知乎</a></li>\n</ol>\n<p>创建一个mpi_test.py文件，写入：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> mpi4py <span class=\"keyword\">import</span> MPI</span><br><span class=\"line\"></span><br><span class=\"line\">comm = MPI.COMM_WORLD</span><br><span class=\"line\">size = comm.Get_size()</span><br><span class=\"line\">rank = comm.Get_rank()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> rank == <span class=\"number\">0</span>:</span><br><span class=\"line\">    msg = <span class=\"string\">&#x27;Hello, world&#x27;</span></span><br><span class=\"line\">    comm.send(msg, dest=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> rank == <span class=\"number\">1</span>:</span><br><span class=\"line\">    s = comm.recv()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;rank %d: %s&quot;</span> % (rank, s))</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;rank %d: idle&quot;</span> % (rank))</span><br></pre></td></tr></table></figure>\n\n<p>输入指令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mpiexec -np 8 python mpi_test.py</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rank 3: idle</span><br><span class=\"line\">rank 4: idle</span><br><span class=\"line\">rank 5: idle</span><br><span class=\"line\">rank 7: idle</span><br><span class=\"line\">rank 2: idle</span><br><span class=\"line\">rank 6: idle</span><br><span class=\"line\">rank 1: Hello, world</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在集群中配置MPI\"><a href=\"#在集群中配置MPI\" class=\"headerlink\" title=\"在集群中配置MPI\"></a>在集群中配置MPI</h2><blockquote>\n<p>[!NOTE] 操作环境<br>同一局域网下的多台香橙派4-lts Orange Pi 3.0.6 Buster with Linux 4.4.179-rk3399<br>ip地址为192.168.0.110-192.168.0.113</p>\n</blockquote>\n<h3 id=\"实现SSH免密登录\"><a href=\"#实现SSH免密登录\" class=\"headerlink\" title=\"实现SSH免密登录\"></a>实现SSH免密登录</h3><p>详见<a href=\"SSH#SSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95\">SSH#SSH免密登录</a></p>\n<h3 id=\"多主机并行测试\"><a href=\"#多主机并行测试\" class=\"headerlink\" title=\"多主机并行测试\"></a>多主机并行测试</h3><p>$Last Edited：2024.12.31&#x2F;10:32$</p>\n<hr>\n<p>参考：<a href=\"https://www.cnblogs.com/earthhouge/p/9275250.html\">MPI多机器实现并行计算 - earth_houge - 博客园</a><br><a href=\"https://blog.csdn.net/lhc121386/article/details/111600228\">利用MPI多节点分布式并行计算PI实验报告_多节点并行计算-CSDN博客</a><br><a href=\"https://github.com/pmodels/mpich/blob/main/doc/wiki/how_to/Using_the_Hydra_Process_Manager.md\">mpich&#x2F;doc&#x2F;wiki&#x2F;how_to&#x2F;Using_the_Hydra_Process_Manager.md at main · pmodels&#x2F;mpich</a><br>前置条件：&#x3D;&#x3D;MPI在单机正常运行、多主机之间可以相互SSH免密登录、多主机的mpich和用到的库版本相同&#x3D;&#x3D;。（只是单方面免密登录会报错，但只要主机和从机间双向免密，多个从机相互之间不配置免密似乎也可行）</p>\n<ol>\n<li>创建一个文件，我命名的是mpi_hosts，直接在root目录下创建的。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim mpihosts</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>输入&#x3D;&#x3D;主机名称:运行的进程数&#x3D;&#x3D;，如:</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pi1:4</span><br><span class=\"line\">pi2:4</span><br><span class=\"line\">pi3:4</span><br><span class=\"line\">pi4:4</span><br></pre></td></tr></table></figure>\n<p>注意上述&#x3D;&#x3D;主机名称&#x3D;&#x3D;要和前面&#x3D;&#x3D;ip映射的主机名称&#x3D;&#x3D;对应。进程会按照主机名称顺序循环执行。</p>\n<p>做过实验，在pi4运行程序，而pi1不知道主机名到ip的映射，会出现报错：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[proxy:0:0@pi1] HYDU_sock_connect (utils/sock/sock.c:145): unable to get host address for pi4 (1)</span><br><span class=\"line\">[proxy:0:0@pi1] main (pm/pmiserv/pmip.c:183): unable to connect to server pi4 at port 34078 (check for firewalls!)</span><br></pre></td></tr></table></figure>\n<p><em>将上述mpi_hosts中的pi4改为局域网ip</em>或者<em>修改pi1的主机映射</em>才可以正常运行。值得一提的是，如果使用前一种方法，在pi4上输出的结果仍显示pi4，说明这个名称为实际运行进程主机的主机名。</p>\n<ol start=\"2\">\n<li>利用前面MPICH的hellworld程序测试：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mpirun -n 6 -f mpi_hosts ./helloworld</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>注意，多机运行程序时，要保证&#x3D;&#x3D;程序在每个机器的相同目录下都存在&#x3D;&#x3D;<br>否则会报错：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[proxy:0:0@pi3] HYDU_create_process (utils/launch/launch.c:74): execvp error on file ./helloworld (No such file or directory)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p>只用pi3和pi4两个主机，在pi4上运行时输出如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello world from processor pi4, rank 5 out of 6 processors</span><br><span class=\"line\">Hello world from processor pi4, rank 4 out of 6 processors</span><br><span class=\"line\">Hello world from processor pi3, rank 1 out of 6 processors</span><br><span class=\"line\">Hello world from processor pi3, rank 2 out of 6 processors</span><br><span class=\"line\">Hello world from processor pi3, rank 3 out of 6 processors</span><br><span class=\"line\">Hello world from processor pi3, rank 0 out of 6 processors</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>试了一下修改pi3的程序再运行。<br>改了print函数中的内容：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello world from processor pi4, rank 5 out of 6 processors</span><br><span class=\"line\">Hello world from processor pi4, rank 4 out of 6 processors</span><br><span class=\"line\">I changed Hello world from processor pi3, rank 3 out of 6 processors</span><br><span class=\"line\">I changed Hello world from processor pi3, rank 2 out of 6 processors</span><br><span class=\"line\">I changed Hello world from processor pi3, rank 1 out of 6 processors</span><br><span class=\"line\">I changed Hello world from processor pi3, rank 0 out of 6 processors</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>改变量名，也没出现问题。甚至多机之间数组大小不匹配，只要程序本身没有语法问题也可以运行，只是最后会出现乱码（用numpy做gather试的），所以代码内部检查还是有必要的。</p>\n<h2 id=\"为MPI并行任务优化集群\"><a href=\"#为MPI并行任务优化集群\" class=\"headerlink\" title=\"为MPI并行任务优化集群\"></a>为MPI并行任务优化集群</h2><blockquote>\n<p>[!NOTE] 操作环境<br>同一局域网下的多台香橙派4-lts Orange Pi 3.0.6 Buster with Linux 4.4.179-rk3399<br>ip地址为192.168.0.110-192.168.0.113</p>\n</blockquote>\n<h3 id=\"时间同步\"><a href=\"#时间同步\" class=\"headerlink\" title=\"时间同步\"></a>时间同步</h3><p>$Last Edited：2025.01.14&#x2F;12:11$</p>\n<hr>\n<p>配置NTP服务器以同步局域网内的设备主要分为两部分：配置NTP服务器（服务端）和配置NTP客户端。以下是详细的步骤和配置方法：</p>\n<h4 id=\"配置NTP服务器（服务端）\"><a href=\"#配置NTP服务器（服务端）\" class=\"headerlink\" title=\"配置NTP服务器（服务端）\"></a>配置NTP服务器（服务端）</h4><p>选择pi1（IP地址为192.168.0.110）作为NTP服务器。</p>\n<ol>\n<li><p>安装NTP服务<br>在pi1上安装NTP服务（如果尚未安装）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install ntp</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑NTP配置文件<br>编辑<code>/etc/ntp.conf</code>文件，进行以下配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nano /etc/ntp.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置内容</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用公共NTP服务器作为时间源</span><br><span class=\"line\">server ntp.ntsc.ac.cn iburst</span><br><span class=\"line\"> `本地时间对外对时`</span><br><span class=\"line\">server 127.127.1.0</span><br><span class=\"line\">fudge 127.127.1.0 stratum 5</span><br><span class=\"line\"></span><br><span class=\"line\"># 允许本地网络的机器同步时间</span><br><span class=\"line\">restrict 192.168.0.0 mask 255.255.255.0 nomodify notrap</span><br><span class=\"line\"></span><br><span class=\"line\">broadcast pi2</span><br><span class=\"line\">broadcast pi3</span><br></pre></td></tr></table></figure></li>\n<li><p>保存并退出编辑器<br>保存并退出编辑器后，重启NTP服务使配置生效：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> service ntp restart</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"配置NTP客户端\"><a href=\"#配置NTP客户端\" class=\"headerlink\" title=\"配置NTP客户端\"></a>配置NTP客户端</h4><p>假设pi2、pi3、pi4（IP地址分别为192.168.0.111、192.168.0.112、192.168.0.113）作为NTP客户端。</p>\n<ol>\n<li><p>安装NTP服务<br>在每个客户端上安装NTP服务（如果尚未安装）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get update</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install ntp</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑NTP配置文件<br>编辑<code>/etc/ntp.conf</code>文件，进行以下配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nano /etc/ntp.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置内容<br>这里我还将配置文件中<code>pool</code>还有其他<code>server</code>的行注释掉了。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 从pi1同步时间</span><br><span class=\"line\">server pi1</span><br><span class=\"line\"></span><br><span class=\"line\">disable auth</span><br><span class=\"line\">broadcastclient</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>保存并退出编辑器<br>保存并退出编辑器后，重启NTP服务使配置生效：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> service ntp restart</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在客户端验证<br>在pi2、pi3、pi4上执行<code>ntpq -p</code>命令，查看是否成功与pi1同步时间：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ntpq -p</span><br></pre></td></tr></table></figure></li>\n</ol>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     remote           refid      st t when poll reach   delay   offset  jitter</span><br><span class=\"line\">==============================================================================</span><br><span class=\"line\">*pi1             202.112.29.82    2 u   56  512  377    0.819    0.321   0.119</span><br></pre></td></tr></table></figure>\n<p>输出结果中<code>remote</code>应显示为pi1的IP地址，<code>refid</code>应显示为pi1的上级时间源IP或域名，<code>st</code>应为较低的值（如3或4），<code>reach</code>应为非0值（如377），表示成功同步。</p>\n<h3 id=\"NFS共享文件\"><a href=\"#NFS共享文件\" class=\"headerlink\" title=\"NFS共享文件\"></a>NFS共享文件</h3><p>受内核限制</p>\n"},{"title":"深度学习相关","date":"2025-06-01T02:34:58.000Z","updated":"2025-07-15T12:19:21.000Z","_content":"\n## NVIDIA驱动、CUDA 安装\n云服务器在配置时可以选择下载显卡驱动，但是如果后续过程中驱动出现了问题，还是需要手动重装。系统盘扩容之后，运行nvidia-smi，显示错误Failed to initialize NVML: Driver/library version mismatch，这里重装驱动解决。\n参考：[在 Ubuntu 18.04 （arm64/aarch64） 下安装 T4 Nvidia 显卡驱动 - Ting011 - 博客园 (cnblogs.com)](https://www.cnblogs.com/tingnote/p/16623213.html)\n\n一些指令可能用到：[ubuntu查看显卡信息、卸载驱动、CUDA - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/243256494)\n\n> [!NOTE] 操作环境\n> Ubuntu-22.04 NVIDIA  T4和A10 阿里云服务器 \n> \n### 1.卸载现有的驱动程序、安装依赖\n\n```bash\nsudo apt-get remove --purge nvidia*\n```\n安装依赖。(这一步我没用到，可能有用就贴上了)\n```bash\nsudo apt-get update \nsudo apt-get install g++\nsudo apt-get install gcc\nsudo apt-get install make\n```\n### 2.驱动程序下载\n输入\n```bash\nlspci | grep -i nvidia\n```\n查看显卡型号。到官方网站，选择合适的选项，下载驱动程序。[官方驱动 | NVIDIA](https://www.nvidia.cn/Download/index.aspx?lang=cn)\n![GPUdriver.png](/images/GPUdriver.png)\n我下载的是deb文件nvidia-driver-local-repo-ubuntu2204-550.54.15_1.0-1_amd64.deb。执行：(这个过程中如果报错不是deb文件，可能是传输过程出现了损坏，需要重新传输)\n```bash\nsudo dpkg -i nvidia-driver-local-repo-ubuntu2204-550.54.15_1.0-1_amd64.deb\n```\n接下来执行：\n```bash\nsudo apt-get update\nsudo apt-get install cuda-drivers\n```\n重新启动：\n```bash\nsudo reboot\n```\n查看是否安装成功，显示显卡版本和驱动版本。(deb文件装完那一步之后就可以试一下，试过但忘了能不能用，显示结果的窗口也没保存orz)\n```bash\nnvidia-smi\n```\n检查CUDA。\n```bash\nnvcc --version\n```\n\n### 3. 另一种方法：找到匹配的库安装\n输入指令找到推荐的驱动：\n```bash\nsudo ubuntu-drivers devices\n```\n比如结果是这样的：\n```bash\ndriver   : nvidia-driver-535-server-open - distro non-free\ndriver   : nvidia-driver-545-open - distro non-free\ndriver   : nvidia-driver-550-server - distro non-free\ndriver   : nvidia-driver-550-server-open - distro non-free\ndriver   : nvidia-driver-470-server - distro non-free\ndriver   : nvidia-driver-535-server - distro non-free\ndriver   : nvidia-driver-470 - distro non-free\ndriver   : nvidia-driver-535 - distro non-free recommended\ndriver   : nvidia-driver-535-open - distro non-free\ndriver   : nvidia-driver-545 - distro non-free\ndriver   : xserver-xorg-video-nouveau - distro free builtin\n```\n接下来运行：\n```bash\nsudo apt install nvidia-driver-535\n```\n安装完成后，nvidia-smi测试成功。\n![nvidia&cuda_test.png](/images/nvidia&cuda_test.png)\n## Pytorch安装\n\n> [!NOTE] 操作环境\n> Ubuntu-22.04 NVIDIA  A10 阿里云服务器 \n\n来源于：[Linux服务器配置Python+PyTorch+CUDA深度学习环境_linux cuda环境配置-CSDN博客](https://blog.csdn.net/NSJim/article/details/115386936)\n[Pytorch 如何检查PyTorch是否使用了GPU|极客教程 (geek-docs.com)](https://geek-docs.com/pytorch/pytorch-questions/1_pytorch_how_do_i_check_if_pytorch_is_using_the_gpu.html)\n查看系统的python版本：\n```bash\npython3 -V\n```\n使用conda创建虚拟环境。\n```bash\nconda create -n yolov8 python=3.10.12\n```\n创建完成后进入虚拟环境：\n```bash\nconda activate yolov8\n```\n检查显卡驱动和CUDA都没有问题。\n```bash\nnvidia-smi\nnvcc -V\n```\n打开pytorch官方网站[PyTorch](https://pytorch.org/)，查找对应配置的安装指令,CUDA版本是向下兼容的，选择低于本机CUDA版本的选项即可：\n![pytorch.png](/images/pytorch.png)\n输入给出的指令：\n```bash\nconda install pytorch torchvision torchaudio pytorch-cuda=12.1 -c pytorch -c nvidia\n```\n这一部分下载时间较长，中间可能会断，根据错误提示操作，多试几次。\n安装完成后测试是否能使用。测试指令和输出结果如下\n```python\n(yolov8) ecs-user@iZ2ze124h883ysp83dcmgrZ:~$ python\nPython 3.10.12 (main, Jul  5 2023, 18:54:27) [GCC 11.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import torch\n>>> torch.cuda.is_available()\nTrue\n>>> torch.cuda.current_device()\n0\n>>> torch.cuda.device_count()\n1\n```\n\n## Executorch安装\n\n> [!NOTE] 操作环境\n> 同一局域网下的多台香橙派4-lts Orange Pi 3.0.6 Bullseye with Linux 5.10.160-rk3399\n> ip地址为192.168.0.110-192.168.0.113\n\n参考：[Set up ExecuTorch | Arm Learning Paths](https://learn.arm.com/learning-paths/embedded-and-microcontrollers/rpi-llama3/executorch/)","source":"_posts/2025-06-01-深度学习相关.md","raw":"---\ntitle: 深度学习相关\ndate: 2025-06-01 10:34:58\nupdated: 2025-07-15 20:19:21\ncategories:\n  - [服务器&嵌入式平台操作, 基础配置]\ntags:\npermalink: 深度学习相关/\n---\n\n## NVIDIA驱动、CUDA 安装\n云服务器在配置时可以选择下载显卡驱动，但是如果后续过程中驱动出现了问题，还是需要手动重装。系统盘扩容之后，运行nvidia-smi，显示错误Failed to initialize NVML: Driver/library version mismatch，这里重装驱动解决。\n参考：[在 Ubuntu 18.04 （arm64/aarch64） 下安装 T4 Nvidia 显卡驱动 - Ting011 - 博客园 (cnblogs.com)](https://www.cnblogs.com/tingnote/p/16623213.html)\n\n一些指令可能用到：[ubuntu查看显卡信息、卸载驱动、CUDA - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/243256494)\n\n> [!NOTE] 操作环境\n> Ubuntu-22.04 NVIDIA  T4和A10 阿里云服务器 \n> \n### 1.卸载现有的驱动程序、安装依赖\n\n```bash\nsudo apt-get remove --purge nvidia*\n```\n安装依赖。(这一步我没用到，可能有用就贴上了)\n```bash\nsudo apt-get update \nsudo apt-get install g++\nsudo apt-get install gcc\nsudo apt-get install make\n```\n### 2.驱动程序下载\n输入\n```bash\nlspci | grep -i nvidia\n```\n查看显卡型号。到官方网站，选择合适的选项，下载驱动程序。[官方驱动 | NVIDIA](https://www.nvidia.cn/Download/index.aspx?lang=cn)\n![GPUdriver.png](/images/GPUdriver.png)\n我下载的是deb文件nvidia-driver-local-repo-ubuntu2204-550.54.15_1.0-1_amd64.deb。执行：(这个过程中如果报错不是deb文件，可能是传输过程出现了损坏，需要重新传输)\n```bash\nsudo dpkg -i nvidia-driver-local-repo-ubuntu2204-550.54.15_1.0-1_amd64.deb\n```\n接下来执行：\n```bash\nsudo apt-get update\nsudo apt-get install cuda-drivers\n```\n重新启动：\n```bash\nsudo reboot\n```\n查看是否安装成功，显示显卡版本和驱动版本。(deb文件装完那一步之后就可以试一下，试过但忘了能不能用，显示结果的窗口也没保存orz)\n```bash\nnvidia-smi\n```\n检查CUDA。\n```bash\nnvcc --version\n```\n\n### 3. 另一种方法：找到匹配的库安装\n输入指令找到推荐的驱动：\n```bash\nsudo ubuntu-drivers devices\n```\n比如结果是这样的：\n```bash\ndriver   : nvidia-driver-535-server-open - distro non-free\ndriver   : nvidia-driver-545-open - distro non-free\ndriver   : nvidia-driver-550-server - distro non-free\ndriver   : nvidia-driver-550-server-open - distro non-free\ndriver   : nvidia-driver-470-server - distro non-free\ndriver   : nvidia-driver-535-server - distro non-free\ndriver   : nvidia-driver-470 - distro non-free\ndriver   : nvidia-driver-535 - distro non-free recommended\ndriver   : nvidia-driver-535-open - distro non-free\ndriver   : nvidia-driver-545 - distro non-free\ndriver   : xserver-xorg-video-nouveau - distro free builtin\n```\n接下来运行：\n```bash\nsudo apt install nvidia-driver-535\n```\n安装完成后，nvidia-smi测试成功。\n![nvidia&cuda_test.png](/images/nvidia&cuda_test.png)\n## Pytorch安装\n\n> [!NOTE] 操作环境\n> Ubuntu-22.04 NVIDIA  A10 阿里云服务器 \n\n来源于：[Linux服务器配置Python+PyTorch+CUDA深度学习环境_linux cuda环境配置-CSDN博客](https://blog.csdn.net/NSJim/article/details/115386936)\n[Pytorch 如何检查PyTorch是否使用了GPU|极客教程 (geek-docs.com)](https://geek-docs.com/pytorch/pytorch-questions/1_pytorch_how_do_i_check_if_pytorch_is_using_the_gpu.html)\n查看系统的python版本：\n```bash\npython3 -V\n```\n使用conda创建虚拟环境。\n```bash\nconda create -n yolov8 python=3.10.12\n```\n创建完成后进入虚拟环境：\n```bash\nconda activate yolov8\n```\n检查显卡驱动和CUDA都没有问题。\n```bash\nnvidia-smi\nnvcc -V\n```\n打开pytorch官方网站[PyTorch](https://pytorch.org/)，查找对应配置的安装指令,CUDA版本是向下兼容的，选择低于本机CUDA版本的选项即可：\n![pytorch.png](/images/pytorch.png)\n输入给出的指令：\n```bash\nconda install pytorch torchvision torchaudio pytorch-cuda=12.1 -c pytorch -c nvidia\n```\n这一部分下载时间较长，中间可能会断，根据错误提示操作，多试几次。\n安装完成后测试是否能使用。测试指令和输出结果如下\n```python\n(yolov8) ecs-user@iZ2ze124h883ysp83dcmgrZ:~$ python\nPython 3.10.12 (main, Jul  5 2023, 18:54:27) [GCC 11.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import torch\n>>> torch.cuda.is_available()\nTrue\n>>> torch.cuda.current_device()\n0\n>>> torch.cuda.device_count()\n1\n```\n\n## Executorch安装\n\n> [!NOTE] 操作环境\n> 同一局域网下的多台香橙派4-lts Orange Pi 3.0.6 Bullseye with Linux 5.10.160-rk3399\n> ip地址为192.168.0.110-192.168.0.113\n\n参考：[Set up ExecuTorch | Arm Learning Paths](https://learn.arm.com/learning-paths/embedded-and-microcontrollers/rpi-llama3/executorch/)","slug":"2025-06-01-深度学习相关","published":1,"__permalink":"深度学习相关/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0np001jzovd1m7z8gkt","content":"<h2 id=\"NVIDIA驱动、CUDA-安装\"><a href=\"#NVIDIA驱动、CUDA-安装\" class=\"headerlink\" title=\"NVIDIA驱动、CUDA 安装\"></a>NVIDIA驱动、CUDA 安装</h2><p>云服务器在配置时可以选择下载显卡驱动，但是如果后续过程中驱动出现了问题，还是需要手动重装。系统盘扩容之后，运行nvidia-smi，显示错误Failed to initialize NVML: Driver&#x2F;library version mismatch，这里重装驱动解决。<br>参考：<a href=\"https://www.cnblogs.com/tingnote/p/16623213.html\">在 Ubuntu 18.04 （arm64&#x2F;aarch64） 下安装 T4 Nvidia 显卡驱动 - Ting011 - 博客园 (cnblogs.com)</a></p>\n<p>一些指令可能用到：<a href=\"https://zhuanlan.zhihu.com/p/243256494\">ubuntu查看显卡信息、卸载驱动、CUDA - 知乎 (zhihu.com)</a></p>\n<blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu-22.04 NVIDIA  T4和A10 阿里云服务器 </p>\n</blockquote>\n<h3 id=\"1-卸载现有的驱动程序、安装依赖\"><a href=\"#1-卸载现有的驱动程序、安装依赖\" class=\"headerlink\" title=\"1.卸载现有的驱动程序、安装依赖\"></a>1.卸载现有的驱动程序、安装依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get remove --purge nvidia*</span><br></pre></td></tr></table></figure>\n<p>安装依赖。(这一步我没用到，可能有用就贴上了)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get update </span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install g++</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install gcc</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install make</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-驱动程序下载\"><a href=\"#2-驱动程序下载\" class=\"headerlink\" title=\"2.驱动程序下载\"></a>2.驱动程序下载</h3><p>输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lspci | grep -i nvidia</span><br></pre></td></tr></table></figure>\n<p>查看显卡型号。到官方网站，选择合适的选项，下载驱动程序。<a href=\"https://www.nvidia.cn/Download/index.aspx?lang=cn\">官方驱动 | NVIDIA</a><br><img src=\"/418blog/images/GPUdriver.png\" alt=\"GPUdriver.png\"><br>我下载的是deb文件nvidia-driver-local-repo-ubuntu2204-550.54.15_1.0-1_amd64.deb。执行：(这个过程中如果报错不是deb文件，可能是传输过程出现了损坏，需要重新传输)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> dpkg -i nvidia-driver-local-repo-ubuntu2204-550.54.15_1.0-1_amd64.deb</span><br></pre></td></tr></table></figure>\n<p>接下来执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get update</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install cuda-drivers</span><br></pre></td></tr></table></figure>\n<p>重新启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> reboot</span><br></pre></td></tr></table></figure>\n<p>查看是否安装成功，显示显卡版本和驱动版本。(deb文件装完那一步之后就可以试一下，试过但忘了能不能用，显示结果的窗口也没保存orz)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia-smi</span><br></pre></td></tr></table></figure>\n<p>检查CUDA。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvcc --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-另一种方法：找到匹配的库安装\"><a href=\"#3-另一种方法：找到匹配的库安装\" class=\"headerlink\" title=\"3. 另一种方法：找到匹配的库安装\"></a>3. 另一种方法：找到匹配的库安装</h3><p>输入指令找到推荐的驱动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> ubuntu-drivers devices</span><br></pre></td></tr></table></figure>\n<p>比如结果是这样的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driver   : nvidia-driver-535-server-open - distro non-free</span><br><span class=\"line\">driver   : nvidia-driver-545-open - distro non-free</span><br><span class=\"line\">driver   : nvidia-driver-550-server - distro non-free</span><br><span class=\"line\">driver   : nvidia-driver-550-server-open - distro non-free</span><br><span class=\"line\">driver   : nvidia-driver-470-server - distro non-free</span><br><span class=\"line\">driver   : nvidia-driver-535-server - distro non-free</span><br><span class=\"line\">driver   : nvidia-driver-470 - distro non-free</span><br><span class=\"line\">driver   : nvidia-driver-535 - distro non-free recommended</span><br><span class=\"line\">driver   : nvidia-driver-535-open - distro non-free</span><br><span class=\"line\">driver   : nvidia-driver-545 - distro non-free</span><br><span class=\"line\">driver   : xserver-xorg-video-nouveau - distro free <span class=\"built_in\">builtin</span></span><br></pre></td></tr></table></figure>\n<p>接下来运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install nvidia-driver-535</span><br></pre></td></tr></table></figure>\n<p>安装完成后，nvidia-smi测试成功。<br><img src=\"/418blog/images/nvidia&cuda_test.png\" alt=\"nvidia&amp;cuda_test.png\"></p>\n<h2 id=\"Pytorch安装\"><a href=\"#Pytorch安装\" class=\"headerlink\" title=\"Pytorch安装\"></a>Pytorch安装</h2><blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu-22.04 NVIDIA  A10 阿里云服务器 </p>\n</blockquote>\n<p>来源于：<a href=\"https://blog.csdn.net/NSJim/article/details/115386936\">Linux服务器配置Python+PyTorch+CUDA深度学习环境_linux cuda环境配置-CSDN博客</a><br><a href=\"https://geek-docs.com/pytorch/pytorch-questions/1_pytorch_how_do_i_check_if_pytorch_is_using_the_gpu.html\">Pytorch 如何检查PyTorch是否使用了GPU|极客教程 (geek-docs.com)</a><br>查看系统的python版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -V</span><br></pre></td></tr></table></figure>\n<p>使用conda创建虚拟环境。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n yolov8 python=3.10.12</span><br></pre></td></tr></table></figure>\n<p>创建完成后进入虚拟环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda activate yolov8</span><br></pre></td></tr></table></figure>\n<p>检查显卡驱动和CUDA都没有问题。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia-smi</span><br><span class=\"line\">nvcc -V</span><br></pre></td></tr></table></figure>\n<p>打开pytorch官方网站<a href=\"https://pytorch.org/\">PyTorch</a>，查找对应配置的安装指令,CUDA版本是向下兼容的，选择低于本机CUDA版本的选项即可：<br><img src=\"/418blog/images/pytorch.png\" alt=\"pytorch.png\"><br>输入给出的指令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install pytorch torchvision torchaudio pytorch-cuda=12.1 -c pytorch -c nvidia</span><br></pre></td></tr></table></figure>\n<p>这一部分下载时间较长，中间可能会断，根据错误提示操作，多试几次。<br>安装完成后测试是否能使用。测试指令和输出结果如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(yolov8) ecs-user@iZ2ze124h883ysp83dcmgrZ:~$ python</span><br><span class=\"line\">Python <span class=\"number\">3.10</span><span class=\"number\">.12</span> (main, Jul  <span class=\"number\">5</span> <span class=\"number\">2023</span>, <span class=\"number\">18</span>:<span class=\"number\">54</span>:<span class=\"number\">27</span>) [GCC <span class=\"number\">11.2</span><span class=\"number\">.0</span>] on linux</span><br><span class=\"line\"><span class=\"type\">Type</span> <span class=\"string\">&quot;help&quot;</span>, <span class=\"string\">&quot;copyright&quot;</span>, <span class=\"string\">&quot;credits&quot;</span> <span class=\"keyword\">or</span> <span class=\"string\">&quot;license&quot;</span> <span class=\"keyword\">for</span> more information.</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>torch.cuda.is_available()</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>torch.cuda.current_device()</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>torch.cuda.device_count()</span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Executorch安装\"><a href=\"#Executorch安装\" class=\"headerlink\" title=\"Executorch安装\"></a>Executorch安装</h2><blockquote>\n<p>[!NOTE] 操作环境<br>同一局域网下的多台香橙派4-lts Orange Pi 3.0.6 Bullseye with Linux 5.10.160-rk3399<br>ip地址为192.168.0.110-192.168.0.113</p>\n</blockquote>\n<p>参考：<a href=\"https://learn.arm.com/learning-paths/embedded-and-microcontrollers/rpi-llama3/executorch/\">Set up ExecuTorch | Arm Learning Paths</a></p>\n","excerpt":"","more":"<h2 id=\"NVIDIA驱动、CUDA-安装\"><a href=\"#NVIDIA驱动、CUDA-安装\" class=\"headerlink\" title=\"NVIDIA驱动、CUDA 安装\"></a>NVIDIA驱动、CUDA 安装</h2><p>云服务器在配置时可以选择下载显卡驱动，但是如果后续过程中驱动出现了问题，还是需要手动重装。系统盘扩容之后，运行nvidia-smi，显示错误Failed to initialize NVML: Driver&#x2F;library version mismatch，这里重装驱动解决。<br>参考：<a href=\"https://www.cnblogs.com/tingnote/p/16623213.html\">在 Ubuntu 18.04 （arm64&#x2F;aarch64） 下安装 T4 Nvidia 显卡驱动 - Ting011 - 博客园 (cnblogs.com)</a></p>\n<p>一些指令可能用到：<a href=\"https://zhuanlan.zhihu.com/p/243256494\">ubuntu查看显卡信息、卸载驱动、CUDA - 知乎 (zhihu.com)</a></p>\n<blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu-22.04 NVIDIA  T4和A10 阿里云服务器 </p>\n</blockquote>\n<h3 id=\"1-卸载现有的驱动程序、安装依赖\"><a href=\"#1-卸载现有的驱动程序、安装依赖\" class=\"headerlink\" title=\"1.卸载现有的驱动程序、安装依赖\"></a>1.卸载现有的驱动程序、安装依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get remove --purge nvidia*</span><br></pre></td></tr></table></figure>\n<p>安装依赖。(这一步我没用到，可能有用就贴上了)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get update </span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install g++</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install gcc</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install make</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-驱动程序下载\"><a href=\"#2-驱动程序下载\" class=\"headerlink\" title=\"2.驱动程序下载\"></a>2.驱动程序下载</h3><p>输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lspci | grep -i nvidia</span><br></pre></td></tr></table></figure>\n<p>查看显卡型号。到官方网站，选择合适的选项，下载驱动程序。<a href=\"https://www.nvidia.cn/Download/index.aspx?lang=cn\">官方驱动 | NVIDIA</a><br><img src=\"/418blog/images/GPUdriver.png\" alt=\"GPUdriver.png\"><br>我下载的是deb文件nvidia-driver-local-repo-ubuntu2204-550.54.15_1.0-1_amd64.deb。执行：(这个过程中如果报错不是deb文件，可能是传输过程出现了损坏，需要重新传输)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> dpkg -i nvidia-driver-local-repo-ubuntu2204-550.54.15_1.0-1_amd64.deb</span><br></pre></td></tr></table></figure>\n<p>接下来执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get update</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install cuda-drivers</span><br></pre></td></tr></table></figure>\n<p>重新启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> reboot</span><br></pre></td></tr></table></figure>\n<p>查看是否安装成功，显示显卡版本和驱动版本。(deb文件装完那一步之后就可以试一下，试过但忘了能不能用，显示结果的窗口也没保存orz)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia-smi</span><br></pre></td></tr></table></figure>\n<p>检查CUDA。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvcc --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-另一种方法：找到匹配的库安装\"><a href=\"#3-另一种方法：找到匹配的库安装\" class=\"headerlink\" title=\"3. 另一种方法：找到匹配的库安装\"></a>3. 另一种方法：找到匹配的库安装</h3><p>输入指令找到推荐的驱动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> ubuntu-drivers devices</span><br></pre></td></tr></table></figure>\n<p>比如结果是这样的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driver   : nvidia-driver-535-server-open - distro non-free</span><br><span class=\"line\">driver   : nvidia-driver-545-open - distro non-free</span><br><span class=\"line\">driver   : nvidia-driver-550-server - distro non-free</span><br><span class=\"line\">driver   : nvidia-driver-550-server-open - distro non-free</span><br><span class=\"line\">driver   : nvidia-driver-470-server - distro non-free</span><br><span class=\"line\">driver   : nvidia-driver-535-server - distro non-free</span><br><span class=\"line\">driver   : nvidia-driver-470 - distro non-free</span><br><span class=\"line\">driver   : nvidia-driver-535 - distro non-free recommended</span><br><span class=\"line\">driver   : nvidia-driver-535-open - distro non-free</span><br><span class=\"line\">driver   : nvidia-driver-545 - distro non-free</span><br><span class=\"line\">driver   : xserver-xorg-video-nouveau - distro free <span class=\"built_in\">builtin</span></span><br></pre></td></tr></table></figure>\n<p>接下来运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install nvidia-driver-535</span><br></pre></td></tr></table></figure>\n<p>安装完成后，nvidia-smi测试成功。<br><img src=\"/418blog/images/nvidia&cuda_test.png\" alt=\"nvidia&amp;cuda_test.png\"></p>\n<h2 id=\"Pytorch安装\"><a href=\"#Pytorch安装\" class=\"headerlink\" title=\"Pytorch安装\"></a>Pytorch安装</h2><blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu-22.04 NVIDIA  A10 阿里云服务器 </p>\n</blockquote>\n<p>来源于：<a href=\"https://blog.csdn.net/NSJim/article/details/115386936\">Linux服务器配置Python+PyTorch+CUDA深度学习环境_linux cuda环境配置-CSDN博客</a><br><a href=\"https://geek-docs.com/pytorch/pytorch-questions/1_pytorch_how_do_i_check_if_pytorch_is_using_the_gpu.html\">Pytorch 如何检查PyTorch是否使用了GPU|极客教程 (geek-docs.com)</a><br>查看系统的python版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -V</span><br></pre></td></tr></table></figure>\n<p>使用conda创建虚拟环境。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n yolov8 python=3.10.12</span><br></pre></td></tr></table></figure>\n<p>创建完成后进入虚拟环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda activate yolov8</span><br></pre></td></tr></table></figure>\n<p>检查显卡驱动和CUDA都没有问题。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia-smi</span><br><span class=\"line\">nvcc -V</span><br></pre></td></tr></table></figure>\n<p>打开pytorch官方网站<a href=\"https://pytorch.org/\">PyTorch</a>，查找对应配置的安装指令,CUDA版本是向下兼容的，选择低于本机CUDA版本的选项即可：<br><img src=\"/418blog/images/pytorch.png\" alt=\"pytorch.png\"><br>输入给出的指令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install pytorch torchvision torchaudio pytorch-cuda=12.1 -c pytorch -c nvidia</span><br></pre></td></tr></table></figure>\n<p>这一部分下载时间较长，中间可能会断，根据错误提示操作，多试几次。<br>安装完成后测试是否能使用。测试指令和输出结果如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(yolov8) ecs-user@iZ2ze124h883ysp83dcmgrZ:~$ python</span><br><span class=\"line\">Python <span class=\"number\">3.10</span><span class=\"number\">.12</span> (main, Jul  <span class=\"number\">5</span> <span class=\"number\">2023</span>, <span class=\"number\">18</span>:<span class=\"number\">54</span>:<span class=\"number\">27</span>) [GCC <span class=\"number\">11.2</span><span class=\"number\">.0</span>] on linux</span><br><span class=\"line\"><span class=\"type\">Type</span> <span class=\"string\">&quot;help&quot;</span>, <span class=\"string\">&quot;copyright&quot;</span>, <span class=\"string\">&quot;credits&quot;</span> <span class=\"keyword\">or</span> <span class=\"string\">&quot;license&quot;</span> <span class=\"keyword\">for</span> more information.</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>torch.cuda.is_available()</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>torch.cuda.current_device()</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>torch.cuda.device_count()</span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Executorch安装\"><a href=\"#Executorch安装\" class=\"headerlink\" title=\"Executorch安装\"></a>Executorch安装</h2><blockquote>\n<p>[!NOTE] 操作环境<br>同一局域网下的多台香橙派4-lts Orange Pi 3.0.6 Bullseye with Linux 5.10.160-rk3399<br>ip地址为192.168.0.110-192.168.0.113</p>\n</blockquote>\n<p>参考：<a href=\"https://learn.arm.com/learning-paths/embedded-and-microcontrollers/rpi-llama3/executorch/\">Set up ExecuTorch | Arm Learning Paths</a></p>\n"},{"title":"系统包管理器apt-Q&A","date":"2025-06-01T02:34:58.000Z","updated":"2025-08-09T09:40:58.000Z","_content":"\n## apt换源时报错\n\n> [!NOTE] 操作环境\n> Ubuntu-22.04.3 server 树莓派4\n\n参考：[RK3399开发板ubuntu20.04报错 binary-arm64/Packages 404 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/589519525)\n[Linux：Ubuntu 国内源介绍_ports.ustc.edu.cn-CSDN博客](https://blog.csdn.net/Brendon_Tan/article/details/107061199)\n\nupdate时报错信息：\n```text\nE: Failed to fetch http://security.ubuntu.com/ubuntu/dists/focal-security/main/binary-arm64/Packages  404  Not Found [IP: 91.189.91.39 80]\nE: Failed to fetch http://cn.archive.ubuntu.com/ubuntu/dists/focal/main/binary-arm64/Packages  404  Not Found [IP: 91.189.91.38 80]\nE: Failed to fetch http://cn.archive.ubuntu.com/ubuntu/dists/focal-updates/main/binary-arm64/Packages  404  Not Found [IP: 91.189.91.38 80]\nE: Failed to fetch http://cn.archive.ubuntu.com/ubuntu/dists/focal-backports/main/binary-arm64/Packages  404  Not Found [IP: 91.189.91.38 80]\nE: Some index files failed to download. They have been ignored, or old ones used instead.\n```\n\n有效解决方案：修改sources.list（`vim /etc/apt/sources.list`， 把下面的粘贴上去）\nsources.list内容：\n```text\ndeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal main restricted universe multiverse `deb-src` http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal main restricted universe multiverse\n\ndeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-security main restricted universe multiverse `deb-src` http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-security main restricted universe multiverse\n\ndeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-updates main restricted universe multiverse `deb-src` http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-updates main restricted universe multiverse\n\ndeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-backports main restricted universe multiverse `deb-src` http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-backports main restricted universe multiverse\n```\n\n注意：\n1、ubuntu/和ubuntu-ports/的区别：\n前者是achieve源，收录的架构为 **AMD64 (x86_64)** 和 **Intel x86，**\n后者是ports源，收录的架构为 **arm64**，**armhf**，**PowerPC**，**ppc64el** 和 **s390x，**\nRK3399开发板是arm架构，必须用后者。\n\n2、如果报出缺少依赖包、404的错误，大概率还是需要换源，试过dev后面加[arch=amd64,i386]，无效\n\n用清华源时source.list该怎么写，去官网上找：\n[ubuntu | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror](https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/)\n[debian | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror](https://mirrors.tuna.tsinghua.edu.cn/help/debian/)\n\n## apt下载报错——# Breaks: x11-common (＜ 1:7.7+23~) but 1:7.7+19ubuntu14 is to be installed\n参考：[Ubuntu debianutils : Breaks: x11-common (＜ 1:7.7+23~) but 1:7.7+19ubuntu14 is to be installed_debianutils : breaks: x11-common (< 1:7.7+23~) but-CSDN博客](https://blog.csdn.net/qq_26545503/article/details/128792376)\n\n用aptitude的方式安装：\n```bash `如果没有\"aptitude\"这个命令,直接安装`\nsudo apt-get install aptitude `通过aptitude安装包`\nsudo aptitude install <包名>\n是否接受该解决方案？[Y/n/q?] `方案为不安装任何包，保持原样，可以选择拒绝n，会有新的方案`\n```","source":"_posts/2025-06-01-系统包管理器apt-QA.md","raw":"---\ntitle: 系统包管理器apt-Q&A\ndate: 2025-06-01 10:34:58\nupdated: 2025-08-09 17:40:58\ncategories:\n  - [服务器&嵌入式平台操作, Q&A问题及解决汇总]\ntags:\npermalink: 系统包管理器apt-q&a/\n---\n\n## apt换源时报错\n\n> [!NOTE] 操作环境\n> Ubuntu-22.04.3 server 树莓派4\n\n参考：[RK3399开发板ubuntu20.04报错 binary-arm64/Packages 404 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/589519525)\n[Linux：Ubuntu 国内源介绍_ports.ustc.edu.cn-CSDN博客](https://blog.csdn.net/Brendon_Tan/article/details/107061199)\n\nupdate时报错信息：\n```text\nE: Failed to fetch http://security.ubuntu.com/ubuntu/dists/focal-security/main/binary-arm64/Packages  404  Not Found [IP: 91.189.91.39 80]\nE: Failed to fetch http://cn.archive.ubuntu.com/ubuntu/dists/focal/main/binary-arm64/Packages  404  Not Found [IP: 91.189.91.38 80]\nE: Failed to fetch http://cn.archive.ubuntu.com/ubuntu/dists/focal-updates/main/binary-arm64/Packages  404  Not Found [IP: 91.189.91.38 80]\nE: Failed to fetch http://cn.archive.ubuntu.com/ubuntu/dists/focal-backports/main/binary-arm64/Packages  404  Not Found [IP: 91.189.91.38 80]\nE: Some index files failed to download. They have been ignored, or old ones used instead.\n```\n\n有效解决方案：修改sources.list（`vim /etc/apt/sources.list`， 把下面的粘贴上去）\nsources.list内容：\n```text\ndeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal main restricted universe multiverse `deb-src` http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal main restricted universe multiverse\n\ndeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-security main restricted universe multiverse `deb-src` http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-security main restricted universe multiverse\n\ndeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-updates main restricted universe multiverse `deb-src` http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-updates main restricted universe multiverse\n\ndeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-backports main restricted universe multiverse `deb-src` http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-backports main restricted universe multiverse\n```\n\n注意：\n1、ubuntu/和ubuntu-ports/的区别：\n前者是achieve源，收录的架构为 **AMD64 (x86_64)** 和 **Intel x86，**\n后者是ports源，收录的架构为 **arm64**，**armhf**，**PowerPC**，**ppc64el** 和 **s390x，**\nRK3399开发板是arm架构，必须用后者。\n\n2、如果报出缺少依赖包、404的错误，大概率还是需要换源，试过dev后面加[arch=amd64,i386]，无效\n\n用清华源时source.list该怎么写，去官网上找：\n[ubuntu | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror](https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/)\n[debian | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror](https://mirrors.tuna.tsinghua.edu.cn/help/debian/)\n\n## apt下载报错——# Breaks: x11-common (＜ 1:7.7+23~) but 1:7.7+19ubuntu14 is to be installed\n参考：[Ubuntu debianutils : Breaks: x11-common (＜ 1:7.7+23~) but 1:7.7+19ubuntu14 is to be installed_debianutils : breaks: x11-common (< 1:7.7+23~) but-CSDN博客](https://blog.csdn.net/qq_26545503/article/details/128792376)\n\n用aptitude的方式安装：\n```bash `如果没有\"aptitude\"这个命令,直接安装`\nsudo apt-get install aptitude `通过aptitude安装包`\nsudo aptitude install <包名>\n是否接受该解决方案？[Y/n/q?] `方案为不安装任何包，保持原样，可以选择拒绝n，会有新的方案`\n```","slug":"2025-06-01-系统包管理器apt-QA","published":1,"__permalink":"系统包管理器apt-q&a/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0nr001mzovd8ock37q7","content":"<h2 id=\"apt换源时报错\"><a href=\"#apt换源时报错\" class=\"headerlink\" title=\"apt换源时报错\"></a>apt换源时报错</h2><blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu-22.04.3 server 树莓派4</p>\n</blockquote>\n<p>参考：<a href=\"https://zhuanlan.zhihu.com/p/589519525\">RK3399开发板ubuntu20.04报错 binary-arm64&#x2F;Packages 404 - 知乎 (zhihu.com)</a><br><a href=\"https://blog.csdn.net/Brendon_Tan/article/details/107061199\">Linux：Ubuntu 国内源介绍_ports.ustc.edu.cn-CSDN博客</a></p>\n<p>update时报错信息：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E: Failed to fetch http://security.ubuntu.com/ubuntu/dists/focal-security/main/binary-arm64/Packages  404  Not Found [IP: 91.189.91.39 80]</span><br><span class=\"line\">E: Failed to fetch http://cn.archive.ubuntu.com/ubuntu/dists/focal/main/binary-arm64/Packages  404  Not Found [IP: 91.189.91.38 80]</span><br><span class=\"line\">E: Failed to fetch http://cn.archive.ubuntu.com/ubuntu/dists/focal-updates/main/binary-arm64/Packages  404  Not Found [IP: 91.189.91.38 80]</span><br><span class=\"line\">E: Failed to fetch http://cn.archive.ubuntu.com/ubuntu/dists/focal-backports/main/binary-arm64/Packages  404  Not Found [IP: 91.189.91.38 80]</span><br><span class=\"line\">E: Some index files failed to download. They have been ignored, or old ones used instead.</span><br></pre></td></tr></table></figure>\n\n<p>有效解决方案：修改sources.list（<code>vim /etc/apt/sources.list</code>， 把下面的粘贴上去）<br>sources.list内容：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal main restricted universe multiverse `deb-src` http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-security main restricted universe multiverse `deb-src` http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-security main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-updates main restricted universe multiverse `deb-src` http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-updates main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-backports main restricted universe multiverse `deb-src` http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>\n\n<p>注意：<br>1、ubuntu&#x2F;和ubuntu-ports&#x2F;的区别：<br>前者是achieve源，收录的架构为 <strong>AMD64 (x86_64)</strong> 和 <strong>Intel x86，</strong><br>后者是ports源，收录的架构为 <strong>arm64</strong>，<strong>armhf</strong>，<strong>PowerPC</strong>，<strong>ppc64el</strong> 和 <strong>s390x，</strong><br>RK3399开发板是arm架构，必须用后者。</p>\n<p>2、如果报出缺少依赖包、404的错误，大概率还是需要换源，试过dev后面加[arch&#x3D;amd64,i386]，无效</p>\n<p>用清华源时source.list该怎么写，去官网上找：<br><a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/\">ubuntu | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a><br><a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/debian/\">debian | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p>\n<h2 id=\"apt下载报错——-Breaks-x11-common-＜-1-7-7-23-but-1-7-7-19ubuntu14-is-to-be-installed\"><a href=\"#apt下载报错——-Breaks-x11-common-＜-1-7-7-23-but-1-7-7-19ubuntu14-is-to-be-installed\" class=\"headerlink\" title=\"apt下载报错——# Breaks: x11-common (＜ 1:7.7+23~) but 1:7.7+19ubuntu14 is to be installed\"></a>apt下载报错——# Breaks: x11-common (＜ 1:7.7+23~) but 1:7.7+19ubuntu14 is to be installed</h2><p>参考：<a href=\"https://blog.csdn.net/qq_26545503/article/details/128792376\">Ubuntu debianutils : Breaks: x11-common (＜ 1:7.7+23<del>) but 1:7.7+19ubuntu14 is to be installed_debianutils : breaks: x11-common (&lt; 1:7.7+23</del>) but-CSDN博客</a></p>\n<p>用aptitude的方式安装：<br><code>bash `如果没有&quot;aptitude&quot;这个命令,直接安装` sudo apt-get install aptitude `通过aptitude安装包` sudo aptitude install &lt;包名&gt; 是否接受该解决方案？[Y/n/q?] `方案为不安装任何包，保持原样，可以选择拒绝n，会有新的方案` </code></p>\n","excerpt":"","more":"<h2 id=\"apt换源时报错\"><a href=\"#apt换源时报错\" class=\"headerlink\" title=\"apt换源时报错\"></a>apt换源时报错</h2><blockquote>\n<p>[!NOTE] 操作环境<br>Ubuntu-22.04.3 server 树莓派4</p>\n</blockquote>\n<p>参考：<a href=\"https://zhuanlan.zhihu.com/p/589519525\">RK3399开发板ubuntu20.04报错 binary-arm64&#x2F;Packages 404 - 知乎 (zhihu.com)</a><br><a href=\"https://blog.csdn.net/Brendon_Tan/article/details/107061199\">Linux：Ubuntu 国内源介绍_ports.ustc.edu.cn-CSDN博客</a></p>\n<p>update时报错信息：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E: Failed to fetch http://security.ubuntu.com/ubuntu/dists/focal-security/main/binary-arm64/Packages  404  Not Found [IP: 91.189.91.39 80]</span><br><span class=\"line\">E: Failed to fetch http://cn.archive.ubuntu.com/ubuntu/dists/focal/main/binary-arm64/Packages  404  Not Found [IP: 91.189.91.38 80]</span><br><span class=\"line\">E: Failed to fetch http://cn.archive.ubuntu.com/ubuntu/dists/focal-updates/main/binary-arm64/Packages  404  Not Found [IP: 91.189.91.38 80]</span><br><span class=\"line\">E: Failed to fetch http://cn.archive.ubuntu.com/ubuntu/dists/focal-backports/main/binary-arm64/Packages  404  Not Found [IP: 91.189.91.38 80]</span><br><span class=\"line\">E: Some index files failed to download. They have been ignored, or old ones used instead.</span><br></pre></td></tr></table></figure>\n\n<p>有效解决方案：修改sources.list（<code>vim /etc/apt/sources.list</code>， 把下面的粘贴上去）<br>sources.list内容：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal main restricted universe multiverse `deb-src` http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-security main restricted universe multiverse `deb-src` http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-security main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-updates main restricted universe multiverse `deb-src` http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-updates main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-backports main restricted universe multiverse `deb-src` http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>\n\n<p>注意：<br>1、ubuntu&#x2F;和ubuntu-ports&#x2F;的区别：<br>前者是achieve源，收录的架构为 <strong>AMD64 (x86_64)</strong> 和 <strong>Intel x86，</strong><br>后者是ports源，收录的架构为 <strong>arm64</strong>，<strong>armhf</strong>，<strong>PowerPC</strong>，<strong>ppc64el</strong> 和 <strong>s390x，</strong><br>RK3399开发板是arm架构，必须用后者。</p>\n<p>2、如果报出缺少依赖包、404的错误，大概率还是需要换源，试过dev后面加[arch&#x3D;amd64,i386]，无效</p>\n<p>用清华源时source.list该怎么写，去官网上找：<br><a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/\">ubuntu | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a><br><a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/debian/\">debian | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p>\n<h2 id=\"apt下载报错——-Breaks-x11-common-＜-1-7-7-23-but-1-7-7-19ubuntu14-is-to-be-installed\"><a href=\"#apt下载报错——-Breaks-x11-common-＜-1-7-7-23-but-1-7-7-19ubuntu14-is-to-be-installed\" class=\"headerlink\" title=\"apt下载报错——# Breaks: x11-common (＜ 1:7.7+23~) but 1:7.7+19ubuntu14 is to be installed\"></a>apt下载报错——# Breaks: x11-common (＜ 1:7.7+23~) but 1:7.7+19ubuntu14 is to be installed</h2><p>参考：<a href=\"https://blog.csdn.net/qq_26545503/article/details/128792376\">Ubuntu debianutils : Breaks: x11-common (＜ 1:7.7+23<del>) but 1:7.7+19ubuntu14 is to be installed_debianutils : breaks: x11-common (&lt; 1:7.7+23</del>) but-CSDN博客</a></p>\n<p>用aptitude的方式安装：<br><code>bash `如果没有&quot;aptitude&quot;这个命令,直接安装` sudo apt-get install aptitude `通过aptitude安装包` sudo aptitude install &lt;包名&gt; 是否接受该解决方案？[Y/n/q?] `方案为不安装任何包，保持原样，可以选择拒绝n，会有新的方案` </code></p>\n"},{"title":"系统相关","date":"2025-06-01T02:34:58.000Z","updated":"2025-01-10T14:50:54.000Z","_content":"\n## 树莓派拷贝系统到SD卡\n参考：[超简单的树莓派SD卡扩容方案，将树莓派16GB的SD卡克隆到64GB的SD卡-CSDN博客](https://blog.csdn.net/zhuoyuedelan/article/details/120684117?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-120684117-blog-110260864.235^v43^pc_blog_bottom_relevance_base3&spm=1001.2101.3001.4242.2&utm_relevant_index=2)\n[树莓派 拷贝系统到新SD卡_树莓派的sd卡可不可以互换-CSDN博客](https://blog.csdn.net/weixin_43444901/article/details/110260864)\n[制作SD卡备份镜像以及还原_sd卡自动还原-CSDN博客](https://blog.csdn.net/sinat_33909696/article/details/116430895)\n[制作树苺派/香橙派(orangepi) SD卡备份镜像_树苺派系统备份与还原_orange pi 香橙派emmc系统备份方法-CSDN博客](https://blog.csdn.net/Running_free/article/details/103028160)\n\n1. 格式化SD卡，选择FAT格式，备份用的SD卡容量不小于系统SD卡。\n2. SD卡插到读卡器上，再连接到树莓派USB口。\n3. list block devices，查看系统磁盘使用情况：\n```bash\nlsblk\n```\n\n该指令常用参数如下：\n![lsblk参数.png](/images/lsblk参数.png)\n如果输入：\n```bash\ndf -h\n```\n\n没有发现这个SD卡，说明没有挂载，可以进行下一步操作。\n如果发现的话，需要先卸载：\n```bash\nsudo umount /dev/sda1\n```\n\n格式化：\n```bash\nsudo mkfs.vfat /dev/sda1 -I\n```\n\n4. **拷贝**\n输入指令：\n```bash\nsudo dd if=/dev/mmcblk0  of=/dev/sda  bs=4M status=progress\n```\n`bs=4M` 指定了块大小为4MB，`status=progress` 会显示克隆进度\n\n5. **安全移除外部存储设备**：在测试启动之前，使用以下命令安全移除外部存储设备。\n```bash\nsudo eject /dev/sda\n```\n\n## 香橙派拷贝系统到SD卡\n\n> [!NOTE] 操作环境\n> 香橙派4-lts Orange Pi 3.0.6 Buster with Linux 4.4.179-rk3399\n\n参考：[【香橙派】如何备份与烧写香橙派的系统_香橙派5 如何烧录-CSDN博客](https://blog.csdn.net/weixin_43326110/article/details/136852823)\n[香橙派迁移系统到新的 SD 卡 | canhetingsky | Blog](https://blog.canheting.cn/posts/7a51f279/)\n[制作树苺派/香橙派(orangepi) SD卡备份镜像_树苺派系统备份与还原_orange pi 香橙派emmc系统备份方法-CSDN博客](https://blog.csdn.net/Running_free/article/details/103028160)\n\n1. SD卡插入读卡器，再连接到香橙派USB接口\n2. 给SD卡分区扩容\n输入：\n```bash\nlsblk\n```\n显示：\n```text\nroot@orangepi4-lts:~# lsblk \nNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT \nsda 8:0 1 29.7G 0 disk \n└─sda1 8:1 1 1.6G 0 part \nmmcblk0 179:0 0 29.7G 0 disk \n└─mmcblk0p1 179:1 0 29.4G 0 part / \nzram0 253:0 0 1.9G 0 disk [SWAP] \nzram1 253:1 0 50M 0 disk /var/log\n```\nsda1只有1.6G，这时需要给sda扩容（如果空间够用就不用了，直接跳到步骤4），输入：\n```bash\nsudo fdisk /dev/sda\n```\n\n在fdisk中根据指令操作，先输入==d==删除旧分区，再输入==n==创建新分区，将所有可用空间都放到分区sda1里\n3. 格式化分区\n输入：\n```bash\nsudo mkfs.vfat /dev/sda1 -I\n```\n4. 挂载分区\n在用户目录下新建一个sdcard目录：\n```bash\nmkdir sdcard\n```\n\n挂载到sda1下：\n```bash\nsudo mount /dev/sda1 ./sdcard/\n```\n\n5. 备份系统\n==cd==进入sdcard目录。\n开始备份系统：\n```bash\nsudo dd if=/dev/mmcblk0 conv=sync,noerror bs=4M status=progress | gzip -c > ./p3img.img.gz\n```\n\n结束\n```text\n31906070528 bytes (32 GB, 30 GiB) copied, 2780 s, 11.5 MB/s\n7609+1 records in\n7610+0 records out\n31918653440 bytes (32 GB, 30 GiB) copied, 2780.87 s, 11.5 MB/s\n```\n\n6. 取消挂载拔出SD卡\n```bash\nsudo mount /dev/sda1 ./sdcard/\nsudo eject /dev/sda\n```\n\n## 香橙派还原拷贝的系统\n\n> [!NOTE] 操作环境\n> 香橙派4-lts Orange Pi 3.0.6 Buster with Linux 4.4.179-rk3399\n\n参考：OrangePi_4_LTS_用户手册\n1. 这里准备的SD卡和制作系统镜像的SD卡大小一样。首先格式化SD卡。\n\n2. 使用Win32Disklmager烧录备份的系统镜像.img文件，最后可能提示镜像大小比SD卡容量大，但系统镜像后面大部分都是空的，无视就好。\n\n3. 将SD卡插入香橙派开机。由于镜像是从其他机器拷贝的，所以现有网络连接的网卡MAC地址对应不上，在这个情况下，系统会生成一个新的网络连接。可以通过以下指令查看。\n```bash\nifconfig eth0\n```\n\n4. 接下来重新配置网络连接就可以，比如静态ip，DNS等，然后重启网络连接服务。可以通过指令配置。\n```bash\nnmtui\n```","source":"_posts/2025-06-01-系统相关.md","raw":"---\ntitle: 系统相关\ndate: 2025-06-01 10:34:58\nupdated: 2025-01-10 22:50:54\ncategories:\n  - [服务器&嵌入式平台操作, 基础配置]\ntags:\npermalink: 系统相关/\n---\n\n## 树莓派拷贝系统到SD卡\n参考：[超简单的树莓派SD卡扩容方案，将树莓派16GB的SD卡克隆到64GB的SD卡-CSDN博客](https://blog.csdn.net/zhuoyuedelan/article/details/120684117?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-120684117-blog-110260864.235^v43^pc_blog_bottom_relevance_base3&spm=1001.2101.3001.4242.2&utm_relevant_index=2)\n[树莓派 拷贝系统到新SD卡_树莓派的sd卡可不可以互换-CSDN博客](https://blog.csdn.net/weixin_43444901/article/details/110260864)\n[制作SD卡备份镜像以及还原_sd卡自动还原-CSDN博客](https://blog.csdn.net/sinat_33909696/article/details/116430895)\n[制作树苺派/香橙派(orangepi) SD卡备份镜像_树苺派系统备份与还原_orange pi 香橙派emmc系统备份方法-CSDN博客](https://blog.csdn.net/Running_free/article/details/103028160)\n\n1. 格式化SD卡，选择FAT格式，备份用的SD卡容量不小于系统SD卡。\n2. SD卡插到读卡器上，再连接到树莓派USB口。\n3. list block devices，查看系统磁盘使用情况：\n```bash\nlsblk\n```\n\n该指令常用参数如下：\n![lsblk参数.png](/images/lsblk参数.png)\n如果输入：\n```bash\ndf -h\n```\n\n没有发现这个SD卡，说明没有挂载，可以进行下一步操作。\n如果发现的话，需要先卸载：\n```bash\nsudo umount /dev/sda1\n```\n\n格式化：\n```bash\nsudo mkfs.vfat /dev/sda1 -I\n```\n\n4. **拷贝**\n输入指令：\n```bash\nsudo dd if=/dev/mmcblk0  of=/dev/sda  bs=4M status=progress\n```\n`bs=4M` 指定了块大小为4MB，`status=progress` 会显示克隆进度\n\n5. **安全移除外部存储设备**：在测试启动之前，使用以下命令安全移除外部存储设备。\n```bash\nsudo eject /dev/sda\n```\n\n## 香橙派拷贝系统到SD卡\n\n> [!NOTE] 操作环境\n> 香橙派4-lts Orange Pi 3.0.6 Buster with Linux 4.4.179-rk3399\n\n参考：[【香橙派】如何备份与烧写香橙派的系统_香橙派5 如何烧录-CSDN博客](https://blog.csdn.net/weixin_43326110/article/details/136852823)\n[香橙派迁移系统到新的 SD 卡 | canhetingsky | Blog](https://blog.canheting.cn/posts/7a51f279/)\n[制作树苺派/香橙派(orangepi) SD卡备份镜像_树苺派系统备份与还原_orange pi 香橙派emmc系统备份方法-CSDN博客](https://blog.csdn.net/Running_free/article/details/103028160)\n\n1. SD卡插入读卡器，再连接到香橙派USB接口\n2. 给SD卡分区扩容\n输入：\n```bash\nlsblk\n```\n显示：\n```text\nroot@orangepi4-lts:~# lsblk \nNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT \nsda 8:0 1 29.7G 0 disk \n└─sda1 8:1 1 1.6G 0 part \nmmcblk0 179:0 0 29.7G 0 disk \n└─mmcblk0p1 179:1 0 29.4G 0 part / \nzram0 253:0 0 1.9G 0 disk [SWAP] \nzram1 253:1 0 50M 0 disk /var/log\n```\nsda1只有1.6G，这时需要给sda扩容（如果空间够用就不用了，直接跳到步骤4），输入：\n```bash\nsudo fdisk /dev/sda\n```\n\n在fdisk中根据指令操作，先输入==d==删除旧分区，再输入==n==创建新分区，将所有可用空间都放到分区sda1里\n3. 格式化分区\n输入：\n```bash\nsudo mkfs.vfat /dev/sda1 -I\n```\n4. 挂载分区\n在用户目录下新建一个sdcard目录：\n```bash\nmkdir sdcard\n```\n\n挂载到sda1下：\n```bash\nsudo mount /dev/sda1 ./sdcard/\n```\n\n5. 备份系统\n==cd==进入sdcard目录。\n开始备份系统：\n```bash\nsudo dd if=/dev/mmcblk0 conv=sync,noerror bs=4M status=progress | gzip -c > ./p3img.img.gz\n```\n\n结束\n```text\n31906070528 bytes (32 GB, 30 GiB) copied, 2780 s, 11.5 MB/s\n7609+1 records in\n7610+0 records out\n31918653440 bytes (32 GB, 30 GiB) copied, 2780.87 s, 11.5 MB/s\n```\n\n6. 取消挂载拔出SD卡\n```bash\nsudo mount /dev/sda1 ./sdcard/\nsudo eject /dev/sda\n```\n\n## 香橙派还原拷贝的系统\n\n> [!NOTE] 操作环境\n> 香橙派4-lts Orange Pi 3.0.6 Buster with Linux 4.4.179-rk3399\n\n参考：OrangePi_4_LTS_用户手册\n1. 这里准备的SD卡和制作系统镜像的SD卡大小一样。首先格式化SD卡。\n\n2. 使用Win32Disklmager烧录备份的系统镜像.img文件，最后可能提示镜像大小比SD卡容量大，但系统镜像后面大部分都是空的，无视就好。\n\n3. 将SD卡插入香橙派开机。由于镜像是从其他机器拷贝的，所以现有网络连接的网卡MAC地址对应不上，在这个情况下，系统会生成一个新的网络连接。可以通过以下指令查看。\n```bash\nifconfig eth0\n```\n\n4. 接下来重新配置网络连接就可以，比如静态ip，DNS等，然后重启网络连接服务。可以通过指令配置。\n```bash\nnmtui\n```","slug":"2025-06-01-系统相关","published":1,"__permalink":"系统相关/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0ns001ozovdddxpdl8p","content":"<h2 id=\"树莓派拷贝系统到SD卡\"><a href=\"#树莓派拷贝系统到SD卡\" class=\"headerlink\" title=\"树莓派拷贝系统到SD卡\"></a>树莓派拷贝系统到SD卡</h2><p>参考：<a href=\"https://blog.csdn.net/zhuoyuedelan/article/details/120684117?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-120684117-blog-110260864.235%5Ev43%5Epc_blog_bottom_relevance_base3&spm=1001.2101.3001.4242.2&utm_relevant_index=2\">超简单的树莓派SD卡扩容方案，将树莓派16GB的SD卡克隆到64GB的SD卡-CSDN博客</a><br><a href=\"https://blog.csdn.net/weixin_43444901/article/details/110260864\">树莓派 拷贝系统到新SD卡_树莓派的sd卡可不可以互换-CSDN博客</a><br><a href=\"https://blog.csdn.net/sinat_33909696/article/details/116430895\">制作SD卡备份镜像以及还原_sd卡自动还原-CSDN博客</a><br><a href=\"https://blog.csdn.net/Running_free/article/details/103028160\">制作树苺派&#x2F;香橙派(orangepi) SD卡备份镜像_树苺派系统备份与还原_orange pi 香橙派emmc系统备份方法-CSDN博客</a></p>\n<ol>\n<li>格式化SD卡，选择FAT格式，备份用的SD卡容量不小于系统SD卡。</li>\n<li>SD卡插到读卡器上，再连接到树莓派USB口。</li>\n<li>list block devices，查看系统磁盘使用情况：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsblk</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>该指令常用参数如下：<br><img src=\"/418blog/images/lsblk%E5%8F%82%E6%95%B0.png\" alt=\"lsblk参数.png\"><br>如果输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">df</span> -h</span><br></pre></td></tr></table></figure>\n\n<p>没有发现这个SD卡，说明没有挂载，可以进行下一步操作。<br>如果发现的话，需要先卸载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> umount /dev/sda1</span><br></pre></td></tr></table></figure>\n\n<p>格式化：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> mkfs.vfat /dev/sda1 -I</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><p><strong>拷贝</strong><br>输入指令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">dd</span> <span class=\"keyword\">if</span>=/dev/mmcblk0  of=/dev/sda  bs=4M status=progress</span><br></pre></td></tr></table></figure>\n<p><code>bs=4M</code> 指定了块大小为4MB，<code>status=progress</code> 会显示克隆进度</p>\n</li>\n<li><p><strong>安全移除外部存储设备</strong>：在测试启动之前，使用以下命令安全移除外部存储设备。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> eject /dev/sda</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"香橙派拷贝系统到SD卡\"><a href=\"#香橙派拷贝系统到SD卡\" class=\"headerlink\" title=\"香橙派拷贝系统到SD卡\"></a>香橙派拷贝系统到SD卡</h2><blockquote>\n<p>[!NOTE] 操作环境<br>香橙派4-lts Orange Pi 3.0.6 Buster with Linux 4.4.179-rk3399</p>\n</blockquote>\n<p>参考：<a href=\"https://blog.csdn.net/weixin_43326110/article/details/136852823\">【香橙派】如何备份与烧写香橙派的系统_香橙派5 如何烧录-CSDN博客</a><br><a href=\"https://blog.canheting.cn/posts/7a51f279/\">香橙派迁移系统到新的 SD 卡 | canhetingsky | Blog</a><br><a href=\"https://blog.csdn.net/Running_free/article/details/103028160\">制作树苺派&#x2F;香橙派(orangepi) SD卡备份镜像_树苺派系统备份与还原_orange pi 香橙派emmc系统备份方法-CSDN博客</a></p>\n<ol>\n<li>SD卡插入读卡器，再连接到香橙派USB接口</li>\n<li>给SD卡分区扩容<br>输入：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsblk</span><br></pre></td></tr></table></figure>\n显示：<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@orangepi4-lts:~# lsblk </span><br><span class=\"line\">NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT </span><br><span class=\"line\">sda 8:0 1 29.7G 0 disk </span><br><span class=\"line\">└─sda1 8:1 1 1.6G 0 part </span><br><span class=\"line\">mmcblk0 179:0 0 29.7G 0 disk </span><br><span class=\"line\">└─mmcblk0p1 179:1 0 29.4G 0 part / </span><br><span class=\"line\">zram0 253:0 0 1.9G 0 disk [SWAP] </span><br><span class=\"line\">zram1 253:1 0 50M 0 disk /var/log</span><br></pre></td></tr></table></figure>\nsda1只有1.6G，这时需要给sda扩容（如果空间够用就不用了，直接跳到步骤4），输入：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> fdisk /dev/sda</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>在fdisk中根据指令操作，先输入&#x3D;&#x3D;d&#x3D;&#x3D;删除旧分区，再输入&#x3D;&#x3D;n&#x3D;&#x3D;创建新分区，将所有可用空间都放到分区sda1里<br>3. 格式化分区<br>输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> mkfs.vfat /dev/sda1 -I</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>挂载分区<br>在用户目录下新建一个sdcard目录：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> sdcard</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>挂载到sda1下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> mount /dev/sda1 ./sdcard/</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>备份系统<br>&#x3D;&#x3D;cd&#x3D;&#x3D;进入sdcard目录。<br>开始备份系统：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">dd</span> <span class=\"keyword\">if</span>=/dev/mmcblk0 conv=<span class=\"built_in\">sync</span>,noerror bs=4M status=progress | gzip -c &gt; ./p3img.img.gz</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>结束</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">31906070528 bytes (32 GB, 30 GiB) copied, 2780 s, 11.5 MB/s</span><br><span class=\"line\">7609+1 records in</span><br><span class=\"line\">7610+0 records out</span><br><span class=\"line\">31918653440 bytes (32 GB, 30 GiB) copied, 2780.87 s, 11.5 MB/s</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>取消挂载拔出SD卡<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> mount /dev/sda1 ./sdcard/</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> eject /dev/sda</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"香橙派还原拷贝的系统\"><a href=\"#香橙派还原拷贝的系统\" class=\"headerlink\" title=\"香橙派还原拷贝的系统\"></a>香橙派还原拷贝的系统</h2><blockquote>\n<p>[!NOTE] 操作环境<br>香橙派4-lts Orange Pi 3.0.6 Buster with Linux 4.4.179-rk3399</p>\n</blockquote>\n<p>参考：OrangePi_4_LTS_用户手册</p>\n<ol>\n<li><p>这里准备的SD卡和制作系统镜像的SD卡大小一样。首先格式化SD卡。</p>\n</li>\n<li><p>使用Win32Disklmager烧录备份的系统镜像.img文件，最后可能提示镜像大小比SD卡容量大，但系统镜像后面大部分都是空的，无视就好。</p>\n</li>\n<li><p>将SD卡插入香橙派开机。由于镜像是从其他机器拷贝的，所以现有网络连接的网卡MAC地址对应不上，在这个情况下，系统会生成一个新的网络连接。可以通过以下指令查看。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig eth0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接下来重新配置网络连接就可以，比如静态ip，DNS等，然后重启网络连接服务。可以通过指令配置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmtui</span><br></pre></td></tr></table></figure></li>\n</ol>\n","excerpt":"","more":"<h2 id=\"树莓派拷贝系统到SD卡\"><a href=\"#树莓派拷贝系统到SD卡\" class=\"headerlink\" title=\"树莓派拷贝系统到SD卡\"></a>树莓派拷贝系统到SD卡</h2><p>参考：<a href=\"https://blog.csdn.net/zhuoyuedelan/article/details/120684117?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-120684117-blog-110260864.235%5Ev43%5Epc_blog_bottom_relevance_base3&spm=1001.2101.3001.4242.2&utm_relevant_index=2\">超简单的树莓派SD卡扩容方案，将树莓派16GB的SD卡克隆到64GB的SD卡-CSDN博客</a><br><a href=\"https://blog.csdn.net/weixin_43444901/article/details/110260864\">树莓派 拷贝系统到新SD卡_树莓派的sd卡可不可以互换-CSDN博客</a><br><a href=\"https://blog.csdn.net/sinat_33909696/article/details/116430895\">制作SD卡备份镜像以及还原_sd卡自动还原-CSDN博客</a><br><a href=\"https://blog.csdn.net/Running_free/article/details/103028160\">制作树苺派&#x2F;香橙派(orangepi) SD卡备份镜像_树苺派系统备份与还原_orange pi 香橙派emmc系统备份方法-CSDN博客</a></p>\n<ol>\n<li>格式化SD卡，选择FAT格式，备份用的SD卡容量不小于系统SD卡。</li>\n<li>SD卡插到读卡器上，再连接到树莓派USB口。</li>\n<li>list block devices，查看系统磁盘使用情况：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsblk</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>该指令常用参数如下：<br><img src=\"/418blog/images/lsblk%E5%8F%82%E6%95%B0.png\" alt=\"lsblk参数.png\"><br>如果输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">df</span> -h</span><br></pre></td></tr></table></figure>\n\n<p>没有发现这个SD卡，说明没有挂载，可以进行下一步操作。<br>如果发现的话，需要先卸载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> umount /dev/sda1</span><br></pre></td></tr></table></figure>\n\n<p>格式化：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> mkfs.vfat /dev/sda1 -I</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><p><strong>拷贝</strong><br>输入指令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">dd</span> <span class=\"keyword\">if</span>=/dev/mmcblk0  of=/dev/sda  bs=4M status=progress</span><br></pre></td></tr></table></figure>\n<p><code>bs=4M</code> 指定了块大小为4MB，<code>status=progress</code> 会显示克隆进度</p>\n</li>\n<li><p><strong>安全移除外部存储设备</strong>：在测试启动之前，使用以下命令安全移除外部存储设备。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> eject /dev/sda</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"香橙派拷贝系统到SD卡\"><a href=\"#香橙派拷贝系统到SD卡\" class=\"headerlink\" title=\"香橙派拷贝系统到SD卡\"></a>香橙派拷贝系统到SD卡</h2><blockquote>\n<p>[!NOTE] 操作环境<br>香橙派4-lts Orange Pi 3.0.6 Buster with Linux 4.4.179-rk3399</p>\n</blockquote>\n<p>参考：<a href=\"https://blog.csdn.net/weixin_43326110/article/details/136852823\">【香橙派】如何备份与烧写香橙派的系统_香橙派5 如何烧录-CSDN博客</a><br><a href=\"https://blog.canheting.cn/posts/7a51f279/\">香橙派迁移系统到新的 SD 卡 | canhetingsky | Blog</a><br><a href=\"https://blog.csdn.net/Running_free/article/details/103028160\">制作树苺派&#x2F;香橙派(orangepi) SD卡备份镜像_树苺派系统备份与还原_orange pi 香橙派emmc系统备份方法-CSDN博客</a></p>\n<ol>\n<li>SD卡插入读卡器，再连接到香橙派USB接口</li>\n<li>给SD卡分区扩容<br>输入：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsblk</span><br></pre></td></tr></table></figure>\n显示：<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@orangepi4-lts:~# lsblk </span><br><span class=\"line\">NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT </span><br><span class=\"line\">sda 8:0 1 29.7G 0 disk </span><br><span class=\"line\">└─sda1 8:1 1 1.6G 0 part </span><br><span class=\"line\">mmcblk0 179:0 0 29.7G 0 disk </span><br><span class=\"line\">└─mmcblk0p1 179:1 0 29.4G 0 part / </span><br><span class=\"line\">zram0 253:0 0 1.9G 0 disk [SWAP] </span><br><span class=\"line\">zram1 253:1 0 50M 0 disk /var/log</span><br></pre></td></tr></table></figure>\nsda1只有1.6G，这时需要给sda扩容（如果空间够用就不用了，直接跳到步骤4），输入：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> fdisk /dev/sda</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>在fdisk中根据指令操作，先输入&#x3D;&#x3D;d&#x3D;&#x3D;删除旧分区，再输入&#x3D;&#x3D;n&#x3D;&#x3D;创建新分区，将所有可用空间都放到分区sda1里<br>3. 格式化分区<br>输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> mkfs.vfat /dev/sda1 -I</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>挂载分区<br>在用户目录下新建一个sdcard目录：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> sdcard</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>挂载到sda1下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> mount /dev/sda1 ./sdcard/</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>备份系统<br>&#x3D;&#x3D;cd&#x3D;&#x3D;进入sdcard目录。<br>开始备份系统：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">dd</span> <span class=\"keyword\">if</span>=/dev/mmcblk0 conv=<span class=\"built_in\">sync</span>,noerror bs=4M status=progress | gzip -c &gt; ./p3img.img.gz</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>结束</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">31906070528 bytes (32 GB, 30 GiB) copied, 2780 s, 11.5 MB/s</span><br><span class=\"line\">7609+1 records in</span><br><span class=\"line\">7610+0 records out</span><br><span class=\"line\">31918653440 bytes (32 GB, 30 GiB) copied, 2780.87 s, 11.5 MB/s</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>取消挂载拔出SD卡<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> mount /dev/sda1 ./sdcard/</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> eject /dev/sda</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"香橙派还原拷贝的系统\"><a href=\"#香橙派还原拷贝的系统\" class=\"headerlink\" title=\"香橙派还原拷贝的系统\"></a>香橙派还原拷贝的系统</h2><blockquote>\n<p>[!NOTE] 操作环境<br>香橙派4-lts Orange Pi 3.0.6 Buster with Linux 4.4.179-rk3399</p>\n</blockquote>\n<p>参考：OrangePi_4_LTS_用户手册</p>\n<ol>\n<li><p>这里准备的SD卡和制作系统镜像的SD卡大小一样。首先格式化SD卡。</p>\n</li>\n<li><p>使用Win32Disklmager烧录备份的系统镜像.img文件，最后可能提示镜像大小比SD卡容量大，但系统镜像后面大部分都是空的，无视就好。</p>\n</li>\n<li><p>将SD卡插入香橙派开机。由于镜像是从其他机器拷贝的，所以现有网络连接的网卡MAC地址对应不上，在这个情况下，系统会生成一个新的网络连接。可以通过以下指令查看。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig eth0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接下来重新配置网络连接就可以，比如静态ip，DNS等，然后重启网络连接服务。可以通过指令配置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmtui</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"记录","date":"2025-06-01T02:34:58.000Z","updated":"2025-08-12T04:01:34.000Z","_content":"\n在zotero中批量替换语言：\n```text\nzoteroPane = Zotero.getActiveZoteroPane();\nitems = zoteroPane.getSelectedItems();\nvar rn=0; //计数替换条目个数\nvar lan=\"en\"; //替换的语言\nfor (item of items) {\nvar la = item.getField(\"language\");\nif (la==\"\")  //如果为空则替换\n {item.setField(\"language\", lan);\nrn+=1;\n await item.saveTx();\n}\nif (la==\"English\")  //如果为English则替换\n {item.setField(\"language\", lan);\nrn+=1;\n await item.saveTx();\n}\nif (la==\"en-US\")  //如果为en-US则替换\n {item.setField(\"language\", lan);\nrn+=1;\n await item.saveTx();\n}\nif (la==\"eng\")  //如果为eng则替换\n {item.setField(\"language\", lan);\nrn+=1;\n await item.saveTx();\n}\n}\nreturn rn+\"个条目语言被替换为\"+lan+\"。\"\n```","source":"_posts/2025-06-01-记录.md","raw":"---\ntitle: 记录\ndate: 2025-06-01 10:34:58\nupdated: 2025-08-12 12:01:34\ncategories:\n  - [Temp]\ntags:\npermalink: 记录/\n---\n\n在zotero中批量替换语言：\n```text\nzoteroPane = Zotero.getActiveZoteroPane();\nitems = zoteroPane.getSelectedItems();\nvar rn=0; //计数替换条目个数\nvar lan=\"en\"; //替换的语言\nfor (item of items) {\nvar la = item.getField(\"language\");\nif (la==\"\")  //如果为空则替换\n {item.setField(\"language\", lan);\nrn+=1;\n await item.saveTx();\n}\nif (la==\"English\")  //如果为English则替换\n {item.setField(\"language\", lan);\nrn+=1;\n await item.saveTx();\n}\nif (la==\"en-US\")  //如果为en-US则替换\n {item.setField(\"language\", lan);\nrn+=1;\n await item.saveTx();\n}\nif (la==\"eng\")  //如果为eng则替换\n {item.setField(\"language\", lan);\nrn+=1;\n await item.saveTx();\n}\n}\nreturn rn+\"个条目语言被替换为\"+lan+\"。\"\n```","slug":"2025-06-01-记录","published":1,"__permalink":"记录/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0nt001rzovdfcxpdtz1","content":"<p>在zotero中批量替换语言：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zoteroPane = Zotero.getActiveZoteroPane();</span><br><span class=\"line\">items = zoteroPane.getSelectedItems();</span><br><span class=\"line\">var rn=0; //计数替换条目个数</span><br><span class=\"line\">var lan=&quot;en&quot;; //替换的语言</span><br><span class=\"line\">for (item of items) &#123;</span><br><span class=\"line\">var la = item.getField(&quot;language&quot;);</span><br><span class=\"line\">if (la==&quot;&quot;)  //如果为空则替换</span><br><span class=\"line\"> &#123;item.setField(&quot;language&quot;, lan);</span><br><span class=\"line\">rn+=1;</span><br><span class=\"line\"> await item.saveTx();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (la==&quot;English&quot;)  //如果为English则替换</span><br><span class=\"line\"> &#123;item.setField(&quot;language&quot;, lan);</span><br><span class=\"line\">rn+=1;</span><br><span class=\"line\"> await item.saveTx();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (la==&quot;en-US&quot;)  //如果为en-US则替换</span><br><span class=\"line\"> &#123;item.setField(&quot;language&quot;, lan);</span><br><span class=\"line\">rn+=1;</span><br><span class=\"line\"> await item.saveTx();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (la==&quot;eng&quot;)  //如果为eng则替换</span><br><span class=\"line\"> &#123;item.setField(&quot;language&quot;, lan);</span><br><span class=\"line\">rn+=1;</span><br><span class=\"line\"> await item.saveTx();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return rn+&quot;个条目语言被替换为&quot;+lan+&quot;。&quot;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>在zotero中批量替换语言：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zoteroPane = Zotero.getActiveZoteroPane();</span><br><span class=\"line\">items = zoteroPane.getSelectedItems();</span><br><span class=\"line\">var rn=0; //计数替换条目个数</span><br><span class=\"line\">var lan=&quot;en&quot;; //替换的语言</span><br><span class=\"line\">for (item of items) &#123;</span><br><span class=\"line\">var la = item.getField(&quot;language&quot;);</span><br><span class=\"line\">if (la==&quot;&quot;)  //如果为空则替换</span><br><span class=\"line\"> &#123;item.setField(&quot;language&quot;, lan);</span><br><span class=\"line\">rn+=1;</span><br><span class=\"line\"> await item.saveTx();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (la==&quot;English&quot;)  //如果为English则替换</span><br><span class=\"line\"> &#123;item.setField(&quot;language&quot;, lan);</span><br><span class=\"line\">rn+=1;</span><br><span class=\"line\"> await item.saveTx();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (la==&quot;en-US&quot;)  //如果为en-US则替换</span><br><span class=\"line\"> &#123;item.setField(&quot;language&quot;, lan);</span><br><span class=\"line\">rn+=1;</span><br><span class=\"line\"> await item.saveTx();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (la==&quot;eng&quot;)  //如果为eng则替换</span><br><span class=\"line\"> &#123;item.setField(&quot;language&quot;, lan);</span><br><span class=\"line\">rn+=1;</span><br><span class=\"line\"> await item.saveTx();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return rn+&quot;个条目语言被替换为&quot;+lan+&quot;。&quot;</span><br></pre></td></tr></table></figure>"},{"title":"集群管理——Ansible","date":"2025-06-01T02:34:58.000Z","updated":"2025-08-12T04:30:12.000Z","_content":"\n> [!NOTE] 操作环境\n> 同一局域网下的多台香橙派4-lts Orange Pi 3.0.6 Bullseye with Linux 5.10.160-rk3399\n> ip地址为192.168.0.110-192.168.0.113\n\n## 安装和使用\n建议重新查阅官方文档安装，可能会有更新[Ansible 文档 — Ansible 社区文档](https://docs.ansible.org.cn/ansible/latest/index.html)\n主要步骤就是\n1. 安装Ansible\n2. 配置免密登录\n3. 指定inventory中的主机，运行写好的playbook\n```bash\nansible-playbook -i ./inventory/host.ini ./playbooks/miniconda-install.yml\n```\n\n## 问题整理\n### 1. 配置SSH免密登录\n注意最好保持集群主机的用户统一，之前root用户和orangepi用户混着用，后面想改SSH免密登录的时候出了一系列问题。\n详见[SSH#SSH免密登录](SSH#SSH免密登录)\n### 2. 由于缺乏sudo密码造成的权限问题\n在目标主机（`pi2`）上配置免密 `sudo`，这样 Ansible 可以无需密码执行 `sudo` 命令。\n\n1. 登录到 `pi2`：\n```bash\nssh orangepi@192.168.0.111\n```\n\n2. 编辑 `sudoers` 文件：\n```bash\nsudo visudo\n```\n\n3. 添加以下内容，允许 `orangepi` 用户免密使用 `sudo`：\n```text\norangepi ALL=(ALL) NOPASSWD: ALL\n```\n\n4. 保存并退出，运行以下命令，如果不需要输入密码说明配置成功。\n```bash\nsudo ls\n```\n\n### 3. Ansible 用 非登录、非交互 的 `/bin/sh`导致的问题\n#### 1.`conda -V`显示`command not found`\n\n$Last Edited：2025.08.12/12:01$\n___\n\n正常的conda init完成后，初始化块会被写入到`./bashrc`中，这个指令可以查看\n```bash\ntail -n 20 ~orangepi/.bashrc\n```\n conda 初始化块（以 `# >>> conda initialize >>>` 开头），如果看不到说明没有初始化\n 初始化成功之后`conda -V`才是可用的\n\n 本来的想法是通过`conda -V`判断一下是否初始化，如果没有的话就执行初始化流程，但是尝试了很多中方法都没办法正确输出，比如下面这个：\n ```yaml\n ---\n- hosts: pi\n  remote_user: orangepi\n  become: yes\n  tasks:\n    - name: 检查 Conda 是否可用\n      shell: |\n        set -e\n        source ~/.bashrc\n        conda --version\n      args:\n        executable: /bin/bash\n        chdir: /home/orangepi\n      become_user: orangepi\n      register: conda_check\n      ignore_errors: yes\n```\n\n会出现错误⬇如果source语句前加个bash -l，则会卡住。\n```\nfatal: [pi2]: FAILED! => {\"changed\": true, \"cmd\": \"set -e\\nsource ~/.bashrc\\nconda --version\\n\", \"delta\": \"0:00:00.030028\", \"end\": \"2025-08-12 03:34:32.224542\", \"msg\": \"non-zero return code\", \"rc\": 127, \"start\": \"2025-08-12 03:34:32.194514\", \"stderr\": \"/bin/bash: line 3: conda: command not found\", \"stderr_lines\": [\"/bin/bash: line 3: conda: command not found\"], \"stdout\": \"\", \"stdout_lines\": []}\n...ignoring\n```\n\n但是pi1却没有报错，只显示changed，这个是AI分析的结果：\npi1 的结果与其他节点不同，主要原因是 pi1 上通过 VS Code 远程连接或运行 VS Code Server，导致 Conda 环境被正确初始化，而其他节点没有类似的初始化过程。\n具体分析如下：\n1. **PATH 环境变量差异**：\n - pi1 的 PATH 包含 `/opt/miniconda/condabin`，使得 `conda` 命令可以直接找到。\n - 其他节点的 PATH 不包含这个路径，因此无法找到 `conda` 命令。\n2. **Conda 相关环境变量**：\n - pi1 上存在 Conda 相关的环境变量（如 `CONDA_EXE`、`CONDA_PYTHON_EXE`），而其他节点没有。\n3. **VS Code 环境**\n - pi1 上有许多 VS Code 相关的环境变量，表明它可能通过 VS Code 远程连接或正在运行 VS Code Server。\n - VS Code 在启动时可能会初始化 Conda 环境并设置相关环境变量。\n解决方案： 为了使所有节点行为一致，可以采取以下措施之一：\n1. 在所有节点上统一配置 Conda 环境，例如通过在 `/etc/profile.d/` 中添加 Conda 初始化脚本。\n2. 确保所有节点都通过相同的方式（如 VS Code 远程连接）来访问 Conda 环境。\n3. 修改 Ansible playbook，在执行任务前显式初始化 Conda 环境，例如通过 `source /opt/miniconda/etc/profile.d/conda.sh`。\n\n 后面选择通过检查conda hook的相关文本来判断是否初始化：\n```yaml\n  - name: 检测 ~/.bashrc 是否已包含 conda hook\n\tshell: |\n\t  grep -qF '# >>> conda initialize >>>' /home/orangepi/.bashrc\n\targs:\n\t  executable: /bin/bash\n\tregister: hook_exists\n\tbecome_user: orangepi\n\tignore_errors: yes\n\tchanged_when: false\n```\n\n不过在写这个笔记时，发现下面这种检查方式好像也可以用：\n ```yaml\n ---\n- hosts: pi\n  remote_user: orangepi\n  become: yes\n  tasks:\n    - name: 检查 Conda 是否可用\n      shell: |\n        bash -ilc 'conda --version'\n      args:\n        executable: /bin/bash\n        chdir: /home/orangepi\n      become_user: orangepi\n      register: conda_check\n      ignore_errors: yes\n```\n1. **`-i`** (interactive)\n    - 启动**交互式 shell**\n    - 会加载用户的配置文件（如 `~/.bashrc`）\n    - 启用交互功能（如命令补全、别名等）\n2. **`-l`** (login)\n    - 模拟**登录 shell**\n    - 会加载登录配置文件（如 `/etc/profile`, `~/.bash_profile`）\n    - 设置完整的用户环境变量\n3. **`-c`** (command)\n    - 执行指定的命令字符串（后面引号中的内容）\n    - 执行后立即退出 shell","source":"_posts/2025-06-01-集群管理Ansible.md","raw":"---\ntitle: 集群管理——Ansible\ndate: 2025-06-01 10:34:58\nupdated: 2025-08-12 12:30:12\ncategories:\n  - [服务器&嵌入式平台操作, 工具]\ntags:\npermalink: 集群管理——ansible/\n---\n\n> [!NOTE] 操作环境\n> 同一局域网下的多台香橙派4-lts Orange Pi 3.0.6 Bullseye with Linux 5.10.160-rk3399\n> ip地址为192.168.0.110-192.168.0.113\n\n## 安装和使用\n建议重新查阅官方文档安装，可能会有更新[Ansible 文档 — Ansible 社区文档](https://docs.ansible.org.cn/ansible/latest/index.html)\n主要步骤就是\n1. 安装Ansible\n2. 配置免密登录\n3. 指定inventory中的主机，运行写好的playbook\n```bash\nansible-playbook -i ./inventory/host.ini ./playbooks/miniconda-install.yml\n```\n\n## 问题整理\n### 1. 配置SSH免密登录\n注意最好保持集群主机的用户统一，之前root用户和orangepi用户混着用，后面想改SSH免密登录的时候出了一系列问题。\n详见[SSH#SSH免密登录](SSH#SSH免密登录)\n### 2. 由于缺乏sudo密码造成的权限问题\n在目标主机（`pi2`）上配置免密 `sudo`，这样 Ansible 可以无需密码执行 `sudo` 命令。\n\n1. 登录到 `pi2`：\n```bash\nssh orangepi@192.168.0.111\n```\n\n2. 编辑 `sudoers` 文件：\n```bash\nsudo visudo\n```\n\n3. 添加以下内容，允许 `orangepi` 用户免密使用 `sudo`：\n```text\norangepi ALL=(ALL) NOPASSWD: ALL\n```\n\n4. 保存并退出，运行以下命令，如果不需要输入密码说明配置成功。\n```bash\nsudo ls\n```\n\n### 3. Ansible 用 非登录、非交互 的 `/bin/sh`导致的问题\n#### 1.`conda -V`显示`command not found`\n\n$Last Edited：2025.08.12/12:01$\n___\n\n正常的conda init完成后，初始化块会被写入到`./bashrc`中，这个指令可以查看\n```bash\ntail -n 20 ~orangepi/.bashrc\n```\n conda 初始化块（以 `# >>> conda initialize >>>` 开头），如果看不到说明没有初始化\n 初始化成功之后`conda -V`才是可用的\n\n 本来的想法是通过`conda -V`判断一下是否初始化，如果没有的话就执行初始化流程，但是尝试了很多中方法都没办法正确输出，比如下面这个：\n ```yaml\n ---\n- hosts: pi\n  remote_user: orangepi\n  become: yes\n  tasks:\n    - name: 检查 Conda 是否可用\n      shell: |\n        set -e\n        source ~/.bashrc\n        conda --version\n      args:\n        executable: /bin/bash\n        chdir: /home/orangepi\n      become_user: orangepi\n      register: conda_check\n      ignore_errors: yes\n```\n\n会出现错误⬇如果source语句前加个bash -l，则会卡住。\n```\nfatal: [pi2]: FAILED! => {\"changed\": true, \"cmd\": \"set -e\\nsource ~/.bashrc\\nconda --version\\n\", \"delta\": \"0:00:00.030028\", \"end\": \"2025-08-12 03:34:32.224542\", \"msg\": \"non-zero return code\", \"rc\": 127, \"start\": \"2025-08-12 03:34:32.194514\", \"stderr\": \"/bin/bash: line 3: conda: command not found\", \"stderr_lines\": [\"/bin/bash: line 3: conda: command not found\"], \"stdout\": \"\", \"stdout_lines\": []}\n...ignoring\n```\n\n但是pi1却没有报错，只显示changed，这个是AI分析的结果：\npi1 的结果与其他节点不同，主要原因是 pi1 上通过 VS Code 远程连接或运行 VS Code Server，导致 Conda 环境被正确初始化，而其他节点没有类似的初始化过程。\n具体分析如下：\n1. **PATH 环境变量差异**：\n - pi1 的 PATH 包含 `/opt/miniconda/condabin`，使得 `conda` 命令可以直接找到。\n - 其他节点的 PATH 不包含这个路径，因此无法找到 `conda` 命令。\n2. **Conda 相关环境变量**：\n - pi1 上存在 Conda 相关的环境变量（如 `CONDA_EXE`、`CONDA_PYTHON_EXE`），而其他节点没有。\n3. **VS Code 环境**\n - pi1 上有许多 VS Code 相关的环境变量，表明它可能通过 VS Code 远程连接或正在运行 VS Code Server。\n - VS Code 在启动时可能会初始化 Conda 环境并设置相关环境变量。\n解决方案： 为了使所有节点行为一致，可以采取以下措施之一：\n1. 在所有节点上统一配置 Conda 环境，例如通过在 `/etc/profile.d/` 中添加 Conda 初始化脚本。\n2. 确保所有节点都通过相同的方式（如 VS Code 远程连接）来访问 Conda 环境。\n3. 修改 Ansible playbook，在执行任务前显式初始化 Conda 环境，例如通过 `source /opt/miniconda/etc/profile.d/conda.sh`。\n\n 后面选择通过检查conda hook的相关文本来判断是否初始化：\n```yaml\n  - name: 检测 ~/.bashrc 是否已包含 conda hook\n\tshell: |\n\t  grep -qF '# >>> conda initialize >>>' /home/orangepi/.bashrc\n\targs:\n\t  executable: /bin/bash\n\tregister: hook_exists\n\tbecome_user: orangepi\n\tignore_errors: yes\n\tchanged_when: false\n```\n\n不过在写这个笔记时，发现下面这种检查方式好像也可以用：\n ```yaml\n ---\n- hosts: pi\n  remote_user: orangepi\n  become: yes\n  tasks:\n    - name: 检查 Conda 是否可用\n      shell: |\n        bash -ilc 'conda --version'\n      args:\n        executable: /bin/bash\n        chdir: /home/orangepi\n      become_user: orangepi\n      register: conda_check\n      ignore_errors: yes\n```\n1. **`-i`** (interactive)\n    - 启动**交互式 shell**\n    - 会加载用户的配置文件（如 `~/.bashrc`）\n    - 启用交互功能（如命令补全、别名等）\n2. **`-l`** (login)\n    - 模拟**登录 shell**\n    - 会加载登录配置文件（如 `/etc/profile`, `~/.bash_profile`）\n    - 设置完整的用户环境变量\n3. **`-c`** (command)\n    - 执行指定的命令字符串（后面引号中的内容）\n    - 执行后立即退出 shell","slug":"2025-06-01-集群管理Ansible","published":1,"__permalink":"集群管理——ansible/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0nu001tzovd082u7204","content":"<blockquote>\n<p>[!NOTE] 操作环境<br>同一局域网下的多台香橙派4-lts Orange Pi 3.0.6 Bullseye with Linux 5.10.160-rk3399<br>ip地址为192.168.0.110-192.168.0.113</p>\n</blockquote>\n<h2 id=\"安装和使用\"><a href=\"#安装和使用\" class=\"headerlink\" title=\"安装和使用\"></a>安装和使用</h2><p>建议重新查阅官方文档安装，可能会有更新<a href=\"https://docs.ansible.org.cn/ansible/latest/index.html\">Ansible 文档 — Ansible 社区文档</a><br>主要步骤就是</p>\n<ol>\n<li>安装Ansible</li>\n<li>配置免密登录</li>\n<li>指定inventory中的主机，运行写好的playbook<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible-playbook -i ./inventory/host.ini ./playbooks/miniconda-install.yml</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"问题整理\"><a href=\"#问题整理\" class=\"headerlink\" title=\"问题整理\"></a>问题整理</h2><h3 id=\"1-配置SSH免密登录\"><a href=\"#1-配置SSH免密登录\" class=\"headerlink\" title=\"1. 配置SSH免密登录\"></a>1. 配置SSH免密登录</h3><p>注意最好保持集群主机的用户统一，之前root用户和orangepi用户混着用，后面想改SSH免密登录的时候出了一系列问题。<br>详见<a href=\"SSH#SSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95\">SSH#SSH免密登录</a></p>\n<h3 id=\"2-由于缺乏sudo密码造成的权限问题\"><a href=\"#2-由于缺乏sudo密码造成的权限问题\" class=\"headerlink\" title=\"2. 由于缺乏sudo密码造成的权限问题\"></a>2. 由于缺乏sudo密码造成的权限问题</h3><p>在目标主机（<code>pi2</code>）上配置免密 <code>sudo</code>，这样 Ansible 可以无需密码执行 <code>sudo</code> 命令。</p>\n<ol>\n<li><p>登录到 <code>pi2</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh orangepi@192.168.0.111</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑 <code>sudoers</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> visudo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加以下内容，允许 <code>orangepi</code> 用户免密使用 <code>sudo</code>：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">orangepi ALL=(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>保存并退出，运行以下命令，如果不需要输入密码说明配置成功。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"3-Ansible-用-非登录、非交互-的-bin-sh导致的问题\"><a href=\"#3-Ansible-用-非登录、非交互-的-bin-sh导致的问题\" class=\"headerlink\" title=\"3. Ansible 用 非登录、非交互 的 /bin/sh导致的问题\"></a>3. Ansible 用 非登录、非交互 的 <code>/bin/sh</code>导致的问题</h3><h4 id=\"1-conda-V显示command-not-found\"><a href=\"#1-conda-V显示command-not-found\" class=\"headerlink\" title=\"1.conda -V显示command not found\"></a>1.<code>conda -V</code>显示<code>command not found</code></h4><p>$Last Edited：2025.08.12&#x2F;12:01$</p>\n<hr>\n<p>正常的conda init完成后，初始化块会被写入到<code>./bashrc</code>中，这个指令可以查看</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tail</span> -n 20 ~orangepi/.bashrc</span><br></pre></td></tr></table></figure>\n<p> conda 初始化块（以 <code># &gt;&gt;&gt; conda initialize &gt;&gt;&gt;</code> 开头），如果看不到说明没有初始化<br> 初始化成功之后<code>conda -V</code>才是可用的</p>\n<p> 本来的想法是通过<code>conda -V</code>判断一下是否初始化，如果没有的话就执行初始化流程，但是尝试了很多中方法都没办法正确输出，比如下面这个：<br> <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"string\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">pi</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">orangepi</span></span><br><span class=\"line\">  <span class=\"attr\">become:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查</span> <span class=\"string\">Conda</span> <span class=\"string\">是否可用</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span> <span class=\"string\">|</span></span><br><span class=\"line\">        <span class=\"string\">set</span> <span class=\"string\">-e</span></span><br><span class=\"line\">        <span class=\"string\">source</span> <span class=\"string\">~/.bashrc</span></span><br><span class=\"line\">        <span class=\"string\">conda</span> <span class=\"string\">--version</span></span><br><span class=\"line\">      <span class=\"attr\">args:</span></span><br><span class=\"line\">        <span class=\"attr\">executable:</span> <span class=\"string\">/bin/bash</span></span><br><span class=\"line\">        <span class=\"attr\">chdir:</span> <span class=\"string\">/home/orangepi</span></span><br><span class=\"line\">      <span class=\"attr\">become_user:</span> <span class=\"string\">orangepi</span></span><br><span class=\"line\">      <span class=\"attr\">register:</span> <span class=\"string\">conda_check</span></span><br><span class=\"line\">      <span class=\"attr\">ignore_errors:</span> <span class=\"literal\">yes</span></span><br></pre></td></tr></table></figure></p>\n<p>会出现错误⬇如果source语句前加个bash -l，则会卡住。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal: [pi2]: FAILED! =&gt; &#123;&quot;changed&quot;: true, &quot;cmd&quot;: &quot;set -e\\nsource ~/.bashrc\\nconda --version\\n&quot;, &quot;delta&quot;: &quot;0:00:00.030028&quot;, &quot;end&quot;: &quot;2025-08-12 03:34:32.224542&quot;, &quot;msg&quot;: &quot;non-zero return code&quot;, &quot;rc&quot;: 127, &quot;start&quot;: &quot;2025-08-12 03:34:32.194514&quot;, &quot;stderr&quot;: &quot;/bin/bash: line 3: conda: command not found&quot;, &quot;stderr_lines&quot;: [&quot;/bin/bash: line 3: conda: command not found&quot;], &quot;stdout&quot;: &quot;&quot;, &quot;stdout_lines&quot;: []&#125;</span><br><span class=\"line\">...ignoring</span><br></pre></td></tr></table></figure>\n\n<p>但是pi1却没有报错，只显示changed，这个是AI分析的结果：<br>pi1 的结果与其他节点不同，主要原因是 pi1 上通过 VS Code 远程连接或运行 VS Code Server，导致 Conda 环境被正确初始化，而其他节点没有类似的初始化过程。<br>具体分析如下：</p>\n<ol>\n<li><strong>PATH 环境变量差异</strong>：</li>\n</ol>\n<ul>\n<li>pi1 的 PATH 包含 <code>/opt/miniconda/condabin</code>，使得 <code>conda</code> 命令可以直接找到。</li>\n<li>其他节点的 PATH 不包含这个路径，因此无法找到 <code>conda</code> 命令。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>Conda 相关环境变量</strong>：</li>\n</ol>\n<ul>\n<li>pi1 上存在 Conda 相关的环境变量（如 <code>CONDA_EXE</code>、<code>CONDA_PYTHON_EXE</code>），而其他节点没有。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>VS Code 环境</strong></li>\n</ol>\n<ul>\n<li>pi1 上有许多 VS Code 相关的环境变量，表明它可能通过 VS Code 远程连接或正在运行 VS Code Server。</li>\n<li>VS Code 在启动时可能会初始化 Conda 环境并设置相关环境变量。<br>解决方案： 为了使所有节点行为一致，可以采取以下措施之一：</li>\n</ul>\n<ol>\n<li>在所有节点上统一配置 Conda 环境，例如通过在 <code>/etc/profile.d/</code> 中添加 Conda 初始化脚本。</li>\n<li>确保所有节点都通过相同的方式（如 VS Code 远程连接）来访问 Conda 环境。</li>\n<li>修改 Ansible playbook，在执行任务前显式初始化 Conda 环境，例如通过 <code>source /opt/miniconda/etc/profile.d/conda.sh</code>。</li>\n</ol>\n<p> 后面选择通过检查conda hook的相关文本来判断是否初始化：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检测</span> <span class=\"string\">~/.bashrc</span> <span class=\"string\">是否已包含</span> <span class=\"string\">conda</span> <span class=\"string\">hook</span></span><br><span class=\"line\"><span class=\"attr\">shell:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">  grep -qF &#x27;# &gt;&gt;&gt; conda initialize &gt;&gt;&gt;&#x27; /home/orangepi/.bashrc</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"attr\">args:</span></span><br><span class=\"line\">  <span class=\"attr\">executable:</span> <span class=\"string\">/bin/bash</span></span><br><span class=\"line\"><span class=\"attr\">register:</span> <span class=\"string\">hook_exists</span></span><br><span class=\"line\"><span class=\"attr\">become_user:</span> <span class=\"string\">orangepi</span></span><br><span class=\"line\"><span class=\"attr\">ignore_errors:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"attr\">changed_when:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>不过在写这个笔记时，发现下面这种检查方式好像也可以用：<br> <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"string\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">pi</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">orangepi</span></span><br><span class=\"line\">  <span class=\"attr\">become:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查</span> <span class=\"string\">Conda</span> <span class=\"string\">是否可用</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span> <span class=\"string\">|</span></span><br><span class=\"line\">        <span class=\"string\">bash</span> <span class=\"string\">-ilc</span> <span class=\"string\">&#x27;conda --version&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">args:</span></span><br><span class=\"line\">        <span class=\"attr\">executable:</span> <span class=\"string\">/bin/bash</span></span><br><span class=\"line\">        <span class=\"attr\">chdir:</span> <span class=\"string\">/home/orangepi</span></span><br><span class=\"line\">      <span class=\"attr\">become_user:</span> <span class=\"string\">orangepi</span></span><br><span class=\"line\">      <span class=\"attr\">register:</span> <span class=\"string\">conda_check</span></span><br><span class=\"line\">      <span class=\"attr\">ignore_errors:</span> <span class=\"literal\">yes</span></span><br></pre></td></tr></table></figure></p>\n<ol>\n<li><strong><code>-i</code></strong> (interactive)<ul>\n<li>启动<strong>交互式 shell</strong></li>\n<li>会加载用户的配置文件（如 <code>~/.bashrc</code>）</li>\n<li>启用交互功能（如命令补全、别名等）</li>\n</ul>\n</li>\n<li><strong><code>-l</code></strong> (login)<ul>\n<li>模拟<strong>登录 shell</strong></li>\n<li>会加载登录配置文件（如 <code>/etc/profile</code>, <code>~/.bash_profile</code>）</li>\n<li>设置完整的用户环境变量</li>\n</ul>\n</li>\n<li><strong><code>-c</code></strong> (command)<ul>\n<li>执行指定的命令字符串（后面引号中的内容）</li>\n<li>执行后立即退出 shell</li>\n</ul>\n</li>\n</ol>\n","excerpt":"","more":"<blockquote>\n<p>[!NOTE] 操作环境<br>同一局域网下的多台香橙派4-lts Orange Pi 3.0.6 Bullseye with Linux 5.10.160-rk3399<br>ip地址为192.168.0.110-192.168.0.113</p>\n</blockquote>\n<h2 id=\"安装和使用\"><a href=\"#安装和使用\" class=\"headerlink\" title=\"安装和使用\"></a>安装和使用</h2><p>建议重新查阅官方文档安装，可能会有更新<a href=\"https://docs.ansible.org.cn/ansible/latest/index.html\">Ansible 文档 — Ansible 社区文档</a><br>主要步骤就是</p>\n<ol>\n<li>安装Ansible</li>\n<li>配置免密登录</li>\n<li>指定inventory中的主机，运行写好的playbook<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible-playbook -i ./inventory/host.ini ./playbooks/miniconda-install.yml</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"问题整理\"><a href=\"#问题整理\" class=\"headerlink\" title=\"问题整理\"></a>问题整理</h2><h3 id=\"1-配置SSH免密登录\"><a href=\"#1-配置SSH免密登录\" class=\"headerlink\" title=\"1. 配置SSH免密登录\"></a>1. 配置SSH免密登录</h3><p>注意最好保持集群主机的用户统一，之前root用户和orangepi用户混着用，后面想改SSH免密登录的时候出了一系列问题。<br>详见<a href=\"SSH#SSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95\">SSH#SSH免密登录</a></p>\n<h3 id=\"2-由于缺乏sudo密码造成的权限问题\"><a href=\"#2-由于缺乏sudo密码造成的权限问题\" class=\"headerlink\" title=\"2. 由于缺乏sudo密码造成的权限问题\"></a>2. 由于缺乏sudo密码造成的权限问题</h3><p>在目标主机（<code>pi2</code>）上配置免密 <code>sudo</code>，这样 Ansible 可以无需密码执行 <code>sudo</code> 命令。</p>\n<ol>\n<li><p>登录到 <code>pi2</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh orangepi@192.168.0.111</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑 <code>sudoers</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> visudo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加以下内容，允许 <code>orangepi</code> 用户免密使用 <code>sudo</code>：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">orangepi ALL=(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>保存并退出，运行以下命令，如果不需要输入密码说明配置成功。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"3-Ansible-用-非登录、非交互-的-bin-sh导致的问题\"><a href=\"#3-Ansible-用-非登录、非交互-的-bin-sh导致的问题\" class=\"headerlink\" title=\"3. Ansible 用 非登录、非交互 的 /bin/sh导致的问题\"></a>3. Ansible 用 非登录、非交互 的 <code>/bin/sh</code>导致的问题</h3><h4 id=\"1-conda-V显示command-not-found\"><a href=\"#1-conda-V显示command-not-found\" class=\"headerlink\" title=\"1.conda -V显示command not found\"></a>1.<code>conda -V</code>显示<code>command not found</code></h4><p>$Last Edited：2025.08.12&#x2F;12:01$</p>\n<hr>\n<p>正常的conda init完成后，初始化块会被写入到<code>./bashrc</code>中，这个指令可以查看</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tail</span> -n 20 ~orangepi/.bashrc</span><br></pre></td></tr></table></figure>\n<p> conda 初始化块（以 <code># &gt;&gt;&gt; conda initialize &gt;&gt;&gt;</code> 开头），如果看不到说明没有初始化<br> 初始化成功之后<code>conda -V</code>才是可用的</p>\n<p> 本来的想法是通过<code>conda -V</code>判断一下是否初始化，如果没有的话就执行初始化流程，但是尝试了很多中方法都没办法正确输出，比如下面这个：<br> <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"string\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">pi</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">orangepi</span></span><br><span class=\"line\">  <span class=\"attr\">become:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查</span> <span class=\"string\">Conda</span> <span class=\"string\">是否可用</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span> <span class=\"string\">|</span></span><br><span class=\"line\">        <span class=\"string\">set</span> <span class=\"string\">-e</span></span><br><span class=\"line\">        <span class=\"string\">source</span> <span class=\"string\">~/.bashrc</span></span><br><span class=\"line\">        <span class=\"string\">conda</span> <span class=\"string\">--version</span></span><br><span class=\"line\">      <span class=\"attr\">args:</span></span><br><span class=\"line\">        <span class=\"attr\">executable:</span> <span class=\"string\">/bin/bash</span></span><br><span class=\"line\">        <span class=\"attr\">chdir:</span> <span class=\"string\">/home/orangepi</span></span><br><span class=\"line\">      <span class=\"attr\">become_user:</span> <span class=\"string\">orangepi</span></span><br><span class=\"line\">      <span class=\"attr\">register:</span> <span class=\"string\">conda_check</span></span><br><span class=\"line\">      <span class=\"attr\">ignore_errors:</span> <span class=\"literal\">yes</span></span><br></pre></td></tr></table></figure></p>\n<p>会出现错误⬇如果source语句前加个bash -l，则会卡住。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal: [pi2]: FAILED! =&gt; &#123;&quot;changed&quot;: true, &quot;cmd&quot;: &quot;set -e\\nsource ~/.bashrc\\nconda --version\\n&quot;, &quot;delta&quot;: &quot;0:00:00.030028&quot;, &quot;end&quot;: &quot;2025-08-12 03:34:32.224542&quot;, &quot;msg&quot;: &quot;non-zero return code&quot;, &quot;rc&quot;: 127, &quot;start&quot;: &quot;2025-08-12 03:34:32.194514&quot;, &quot;stderr&quot;: &quot;/bin/bash: line 3: conda: command not found&quot;, &quot;stderr_lines&quot;: [&quot;/bin/bash: line 3: conda: command not found&quot;], &quot;stdout&quot;: &quot;&quot;, &quot;stdout_lines&quot;: []&#125;</span><br><span class=\"line\">...ignoring</span><br></pre></td></tr></table></figure>\n\n<p>但是pi1却没有报错，只显示changed，这个是AI分析的结果：<br>pi1 的结果与其他节点不同，主要原因是 pi1 上通过 VS Code 远程连接或运行 VS Code Server，导致 Conda 环境被正确初始化，而其他节点没有类似的初始化过程。<br>具体分析如下：</p>\n<ol>\n<li><strong>PATH 环境变量差异</strong>：</li>\n</ol>\n<ul>\n<li>pi1 的 PATH 包含 <code>/opt/miniconda/condabin</code>，使得 <code>conda</code> 命令可以直接找到。</li>\n<li>其他节点的 PATH 不包含这个路径，因此无法找到 <code>conda</code> 命令。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>Conda 相关环境变量</strong>：</li>\n</ol>\n<ul>\n<li>pi1 上存在 Conda 相关的环境变量（如 <code>CONDA_EXE</code>、<code>CONDA_PYTHON_EXE</code>），而其他节点没有。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>VS Code 环境</strong></li>\n</ol>\n<ul>\n<li>pi1 上有许多 VS Code 相关的环境变量，表明它可能通过 VS Code 远程连接或正在运行 VS Code Server。</li>\n<li>VS Code 在启动时可能会初始化 Conda 环境并设置相关环境变量。<br>解决方案： 为了使所有节点行为一致，可以采取以下措施之一：</li>\n</ul>\n<ol>\n<li>在所有节点上统一配置 Conda 环境，例如通过在 <code>/etc/profile.d/</code> 中添加 Conda 初始化脚本。</li>\n<li>确保所有节点都通过相同的方式（如 VS Code 远程连接）来访问 Conda 环境。</li>\n<li>修改 Ansible playbook，在执行任务前显式初始化 Conda 环境，例如通过 <code>source /opt/miniconda/etc/profile.d/conda.sh</code>。</li>\n</ol>\n<p> 后面选择通过检查conda hook的相关文本来判断是否初始化：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检测</span> <span class=\"string\">~/.bashrc</span> <span class=\"string\">是否已包含</span> <span class=\"string\">conda</span> <span class=\"string\">hook</span></span><br><span class=\"line\"><span class=\"attr\">shell:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">  grep -qF &#x27;# &gt;&gt;&gt; conda initialize &gt;&gt;&gt;&#x27; /home/orangepi/.bashrc</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"attr\">args:</span></span><br><span class=\"line\">  <span class=\"attr\">executable:</span> <span class=\"string\">/bin/bash</span></span><br><span class=\"line\"><span class=\"attr\">register:</span> <span class=\"string\">hook_exists</span></span><br><span class=\"line\"><span class=\"attr\">become_user:</span> <span class=\"string\">orangepi</span></span><br><span class=\"line\"><span class=\"attr\">ignore_errors:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"attr\">changed_when:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>不过在写这个笔记时，发现下面这种检查方式好像也可以用：<br> <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"string\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">pi</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">orangepi</span></span><br><span class=\"line\">  <span class=\"attr\">become:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查</span> <span class=\"string\">Conda</span> <span class=\"string\">是否可用</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span> <span class=\"string\">|</span></span><br><span class=\"line\">        <span class=\"string\">bash</span> <span class=\"string\">-ilc</span> <span class=\"string\">&#x27;conda --version&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">args:</span></span><br><span class=\"line\">        <span class=\"attr\">executable:</span> <span class=\"string\">/bin/bash</span></span><br><span class=\"line\">        <span class=\"attr\">chdir:</span> <span class=\"string\">/home/orangepi</span></span><br><span class=\"line\">      <span class=\"attr\">become_user:</span> <span class=\"string\">orangepi</span></span><br><span class=\"line\">      <span class=\"attr\">register:</span> <span class=\"string\">conda_check</span></span><br><span class=\"line\">      <span class=\"attr\">ignore_errors:</span> <span class=\"literal\">yes</span></span><br></pre></td></tr></table></figure></p>\n<ol>\n<li><strong><code>-i</code></strong> (interactive)<ul>\n<li>启动<strong>交互式 shell</strong></li>\n<li>会加载用户的配置文件（如 <code>~/.bashrc</code>）</li>\n<li>启用交互功能（如命令补全、别名等）</li>\n</ul>\n</li>\n<li><strong><code>-l</code></strong> (login)<ul>\n<li>模拟<strong>登录 shell</strong></li>\n<li>会加载登录配置文件（如 <code>/etc/profile</code>, <code>~/.bash_profile</code>）</li>\n<li>设置完整的用户环境变量</li>\n</ul>\n</li>\n<li><strong><code>-c</code></strong> (command)<ul>\n<li>执行指定的命令字符串（后面引号中的内容）</li>\n<li>执行后立即退出 shell</li>\n</ul>\n</li>\n</ol>\n"},{"title":"静态博客—Hexo","date":"2025-06-01T02:34:58.000Z","updated":"2025-10-08T06:40:26.000Z","_content":"\n### 环境准备与Hexo安装\n\n$Last Edited：2025.04.28/20:41$\n___\n\n直接从apt下载，版本可能比较低，用这个方法可以选择合适的版本。\n**添加 NodeSource 的 Node.js 20.x 仓库**（你可以选择其他支持的版本，如 18.x 或 20.x）：\n```bash\n curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -\n```\n\n安装 **Node.js** 和 **npm**：\n```bash\nsudo apt-get install -y nodejs\n```\n\n验证：\n```bash\nnode -v\nnpm -v\n```\n\n使用 **npm** 全局安装 **Hexo**：\n```bash\nsudo npm install -g hexo-cli\n```\n\n安装完成后，检查 **Hexo** 版本：\n```bash\nhexo -v\n```\n\n 创建 **Hexo** 博客\n选择一个目录存放博客文件，例如 `/home/yourname/blog`，然后运行以下命令初始化 Hexo：\n```bash\nhexo init /home/yourname/blog\ncd /home/yourname/blog\nnpm install\n```\n\n在目录下，生成静态文件并启动本地服务器：\n```bash\nhexo generate\nhexo server\n```\n默认在`http://localhost:4000`运行。\n\n### Hexo部署到GitHub\n参考：\n[Ubuntu:Hexo+github搭建个人博客 | Akilarの糖果屋](https://akilar.top/posts/e5502ef6/)\n\n$Last Edited：2025.04.28/20:41$\n___\n\n- [x] GitHub Pages 仓库命名规则：\n    - **用户/组织站点**：仓库名 **必须** 为 `<username>.github.io`（例如 `cloak1522.github.io`），访问地址为 `https://<username>.github.io`。\n    - **项目站点**：仓库名可以是任意名称（例如 `418blog`），访问地址为 `https://<username>.github.io/<repo>`。\n在GitHub上新建一个名为418blog的仓库，确保Pages有关的设置正确。\n![Github设置pages.png](/images/Github设置pages.png)\n\n回到云服务器，在管理员模式下设置用户名和邮箱地址：\n```bash\nsudo passwd  \n# 然后会提示你输入新的UNIX密码，密码设置ok以后，我们进入管理员模式。输入：  \nsu\n```\n\n安装git：\n```bash\napt install git\n```\n\n配置git：\n```bash\ngit config --global user.name \"username\"  \ngit config --global user.email \"username@example.com\"  \n# 检查电脑是否已经有 SSH keys  \nssh-keygen -t rsa -C youremail@example.com  \n# -C后面加你在github的用户名邮箱，这样公钥才会被github认可  \nless ~/.ssh/id_rsa.pub  \n# 查看公钥内容稍后加入Github账户的sshkey中\n```\n\n大概显示如下，按q退出。\n```text\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCkCIY3F5wQ2SaJU6a8AzKwxnlM4vkarK2R8uYvgunEZyx6rXUBTPXgry9Vtq+rOSZ+wowG1Gpkte4DKeQV0RHQeVbhW5daHt4INjTCopSCpLA7g1ToZ0VD3A7VphFuioj/SnpAkUY7ZZYr1X8+iU989oMHazrRqs5Ji1QAFlVKhJ0LTALMqDpj6EpQRSNzLriDnBp27sFHSrVkNMEguIAe+7/Mpiew6v1v/yIdIxsci+q5du+Yka8nviSgPH/6FJo1SCp+RITkIvV/M+nrmawEP9KqP0koiRJa1SuXmsBxHpeJMKW8U+eySYqNJJsotoEjluRFnnCz7U03Vh6oe0uwjZf5c//aephrJduZxR9Y8OzomXqSwngTBh21AEPpIyksSFV7GKYQ9NG7/EmZS4E1VTsrZoe/wQKSnsmkZqtgqSLKY0JY1i0T1ogPg6ApmEZKtKVcBcJSqrJCqcyY9tzN4vcBnz7E4dKeFscgPNOh6tZCPDvGmMy2GREpW5/5H6c= obsever20210103@gmail.com\n/root/.ssh/id_rsa.pub (END)\n```\n\n添加到GitHub账户的SSH keys中：\n![GitHub的SSHkey.png](/images/GitHub的SSHkey.png)\n\n测试连接情况，第一次一般是这样的：\n```bash\nroot@VM-8-3-ubuntu:/home/ubuntu/blog# ssh -T git@github.com\nThe authenticity of host 'github.com (20.205.243.166)' can't be established.\nED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.\nThis key is not known by any other names\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added 'github.com' (ED25519) to the list of known hosts.\nHi cloak1522! You've successfully authenticated, but GitHub does not provide shell access.\nroot@VM-8-3-ubuntu:/home/ubuntu/blog# ssh -T git@github.com\nHi cloak1522! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n在Hexo根目录下，有一个`_config.yml`文件，存放了相关配置信息，在其中添加：\n```yaml\nurl: https://cloak1522.github.io/418blog\nroot: /418blog/\n\ndeploy:\n  type: git\n  repository: git@github.com:cloak1522/418blog.git\n  branch: main\n```\n\n清理并重新部署：\n```bash\nhexo clean && hexo generate && hexo deploy\n```\n\n部署完成后，访问(https://cloak1522.github.io/418blog)可查看。\n\n### 主题部署到GitHub\n\n$Last Edited：2025.04.28/20:41$\n___\n\n首先使用`npm`安装需要的主题，以`butterfly`为例。在Hexo根目录下，执行：\n```bash\nnpm install hexo-theme-butterfly --save\n```\n\n在 `_config.yml` 中指定主题名称（与 npm 包名一致）：\n```bash\ntheme: butterfly\n```\n\n此时，如果你的 `themes` 目录为空，但通过 `hexo server` 在本地能看到主题，说明你使用的是 **通过 `npm`安装的主题**（例如 `hexo-theme-landscape`），而非传统的克隆主题仓库方式。这种情况下，主题文件不会直接存放在 `themes` 目录中，而是存储在 `node_modules` 目录下。\n因此使用脚本将主题资源复制到静态目录。\n\n在 Hexo 根目录创建 `scripts` 文件夹（如果不存在）：\n```bash\nmkdir scrips\n```\n\n创建脚本文件 `scripts/copy-theme.js`：\n```javascript\nconst fs = require('fs-extra');\nconst path = require('path');\n\nhexo.on('generateBefore', () => {\n  const themeName = hexo.config.theme;\n  const sourcePath = path.join(hexo.base_dir, 'node_modules', `hexo-theme-${themeName}`);\n  const targetPath = path.join(hexo.base_dir, 'themes', themeName);\n\n  // 检查源路径是否存在\n  if (!fs.existsSync(sourcePath)) {\n    hexo.log.error(`主题源路径不存在: ${sourcePath}`);\n    return;\n  }\n\n  // 确保 themes 目录存在\n  fs.ensureDirSync(path.join(hexo.base_dir, 'themes'));\n\n  // 清空目标目录（确保无残留冲突）\n  if (fs.existsSync(targetPath)) {\n    fs.removeSync(targetPath);\n  }\n\n  // 复制主题文件（含 source 资源）\n  try {\n    fs.copySync(sourcePath, targetPath, {\n      overwrite: true,\n      filter: (src, dest) => {\n        // 排除嵌套的 node_modules，但允许主题根目录下的文件\n        const relativePath = path.relative(sourcePath, src);\n        const isNestedNodeModules = relativePath.includes('node_modules') && relativePath !== 'node_modules';\n        return !isNestedNodeModules;\n      }\n    });\n\t \n    // 验证复制是否成功\n    if (fs.existsSync(targetPath)) {\n      const files = fs.readdirSync(targetPath);\n      hexo.log.info(`主题 ${themeName} 已成功复制到 themes 目录，包含 ${files.length} 个文件/目录`);\n    } else {\n      hexo.log.error(`主题复制失败：目标目录不存在`);\n    }\n  } catch (err) {\n    hexo.log.error(`复制主题失败: ${err.message}`);\n    hexo.log.error(`源路径: ${sourcePath}`);\n    hexo.log.error(`目标路径: ${targetPath}`);\n  }\n});\n```\n- [x] 脚本文件的详细解释\n\t1. **依赖导入**\n\t```javascript\n\tconst fs = require('fs-extra');\n\tconst path = require('path');\n\t```\n\t- `fs-extra`: 增强版的文件系统操作库，提供了更多便利的文件操作方法\n\t- `path`: Node.js 内置的路径处理模块\n\t\n\t2. **事件监听器**\n\t```javascript\n\thexo.on('generateBefore', () => {\n\t```\n\t- 监听 Hexo 的 `generateBefore` 事件\n\t- 这个事件在 Hexo 开始生成静态文件之前触发\n\t- 确保主题文件在生成过程开始前就已经准备好\n\t\n\t3. **路径配置**\n\t```javascript\n\tconst themeName = hexo.config.theme;\n\tconst sourcePath = path.join(hexo.base_dir, 'node_modules', `hexo-theme-${themeName}`);\n\tconst targetPath = path.join(hexo.base_dir, 'themes', themeName);\n\t```\n\t- `themeName`: 从 Hexo 配置中获取当前使用的主题名称\n\t- `sourcePath`: 主题在 `node_modules` 中的位置\n\t- `targetPath`: 主题应该复制到的目标位置\n\t\n\t4. **源路径验证**\n\t```javascript\n\tif (!fs.existsSync(sourcePath)) {\n\t  hexo.log.error(`主题源路径不存在: ${sourcePath}`);\n\t  return;\n\t}\n\t```\n\t- 检查主题是否真的存在于 `node_modules` 中\n\t- 如果不存在，记录错误并退出\n\t\n\t5. **目录准备**\n\t```javascript\n\tfs.ensureDirSync(path.join(hexo.base_dir, 'themes'));\n\t\n\tif (fs.existsSync(targetPath)) {\n\t  fs.removeSync(targetPath);\n\t}\n\t```\n\t- 确保 `themes` 目录存在\n\t- 如果目标路径已存在，先删除以避免冲突\n\t\n\t6. **主题文件复制**\n\t```javascript\n\tfs.copySync(sourcePath, targetPath, {\n\t  overwrite: true,\n\t  filter: (src, dest) => {\n\t    const relativePath = path.relative(sourcePath, src);\n\t    const isNestedNodeModules = relativePath.includes('node_modules') && relativePath !== 'node_modules';\n\t    return !isNestedNodeModules;\n\t  }\n\t});\n\t```\n\t**复制选项说明：**\n\t- `overwrite: true`: 允许覆盖已存在的文件\n\t- `filter`: 过滤函数，控制哪些文件被复制\n\t\n\t**过滤逻辑：**\n\t- 排除嵌套的 `node_modules` 目录\n\t- 允许主题根目录下的所有其他文件和目录\n\t- 这避免了复制不必要的依赖文件\n\t\n\t7. **复制结果验证**\n\t```javascript\n\tif (fs.existsSync(targetPath)) {\n\t  const files = fs.readdirSync(targetPath);\n\t  hexo.log.info(`主题 ${themeName} 已成功复制到 themes 目录，包含 ${files.length} 个文件/目录`);\n\t} else {\n\t  hexo.log.error(`主题复制失败：目标目录不存在`);\n\t}\n\t```\n\t- 验证复制是否成功\n\t- 统计复制的文件数量\n\t- 提供详细的日志信息\n\t\n\t8. **错误处理**\n\t```javascript\n\tcatch (err) {\n\t  hexo.log.error(`复制主题失败: ${err.message}`);\n\t  hexo.log.error(`源路径: ${sourcePath}`);\n\t  hexo.log.error(`目标路径: ${targetPath}`);\n\t}\n\t```\n\t- 捕获并记录复制过程中的任何错误\n\t- 提供详细的错误信息和路径信息，便于调试\n\n安装依赖包：\n```bash\nnpm install fs-extra --save\n```\n\n重新生成静态文件：\n```bash\nhexo clean && hexo generate\n```\n\n检查`theme`目录：\n```bash\nls themes/butterfly\n```\n\n输出如下：\n```bash\nroot@VM-8-3-ubuntu:/home/ubuntu/blog# ls themes/butterfly\n_config.yml  layout   package.json  README_CN.md  scripts\nlanguages    LICENSE  plugins.yml   README.md     source\n```\n\n此时再部署到Github，应该可以看到主题：\n```bash\nhexo deploy\n```\n\n### Hexo目录的权限\n\n$Last Edited：2025.04.28/20:42$\n___\n\nGit 默认会检查仓库目录的所有权，如果目录所有者与当前用户不一致（常见于跨用户操作或 `sudo` 误用），会触发 `dubious ownership` 错误。\n以下以`.deploy_git`文件夹为例，其他情况也同理。\n\n推荐的做法是将目录加入Git的全局安全列表：\n```bash\ngit config --global --add safe.directory /home/ubuntu/blog/.deploy_git\n```\n\n还可以改变目录的所有者，并赋予权限。检查目录所有者用`ls -ld`指令。首先创建一个用户组：\n```bash\nsudo groupadd hexo_group\n```\n\n将 ubuntu 用户和 root 用户加入该用户组：\n```bash\nsudo usermod -aG hexo_group ubuntu\nsudo usermod -aG hexo_group root\n```\n\n更改目录的所属组：\n```bash\nsudo chown -R ubuntu:hexo_group /home/ubuntu/blog/.deploy_git\n```\n\n设置目录和文件的权限：\n```bash\nsudo chmod -R 775 /home/ubuntu/blog/.deploy_git\nsudo chmod -R g+rwX /home/ubuntu/blog/.deploy_git\n```\n- [x] 指令的具体解释：\n\t==sudo chown -R ubuntu:hexo_group /home/ubuntu/blog/.deploy_git==\n\t- **`chown`**：是 \"change owner\" 的缩写，用于更改文件或目录的所有者和所属组。\n\t- **`-R`**：是递归选项（recursive），表示命令会递归地应用于指定目录及其所有子目录和文件。这意味着不仅会更改 `/home/ubuntu/blog/.deploy_git` 目录的所有者和所属组，还会更改该目录下所有文件和子目录的所有者和所属组。\n\t-  **`ubuntu:hexo_group`**：\n    - `ubuntu` 是新所有者的用户名。\n    - `hexo_group` 是新所属组的组名。\n    - 这部分指定了新的所有者和所属组。格式为 `用户:组`。\n\t \n\t==sudo chmod -R 775 /home/ubuntu/blog/.deploy_git==\n\t- **`chmod`**：用于更改文件或目录的权限。\n\t- **`-R`**：递归选项，表示命令会递归地应用于指定目录及其所有子目录和文件。\n\t- **`775`**：是一个八进制数字，表示权限设置。具体含义如下\n\t    - **`7`**：表示所有者（owner）的权限，`7` 对应于 `rwx`（读、写、执行）。\n\t    - **`7`**：表示所属组（group）的权限，`7` 对应于 `rwx`（读、写、执行）。\n\t    - **`5`**：表示其他用户（others）的权限，`5` 对应于 `r-x`（读、执行，但没有写权限）。\n\t因此，`sudo chmod -R 775 /home/ubuntu/blog/.deploy_git` 的作用是\n\t- 所有者（通常是 `ubuntu` 用户）对目录及其内容有读、写和执行权限。\n\t- 所属组的用户对目录及其内容有读、写和执行权限。\n\t- 其他用户对目录及其内容有读和执行权限，但没有写权限。\n\t\n\t==sudo chmod -R g+rwX /home/ubuntu/blog/.deploy_git==\n\t- **`chmod`**：用于更改文件或目录的权限。\n\t- **`-R`**：递归选项，表示命令会递归地应用于指定目录及其所有子目录和文件。\n\t- **`g+rwX`**：表示为所属组（group）添加读（`r`）、写（`w`）和执行（`X`）权限。\n\t因此，`sudo chmod -R g+rwX /home/ubuntu/blog/.deploy_git` 的作用是\n\t- 为所属组的用户添加读、写和执行权限。\n\t- 其他用户的权限保持不变。\n\n### 使用Nginx部署Hexo博客\n\n$Last Edited：2025.04.29/17:33$\n___\n配置防火墙，允许相关端口。可以在服务器安全组设置。\n```bash\nsudo ufw allow 'Nginx Full'  # 允许 HTTP (80) 和 HTTPS (443)\nsudo ufw reload\n```\n\n安装Nginx\n```bash\nsudo apt update\nsudo apt install nginx -y\n```\n\n创建 Nginx 配置文件\n```bash\nsudo nano /etc/nginx/sites-available/hexo-blog\n```\n\n添加以下内容（根据需求调整）\n```nginx                              \nserver {\n    listen 80;\n    server_name 154.8.222.175;  # 替换为你的域名或服务器 IP\n    root /home/ubuntu/blog/public;  # 指向 Hexo 生成的静态文件目录\n    index index.html;\n\n    location / {\n        try_files $uri $uri/ =404;\n    }\n\n    # 可选：启用 Gzip 压缩\n    gzip on;\n    gzip_types text/plain text/css application/json application/javascript text/xml application/xml appl>\n}\n```\n\n启用配置并禁用默认站点\n```bash\nsudo ln -s /etc/nginx/sites-available/hexo-blog /etc/nginx/sites-enabled\nsudo rm /etc/nginx/sites-enabled/default\n```\n\n参考[静态博客—Hexo#主题部署到GitHub](静态博客—Hexo#主题部署到GitHub)中的配置，小修了一下脚本文件`scripts/copy-theme.js`如下（直接用上面的应该也可以）：\n```yaml\nconst fs = require('fs-extra');\nconst path = require('path');\n\nhexo.on('generateBefore', () => {\n  const themeName = hexo.config.theme;\n  const sourcePath = path.join(hexo.base_dir, 'node_modules', `hexo-theme-${themeNa>\n  const targetPath = path.join(hexo.base_dir, 'themes', themeName);\n\n  // 清空目标目录（确保无残留冲突）\n  if (fs.existsSync(targetPath)) {\n    fs.removeSync(targetPath);\n  }\n\n  // 复制主题文件（含 source 资源）\n  try {\n    fs.copySync(sourcePath, targetPath, {\n      overwrite: true,\n      filter: (src) => !src.includes('node_modules')  // 排除嵌套 node_modules\n    });\n    hexo.log.info(`主题 ${themeName} 已复制到 themes 目录`);\n  } catch (err) {\n    hexo.log.error(`复制主题失败: ${err}`);\n  }\n});\n```\n\n打开Hexo根目录下`_config.yml`文件，检查url的配置，不设置或者如下设置都可以。*如果设置成其他不一致的url，在生成静态文件并访问相应地址时可能无法看到主题。*\n```yaml\nurl: http://154.8.222.175  # 使用服务器 IP 或域名\nroot: /\n```\n\n重新生成静态文件：\n```bash\nhexo clean && hexo generate\n```\n\n确保`public`文件目录可以被`Nginx`读取，模拟`Nginx`访问测试\n```bash\n# 切换到 www-data 用户尝试访问目录\nsudo -u www-data ls -l /home/ubuntu/blog/public\n# 应能正常列出文件，无权限错误\n```\n如果输出`ls: cannot access '/home/ubuntu/blog/public': Permission denied`就要修复`Nginx`访问的权限\n\n- [x] 权限修复过程——从根目录到目标路径的 **每一级目录** 都必须对 `www-data` 用户开放执行权限（`x`）。*（所以博客根目录放在用户目录外是不是好点？）*\n\n\t- 让`www-data`用户加入到`hexo_group`组中\n\t```bash\n\tsudo usermod -aG hexo_group www-data\n\t# 检查组内成员\n\tgetent group hexo_group\n\t```\n\n\t- 更改public目录的归属\n\t```bash\n\tsudo chown -R ubuntu:hexo_group /home/ubuntu/blog/public\n\t```\n\t\n\t- 修复权限（允许组和其他用户进入），哪一级目录不通给哪一级。\n\t```bash\n\tsudo chmod 755 /home/ubuntu\n\t```\n\t正确输出应该是：`drwxr-xr-x 11 ubuntu ubuntu 4096 Apr 29 11:21 /home/ubuntu`\n\t\n\t逐级检查能否访问。\n\t```bash\n\tsudo -u www-data ls /home/ubuntu\n\tsudo -u www-data ls /home/ubuntu/blog/public\n\tsudo -u www-data ls /home/ubuntu/blog\n\t```\n\t正确的话就会列出文件目录列表。\n\n测试并重启 Nginx\n```bash\nsudo nginx -t          # 检查语法\nsudo systemctl restart nginx\n```\n在浏览器中输入[服务器域名或IP](http://154.8.222.175/)查看部署情况。\n\n报错可以查看日志\n```bash\n# 错误日志\nsudo tail -f /var/log/nginx/error.log\n\n# 访问日志\nsudo tail -f /var/log/nginx/access.log\n```\n\n每次更新博客后，执行以下命令：\n```bash\ncd /home/ubuntu/blog\nhexo clean && hexo generate\nsudo systemctl restart nginx\n```","source":"_posts/2025-06-01-静态博客Hexo.md","raw":"---\ntitle: 静态博客—Hexo\ndate: 2025-06-01 10:34:58\nupdated: 2025-10-08 14:40:26\ncategories:\n  - [服务器&嵌入式平台操作, 工具]\ntags:\npermalink: 静态博客—hexo/\n---\n\n### 环境准备与Hexo安装\n\n$Last Edited：2025.04.28/20:41$\n___\n\n直接从apt下载，版本可能比较低，用这个方法可以选择合适的版本。\n**添加 NodeSource 的 Node.js 20.x 仓库**（你可以选择其他支持的版本，如 18.x 或 20.x）：\n```bash\n curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -\n```\n\n安装 **Node.js** 和 **npm**：\n```bash\nsudo apt-get install -y nodejs\n```\n\n验证：\n```bash\nnode -v\nnpm -v\n```\n\n使用 **npm** 全局安装 **Hexo**：\n```bash\nsudo npm install -g hexo-cli\n```\n\n安装完成后，检查 **Hexo** 版本：\n```bash\nhexo -v\n```\n\n 创建 **Hexo** 博客\n选择一个目录存放博客文件，例如 `/home/yourname/blog`，然后运行以下命令初始化 Hexo：\n```bash\nhexo init /home/yourname/blog\ncd /home/yourname/blog\nnpm install\n```\n\n在目录下，生成静态文件并启动本地服务器：\n```bash\nhexo generate\nhexo server\n```\n默认在`http://localhost:4000`运行。\n\n### Hexo部署到GitHub\n参考：\n[Ubuntu:Hexo+github搭建个人博客 | Akilarの糖果屋](https://akilar.top/posts/e5502ef6/)\n\n$Last Edited：2025.04.28/20:41$\n___\n\n- [x] GitHub Pages 仓库命名规则：\n    - **用户/组织站点**：仓库名 **必须** 为 `<username>.github.io`（例如 `cloak1522.github.io`），访问地址为 `https://<username>.github.io`。\n    - **项目站点**：仓库名可以是任意名称（例如 `418blog`），访问地址为 `https://<username>.github.io/<repo>`。\n在GitHub上新建一个名为418blog的仓库，确保Pages有关的设置正确。\n![Github设置pages.png](/images/Github设置pages.png)\n\n回到云服务器，在管理员模式下设置用户名和邮箱地址：\n```bash\nsudo passwd  \n# 然后会提示你输入新的UNIX密码，密码设置ok以后，我们进入管理员模式。输入：  \nsu\n```\n\n安装git：\n```bash\napt install git\n```\n\n配置git：\n```bash\ngit config --global user.name \"username\"  \ngit config --global user.email \"username@example.com\"  \n# 检查电脑是否已经有 SSH keys  \nssh-keygen -t rsa -C youremail@example.com  \n# -C后面加你在github的用户名邮箱，这样公钥才会被github认可  \nless ~/.ssh/id_rsa.pub  \n# 查看公钥内容稍后加入Github账户的sshkey中\n```\n\n大概显示如下，按q退出。\n```text\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCkCIY3F5wQ2SaJU6a8AzKwxnlM4vkarK2R8uYvgunEZyx6rXUBTPXgry9Vtq+rOSZ+wowG1Gpkte4DKeQV0RHQeVbhW5daHt4INjTCopSCpLA7g1ToZ0VD3A7VphFuioj/SnpAkUY7ZZYr1X8+iU989oMHazrRqs5Ji1QAFlVKhJ0LTALMqDpj6EpQRSNzLriDnBp27sFHSrVkNMEguIAe+7/Mpiew6v1v/yIdIxsci+q5du+Yka8nviSgPH/6FJo1SCp+RITkIvV/M+nrmawEP9KqP0koiRJa1SuXmsBxHpeJMKW8U+eySYqNJJsotoEjluRFnnCz7U03Vh6oe0uwjZf5c//aephrJduZxR9Y8OzomXqSwngTBh21AEPpIyksSFV7GKYQ9NG7/EmZS4E1VTsrZoe/wQKSnsmkZqtgqSLKY0JY1i0T1ogPg6ApmEZKtKVcBcJSqrJCqcyY9tzN4vcBnz7E4dKeFscgPNOh6tZCPDvGmMy2GREpW5/5H6c= obsever20210103@gmail.com\n/root/.ssh/id_rsa.pub (END)\n```\n\n添加到GitHub账户的SSH keys中：\n![GitHub的SSHkey.png](/images/GitHub的SSHkey.png)\n\n测试连接情况，第一次一般是这样的：\n```bash\nroot@VM-8-3-ubuntu:/home/ubuntu/blog# ssh -T git@github.com\nThe authenticity of host 'github.com (20.205.243.166)' can't be established.\nED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.\nThis key is not known by any other names\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added 'github.com' (ED25519) to the list of known hosts.\nHi cloak1522! You've successfully authenticated, but GitHub does not provide shell access.\nroot@VM-8-3-ubuntu:/home/ubuntu/blog# ssh -T git@github.com\nHi cloak1522! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n在Hexo根目录下，有一个`_config.yml`文件，存放了相关配置信息，在其中添加：\n```yaml\nurl: https://cloak1522.github.io/418blog\nroot: /418blog/\n\ndeploy:\n  type: git\n  repository: git@github.com:cloak1522/418blog.git\n  branch: main\n```\n\n清理并重新部署：\n```bash\nhexo clean && hexo generate && hexo deploy\n```\n\n部署完成后，访问(https://cloak1522.github.io/418blog)可查看。\n\n### 主题部署到GitHub\n\n$Last Edited：2025.04.28/20:41$\n___\n\n首先使用`npm`安装需要的主题，以`butterfly`为例。在Hexo根目录下，执行：\n```bash\nnpm install hexo-theme-butterfly --save\n```\n\n在 `_config.yml` 中指定主题名称（与 npm 包名一致）：\n```bash\ntheme: butterfly\n```\n\n此时，如果你的 `themes` 目录为空，但通过 `hexo server` 在本地能看到主题，说明你使用的是 **通过 `npm`安装的主题**（例如 `hexo-theme-landscape`），而非传统的克隆主题仓库方式。这种情况下，主题文件不会直接存放在 `themes` 目录中，而是存储在 `node_modules` 目录下。\n因此使用脚本将主题资源复制到静态目录。\n\n在 Hexo 根目录创建 `scripts` 文件夹（如果不存在）：\n```bash\nmkdir scrips\n```\n\n创建脚本文件 `scripts/copy-theme.js`：\n```javascript\nconst fs = require('fs-extra');\nconst path = require('path');\n\nhexo.on('generateBefore', () => {\n  const themeName = hexo.config.theme;\n  const sourcePath = path.join(hexo.base_dir, 'node_modules', `hexo-theme-${themeName}`);\n  const targetPath = path.join(hexo.base_dir, 'themes', themeName);\n\n  // 检查源路径是否存在\n  if (!fs.existsSync(sourcePath)) {\n    hexo.log.error(`主题源路径不存在: ${sourcePath}`);\n    return;\n  }\n\n  // 确保 themes 目录存在\n  fs.ensureDirSync(path.join(hexo.base_dir, 'themes'));\n\n  // 清空目标目录（确保无残留冲突）\n  if (fs.existsSync(targetPath)) {\n    fs.removeSync(targetPath);\n  }\n\n  // 复制主题文件（含 source 资源）\n  try {\n    fs.copySync(sourcePath, targetPath, {\n      overwrite: true,\n      filter: (src, dest) => {\n        // 排除嵌套的 node_modules，但允许主题根目录下的文件\n        const relativePath = path.relative(sourcePath, src);\n        const isNestedNodeModules = relativePath.includes('node_modules') && relativePath !== 'node_modules';\n        return !isNestedNodeModules;\n      }\n    });\n\t \n    // 验证复制是否成功\n    if (fs.existsSync(targetPath)) {\n      const files = fs.readdirSync(targetPath);\n      hexo.log.info(`主题 ${themeName} 已成功复制到 themes 目录，包含 ${files.length} 个文件/目录`);\n    } else {\n      hexo.log.error(`主题复制失败：目标目录不存在`);\n    }\n  } catch (err) {\n    hexo.log.error(`复制主题失败: ${err.message}`);\n    hexo.log.error(`源路径: ${sourcePath}`);\n    hexo.log.error(`目标路径: ${targetPath}`);\n  }\n});\n```\n- [x] 脚本文件的详细解释\n\t1. **依赖导入**\n\t```javascript\n\tconst fs = require('fs-extra');\n\tconst path = require('path');\n\t```\n\t- `fs-extra`: 增强版的文件系统操作库，提供了更多便利的文件操作方法\n\t- `path`: Node.js 内置的路径处理模块\n\t\n\t2. **事件监听器**\n\t```javascript\n\thexo.on('generateBefore', () => {\n\t```\n\t- 监听 Hexo 的 `generateBefore` 事件\n\t- 这个事件在 Hexo 开始生成静态文件之前触发\n\t- 确保主题文件在生成过程开始前就已经准备好\n\t\n\t3. **路径配置**\n\t```javascript\n\tconst themeName = hexo.config.theme;\n\tconst sourcePath = path.join(hexo.base_dir, 'node_modules', `hexo-theme-${themeName}`);\n\tconst targetPath = path.join(hexo.base_dir, 'themes', themeName);\n\t```\n\t- `themeName`: 从 Hexo 配置中获取当前使用的主题名称\n\t- `sourcePath`: 主题在 `node_modules` 中的位置\n\t- `targetPath`: 主题应该复制到的目标位置\n\t\n\t4. **源路径验证**\n\t```javascript\n\tif (!fs.existsSync(sourcePath)) {\n\t  hexo.log.error(`主题源路径不存在: ${sourcePath}`);\n\t  return;\n\t}\n\t```\n\t- 检查主题是否真的存在于 `node_modules` 中\n\t- 如果不存在，记录错误并退出\n\t\n\t5. **目录准备**\n\t```javascript\n\tfs.ensureDirSync(path.join(hexo.base_dir, 'themes'));\n\t\n\tif (fs.existsSync(targetPath)) {\n\t  fs.removeSync(targetPath);\n\t}\n\t```\n\t- 确保 `themes` 目录存在\n\t- 如果目标路径已存在，先删除以避免冲突\n\t\n\t6. **主题文件复制**\n\t```javascript\n\tfs.copySync(sourcePath, targetPath, {\n\t  overwrite: true,\n\t  filter: (src, dest) => {\n\t    const relativePath = path.relative(sourcePath, src);\n\t    const isNestedNodeModules = relativePath.includes('node_modules') && relativePath !== 'node_modules';\n\t    return !isNestedNodeModules;\n\t  }\n\t});\n\t```\n\t**复制选项说明：**\n\t- `overwrite: true`: 允许覆盖已存在的文件\n\t- `filter`: 过滤函数，控制哪些文件被复制\n\t\n\t**过滤逻辑：**\n\t- 排除嵌套的 `node_modules` 目录\n\t- 允许主题根目录下的所有其他文件和目录\n\t- 这避免了复制不必要的依赖文件\n\t\n\t7. **复制结果验证**\n\t```javascript\n\tif (fs.existsSync(targetPath)) {\n\t  const files = fs.readdirSync(targetPath);\n\t  hexo.log.info(`主题 ${themeName} 已成功复制到 themes 目录，包含 ${files.length} 个文件/目录`);\n\t} else {\n\t  hexo.log.error(`主题复制失败：目标目录不存在`);\n\t}\n\t```\n\t- 验证复制是否成功\n\t- 统计复制的文件数量\n\t- 提供详细的日志信息\n\t\n\t8. **错误处理**\n\t```javascript\n\tcatch (err) {\n\t  hexo.log.error(`复制主题失败: ${err.message}`);\n\t  hexo.log.error(`源路径: ${sourcePath}`);\n\t  hexo.log.error(`目标路径: ${targetPath}`);\n\t}\n\t```\n\t- 捕获并记录复制过程中的任何错误\n\t- 提供详细的错误信息和路径信息，便于调试\n\n安装依赖包：\n```bash\nnpm install fs-extra --save\n```\n\n重新生成静态文件：\n```bash\nhexo clean && hexo generate\n```\n\n检查`theme`目录：\n```bash\nls themes/butterfly\n```\n\n输出如下：\n```bash\nroot@VM-8-3-ubuntu:/home/ubuntu/blog# ls themes/butterfly\n_config.yml  layout   package.json  README_CN.md  scripts\nlanguages    LICENSE  plugins.yml   README.md     source\n```\n\n此时再部署到Github，应该可以看到主题：\n```bash\nhexo deploy\n```\n\n### Hexo目录的权限\n\n$Last Edited：2025.04.28/20:42$\n___\n\nGit 默认会检查仓库目录的所有权，如果目录所有者与当前用户不一致（常见于跨用户操作或 `sudo` 误用），会触发 `dubious ownership` 错误。\n以下以`.deploy_git`文件夹为例，其他情况也同理。\n\n推荐的做法是将目录加入Git的全局安全列表：\n```bash\ngit config --global --add safe.directory /home/ubuntu/blog/.deploy_git\n```\n\n还可以改变目录的所有者，并赋予权限。检查目录所有者用`ls -ld`指令。首先创建一个用户组：\n```bash\nsudo groupadd hexo_group\n```\n\n将 ubuntu 用户和 root 用户加入该用户组：\n```bash\nsudo usermod -aG hexo_group ubuntu\nsudo usermod -aG hexo_group root\n```\n\n更改目录的所属组：\n```bash\nsudo chown -R ubuntu:hexo_group /home/ubuntu/blog/.deploy_git\n```\n\n设置目录和文件的权限：\n```bash\nsudo chmod -R 775 /home/ubuntu/blog/.deploy_git\nsudo chmod -R g+rwX /home/ubuntu/blog/.deploy_git\n```\n- [x] 指令的具体解释：\n\t==sudo chown -R ubuntu:hexo_group /home/ubuntu/blog/.deploy_git==\n\t- **`chown`**：是 \"change owner\" 的缩写，用于更改文件或目录的所有者和所属组。\n\t- **`-R`**：是递归选项（recursive），表示命令会递归地应用于指定目录及其所有子目录和文件。这意味着不仅会更改 `/home/ubuntu/blog/.deploy_git` 目录的所有者和所属组，还会更改该目录下所有文件和子目录的所有者和所属组。\n\t-  **`ubuntu:hexo_group`**：\n    - `ubuntu` 是新所有者的用户名。\n    - `hexo_group` 是新所属组的组名。\n    - 这部分指定了新的所有者和所属组。格式为 `用户:组`。\n\t \n\t==sudo chmod -R 775 /home/ubuntu/blog/.deploy_git==\n\t- **`chmod`**：用于更改文件或目录的权限。\n\t- **`-R`**：递归选项，表示命令会递归地应用于指定目录及其所有子目录和文件。\n\t- **`775`**：是一个八进制数字，表示权限设置。具体含义如下\n\t    - **`7`**：表示所有者（owner）的权限，`7` 对应于 `rwx`（读、写、执行）。\n\t    - **`7`**：表示所属组（group）的权限，`7` 对应于 `rwx`（读、写、执行）。\n\t    - **`5`**：表示其他用户（others）的权限，`5` 对应于 `r-x`（读、执行，但没有写权限）。\n\t因此，`sudo chmod -R 775 /home/ubuntu/blog/.deploy_git` 的作用是\n\t- 所有者（通常是 `ubuntu` 用户）对目录及其内容有读、写和执行权限。\n\t- 所属组的用户对目录及其内容有读、写和执行权限。\n\t- 其他用户对目录及其内容有读和执行权限，但没有写权限。\n\t\n\t==sudo chmod -R g+rwX /home/ubuntu/blog/.deploy_git==\n\t- **`chmod`**：用于更改文件或目录的权限。\n\t- **`-R`**：递归选项，表示命令会递归地应用于指定目录及其所有子目录和文件。\n\t- **`g+rwX`**：表示为所属组（group）添加读（`r`）、写（`w`）和执行（`X`）权限。\n\t因此，`sudo chmod -R g+rwX /home/ubuntu/blog/.deploy_git` 的作用是\n\t- 为所属组的用户添加读、写和执行权限。\n\t- 其他用户的权限保持不变。\n\n### 使用Nginx部署Hexo博客\n\n$Last Edited：2025.04.29/17:33$\n___\n配置防火墙，允许相关端口。可以在服务器安全组设置。\n```bash\nsudo ufw allow 'Nginx Full'  # 允许 HTTP (80) 和 HTTPS (443)\nsudo ufw reload\n```\n\n安装Nginx\n```bash\nsudo apt update\nsudo apt install nginx -y\n```\n\n创建 Nginx 配置文件\n```bash\nsudo nano /etc/nginx/sites-available/hexo-blog\n```\n\n添加以下内容（根据需求调整）\n```nginx                              \nserver {\n    listen 80;\n    server_name 154.8.222.175;  # 替换为你的域名或服务器 IP\n    root /home/ubuntu/blog/public;  # 指向 Hexo 生成的静态文件目录\n    index index.html;\n\n    location / {\n        try_files $uri $uri/ =404;\n    }\n\n    # 可选：启用 Gzip 压缩\n    gzip on;\n    gzip_types text/plain text/css application/json application/javascript text/xml application/xml appl>\n}\n```\n\n启用配置并禁用默认站点\n```bash\nsudo ln -s /etc/nginx/sites-available/hexo-blog /etc/nginx/sites-enabled\nsudo rm /etc/nginx/sites-enabled/default\n```\n\n参考[静态博客—Hexo#主题部署到GitHub](静态博客—Hexo#主题部署到GitHub)中的配置，小修了一下脚本文件`scripts/copy-theme.js`如下（直接用上面的应该也可以）：\n```yaml\nconst fs = require('fs-extra');\nconst path = require('path');\n\nhexo.on('generateBefore', () => {\n  const themeName = hexo.config.theme;\n  const sourcePath = path.join(hexo.base_dir, 'node_modules', `hexo-theme-${themeNa>\n  const targetPath = path.join(hexo.base_dir, 'themes', themeName);\n\n  // 清空目标目录（确保无残留冲突）\n  if (fs.existsSync(targetPath)) {\n    fs.removeSync(targetPath);\n  }\n\n  // 复制主题文件（含 source 资源）\n  try {\n    fs.copySync(sourcePath, targetPath, {\n      overwrite: true,\n      filter: (src) => !src.includes('node_modules')  // 排除嵌套 node_modules\n    });\n    hexo.log.info(`主题 ${themeName} 已复制到 themes 目录`);\n  } catch (err) {\n    hexo.log.error(`复制主题失败: ${err}`);\n  }\n});\n```\n\n打开Hexo根目录下`_config.yml`文件，检查url的配置，不设置或者如下设置都可以。*如果设置成其他不一致的url，在生成静态文件并访问相应地址时可能无法看到主题。*\n```yaml\nurl: http://154.8.222.175  # 使用服务器 IP 或域名\nroot: /\n```\n\n重新生成静态文件：\n```bash\nhexo clean && hexo generate\n```\n\n确保`public`文件目录可以被`Nginx`读取，模拟`Nginx`访问测试\n```bash\n# 切换到 www-data 用户尝试访问目录\nsudo -u www-data ls -l /home/ubuntu/blog/public\n# 应能正常列出文件，无权限错误\n```\n如果输出`ls: cannot access '/home/ubuntu/blog/public': Permission denied`就要修复`Nginx`访问的权限\n\n- [x] 权限修复过程——从根目录到目标路径的 **每一级目录** 都必须对 `www-data` 用户开放执行权限（`x`）。*（所以博客根目录放在用户目录外是不是好点？）*\n\n\t- 让`www-data`用户加入到`hexo_group`组中\n\t```bash\n\tsudo usermod -aG hexo_group www-data\n\t# 检查组内成员\n\tgetent group hexo_group\n\t```\n\n\t- 更改public目录的归属\n\t```bash\n\tsudo chown -R ubuntu:hexo_group /home/ubuntu/blog/public\n\t```\n\t\n\t- 修复权限（允许组和其他用户进入），哪一级目录不通给哪一级。\n\t```bash\n\tsudo chmod 755 /home/ubuntu\n\t```\n\t正确输出应该是：`drwxr-xr-x 11 ubuntu ubuntu 4096 Apr 29 11:21 /home/ubuntu`\n\t\n\t逐级检查能否访问。\n\t```bash\n\tsudo -u www-data ls /home/ubuntu\n\tsudo -u www-data ls /home/ubuntu/blog/public\n\tsudo -u www-data ls /home/ubuntu/blog\n\t```\n\t正确的话就会列出文件目录列表。\n\n测试并重启 Nginx\n```bash\nsudo nginx -t          # 检查语法\nsudo systemctl restart nginx\n```\n在浏览器中输入[服务器域名或IP](http://154.8.222.175/)查看部署情况。\n\n报错可以查看日志\n```bash\n# 错误日志\nsudo tail -f /var/log/nginx/error.log\n\n# 访问日志\nsudo tail -f /var/log/nginx/access.log\n```\n\n每次更新博客后，执行以下命令：\n```bash\ncd /home/ubuntu/blog\nhexo clean && hexo generate\nsudo systemctl restart nginx\n```","slug":"2025-06-01-静态博客Hexo","published":1,"__permalink":"静态博客—hexo/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0nv001wzovd3jg15mt2","content":"<h3 id=\"环境准备与Hexo安装\"><a href=\"#环境准备与Hexo安装\" class=\"headerlink\" title=\"环境准备与Hexo安装\"></a>环境准备与Hexo安装</h3><p>$Last Edited：2025.04.28&#x2F;20:41$</p>\n<hr>\n<p>直接从apt下载，版本可能比较低，用这个方法可以选择合适的版本。<br><strong>添加 NodeSource 的 Node.js 20.x 仓库</strong>（你可以选择其他支持的版本，如 18.x 或 20.x）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://deb.nodesource.com/setup_20.x | <span class=\"built_in\">sudo</span> -E bash -</span><br></pre></td></tr></table></figure>\n\n<p>安装 <strong>Node.js</strong> 和 <strong>npm</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install -y nodejs</span><br></pre></td></tr></table></figure>\n\n<p>验证：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n\n<p>使用 <strong>npm</strong> 全局安装 <strong>Hexo</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，检查 <strong>Hexo</strong> 版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo -v</span><br></pre></td></tr></table></figure>\n\n<p> 创建 <strong>Hexo</strong> 博客<br>选择一个目录存放博客文件，例如 <code>/home/yourname/blog</code>，然后运行以下命令初始化 Hexo：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init /home/yourname/blog</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /home/yourname/blog</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>在目录下，生成静态文件并启动本地服务器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>默认在<code>http://localhost:4000</code>运行。</p>\n<h3 id=\"Hexo部署到GitHub\"><a href=\"#Hexo部署到GitHub\" class=\"headerlink\" title=\"Hexo部署到GitHub\"></a>Hexo部署到GitHub</h3><p>参考：<br><a href=\"https://akilar.top/posts/e5502ef6/\">Ubuntu:Hexo+github搭建个人博客 | Akilarの糖果屋</a></p>\n<p>$Last Edited：2025.04.28&#x2F;20:41$</p>\n<hr>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> GitHub Pages 仓库命名规则：<ul>\n<li><strong>用户&#x2F;组织站点</strong>：仓库名 <strong>必须</strong> 为 <code>&lt;username&gt;.github.io</code>（例如 <code>cloak1522.github.io</code>），访问地址为 <code>https://&lt;username&gt;.github.io</code>。</li>\n<li><strong>项目站点</strong>：仓库名可以是任意名称（例如 <code>418blog</code>），访问地址为 <code>https://&lt;username&gt;.github.io/&lt;repo&gt;</code>。<br>在GitHub上新建一个名为418blog的仓库，确保Pages有关的设置正确。<br><img src=\"/418blog/images/Github%E8%AE%BE%E7%BD%AEpages.png\" alt=\"Github设置pages.png\"></li>\n</ul>\n</li>\n</ul>\n<p>回到云服务器，在管理员模式下设置用户名和邮箱地址：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> passwd  </span><br><span class=\"line\"><span class=\"comment\"># 然后会提示你输入新的UNIX密码，密码设置ok以后，我们进入管理员模式。输入：  </span></span><br><span class=\"line\">su</span><br></pre></td></tr></table></figure>\n\n<p>安装git：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install git</span><br></pre></td></tr></table></figure>\n\n<p>配置git：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;username&quot;</span>  </span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;username@example.com&quot;</span>  </span><br><span class=\"line\"><span class=\"comment\"># 检查电脑是否已经有 SSH keys  </span></span><br><span class=\"line\">ssh-keygen -t rsa -C youremail@example.com  </span><br><span class=\"line\"><span class=\"comment\"># -C后面加你在github的用户名邮箱，这样公钥才会被github认可  </span></span><br><span class=\"line\">less ~/.ssh/id_rsa.pub  </span><br><span class=\"line\"><span class=\"comment\"># 查看公钥内容稍后加入Github账户的sshkey中</span></span><br></pre></td></tr></table></figure>\n\n<p>大概显示如下，按q退出。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCkCIY3F5wQ2SaJU6a8AzKwxnlM4vkarK2R8uYvgunEZyx6rXUBTPXgry9Vtq+rOSZ+wowG1Gpkte4DKeQV0RHQeVbhW5daHt4INjTCopSCpLA7g1ToZ0VD3A7VphFuioj/SnpAkUY7ZZYr1X8+iU989oMHazrRqs5Ji1QAFlVKhJ0LTALMqDpj6EpQRSNzLriDnBp27sFHSrVkNMEguIAe+7/Mpiew6v1v/yIdIxsci+q5du+Yka8nviSgPH/6FJo1SCp+RITkIvV/M+nrmawEP9KqP0koiRJa1SuXmsBxHpeJMKW8U+eySYqNJJsotoEjluRFnnCz7U03Vh6oe0uwjZf5c//aephrJduZxR9Y8OzomXqSwngTBh21AEPpIyksSFV7GKYQ9NG7/EmZS4E1VTsrZoe/wQKSnsmkZqtgqSLKY0JY1i0T1ogPg6ApmEZKtKVcBcJSqrJCqcyY9tzN4vcBnz7E4dKeFscgPNOh6tZCPDvGmMy2GREpW5/5H6c= obsever20210103@gmail.com</span><br><span class=\"line\">/root/.ssh/id_rsa.pub (END)</span><br></pre></td></tr></table></figure>\n\n<p>添加到GitHub账户的SSH keys中：<br><img src=\"/418blog/images/GitHub%E7%9A%84SSHkey.png\" alt=\"GitHub的SSHkey.png\"></p>\n<p>测试连接情况，第一次一般是这样的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM-8-3-ubuntu:/home/ubuntu/blog# ssh -T git@github.com</span><br><span class=\"line\">The authenticity of host <span class=\"string\">&#x27;github.com (20.205.243.166)&#x27;</span> can<span class=\"string\">&#x27;t be established.</span></span><br><span class=\"line\"><span class=\"string\">ED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.</span></span><br><span class=\"line\"><span class=\"string\">This key is not known by any other names</span></span><br><span class=\"line\"><span class=\"string\">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span></span><br><span class=\"line\"><span class=\"string\">Warning: Permanently added &#x27;</span>github.com<span class=\"string\">&#x27; (ED25519) to the list of known hosts.</span></span><br><span class=\"line\"><span class=\"string\">Hi cloak1522! You&#x27;</span>ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class=\"line\">root@VM-8-3-ubuntu:/home/ubuntu/blog# ssh -T git@github.com</span><br><span class=\"line\">Hi cloak1522! You<span class=\"string\">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>\n\n<p>在Hexo根目录下，有一个<code>_config.yml</code>文件，存放了相关配置信息，在其中添加：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">https://cloak1522.github.io/418blog</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/418blog/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span> <span class=\"string\">git@github.com:cloak1522/418blog.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">main</span></span><br></pre></td></tr></table></figure>\n\n<p>清理并重新部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>部署完成后，访问(<a href=\"https://cloak1522.github.io/418blog)%E5%8F%AF%E6%9F%A5%E7%9C%8B%E3%80%82\">https://cloak1522.github.io/418blog)可查看。</a></p>\n<h3 id=\"主题部署到GitHub\"><a href=\"#主题部署到GitHub\" class=\"headerlink\" title=\"主题部署到GitHub\"></a>主题部署到GitHub</h3><p>$Last Edited：2025.04.28&#x2F;20:41$</p>\n<hr>\n<p>首先使用<code>npm</code>安装需要的主题，以<code>butterfly</code>为例。在Hexo根目录下，执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-theme-butterfly --save</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>_config.yml</code> 中指定主题名称（与 npm 包名一致）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: butterfly</span><br></pre></td></tr></table></figure>\n\n<p>此时，如果你的 <code>themes</code> 目录为空，但通过 <code>hexo server</code> 在本地能看到主题，说明你使用的是 <strong>通过 <code>npm</code>安装的主题</strong>（例如 <code>hexo-theme-landscape</code>），而非传统的克隆主题仓库方式。这种情况下，主题文件不会直接存放在 <code>themes</code> 目录中，而是存储在 <code>node_modules</code> 目录下。<br>因此使用脚本将主题资源复制到静态目录。</p>\n<p>在 Hexo 根目录创建 <code>scripts</code> 文件夹（如果不存在）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> scrips</span><br></pre></td></tr></table></figure>\n\n<p>创建脚本文件 <code>scripts/copy-theme.js</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs-extra&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">hexo.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;generateBefore&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> themeName = hexo.<span class=\"property\">config</span>.<span class=\"property\">theme</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> sourcePath = path.<span class=\"title function_\">join</span>(hexo.<span class=\"property\">base_dir</span>, <span class=\"string\">&#x27;node_modules&#x27;</span>, <span class=\"string\">`hexo-theme-<span class=\"subst\">$&#123;themeName&#125;</span>`</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> targetPath = path.<span class=\"title function_\">join</span>(hexo.<span class=\"property\">base_dir</span>, <span class=\"string\">&#x27;themes&#x27;</span>, themeName);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 检查源路径是否存在</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!fs.<span class=\"title function_\">existsSync</span>(sourcePath)) &#123;</span><br><span class=\"line\">    hexo.<span class=\"property\">log</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`主题源路径不存在: <span class=\"subst\">$&#123;sourcePath&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 确保 themes 目录存在</span></span><br><span class=\"line\">  fs.<span class=\"title function_\">ensureDirSync</span>(path.<span class=\"title function_\">join</span>(hexo.<span class=\"property\">base_dir</span>, <span class=\"string\">&#x27;themes&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 清空目标目录（确保无残留冲突）</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fs.<span class=\"title function_\">existsSync</span>(targetPath)) &#123;</span><br><span class=\"line\">    fs.<span class=\"title function_\">removeSync</span>(targetPath);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 复制主题文件（含 source 资源）</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    fs.<span class=\"title function_\">copySync</span>(sourcePath, targetPath, &#123;</span><br><span class=\"line\">      <span class=\"attr\">overwrite</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">filter</span>: <span class=\"function\">(<span class=\"params\">src, dest</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 排除嵌套的 node_modules，但允许主题根目录下的文件</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> relativePath = path.<span class=\"title function_\">relative</span>(sourcePath, src);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> isNestedNodeModules = relativePath.<span class=\"title function_\">includes</span>(<span class=\"string\">&#x27;node_modules&#x27;</span>) &amp;&amp; relativePath !== <span class=\"string\">&#x27;node_modules&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> !isNestedNodeModules;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"comment\">// 验证复制是否成功</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fs.<span class=\"title function_\">existsSync</span>(targetPath)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> files = fs.<span class=\"title function_\">readdirSync</span>(targetPath);</span><br><span class=\"line\">      hexo.<span class=\"property\">log</span>.<span class=\"title function_\">info</span>(<span class=\"string\">`主题 <span class=\"subst\">$&#123;themeName&#125;</span> 已成功复制到 themes 目录，包含 <span class=\"subst\">$&#123;files.length&#125;</span> 个文件/目录`</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      hexo.<span class=\"property\">log</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`主题复制失败：目标目录不存在`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    hexo.<span class=\"property\">log</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`复制主题失败: <span class=\"subst\">$&#123;err.message&#125;</span>`</span>);</span><br><span class=\"line\">    hexo.<span class=\"property\">log</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`源路径: <span class=\"subst\">$&#123;sourcePath&#125;</span>`</span>);</span><br><span class=\"line\">    hexo.<span class=\"property\">log</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`目标路径: <span class=\"subst\">$&#123;targetPath&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n脚本文件的详细解释</p>\n<ol>\n<li><strong>依赖导入</strong>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs-extra&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li><code>fs-extra</code>: 增强版的文件系统操作库，提供了更多便利的文件操作方法</li>\n<li><code>path</code>: Node.js 内置的路径处理模块</li>\n</ul>\n<ol start=\"2\">\n<li><strong>事件监听器</strong>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;generateBefore&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>监听 Hexo 的 <code>generateBefore</code> 事件</li>\n<li>这个事件在 Hexo 开始生成静态文件之前触发</li>\n<li>确保主题文件在生成过程开始前就已经准备好</li>\n</ul>\n<ol start=\"3\">\n<li><strong>路径配置</strong>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> themeName = hexo.<span class=\"property\">config</span>.<span class=\"property\">theme</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sourcePath = path.<span class=\"title function_\">join</span>(hexo.<span class=\"property\">base_dir</span>, <span class=\"string\">&#x27;node_modules&#x27;</span>, <span class=\"string\">`hexo-theme-<span class=\"subst\">$&#123;themeName&#125;</span>`</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> targetPath = path.<span class=\"title function_\">join</span>(hexo.<span class=\"property\">base_dir</span>, <span class=\"string\">&#x27;themes&#x27;</span>, themeName);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li><code>themeName</code>: 从 Hexo 配置中获取当前使用的主题名称</li>\n<li><code>sourcePath</code>: 主题在 <code>node_modules</code> 中的位置</li>\n<li><code>targetPath</code>: 主题应该复制到的目标位置</li>\n</ul>\n<ol start=\"4\">\n<li><strong>源路径验证</strong>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!fs.<span class=\"title function_\">existsSync</span>(sourcePath)) &#123;</span><br><span class=\"line\">  hexo.<span class=\"property\">log</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`主题源路径不存在: <span class=\"subst\">$&#123;sourcePath&#125;</span>`</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>检查主题是否真的存在于 <code>node_modules</code> 中</li>\n<li>如果不存在，记录错误并退出</li>\n</ul>\n<ol start=\"5\">\n<li><strong>目录准备</strong>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.<span class=\"title function_\">ensureDirSync</span>(path.<span class=\"title function_\">join</span>(hexo.<span class=\"property\">base_dir</span>, <span class=\"string\">&#x27;themes&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (fs.<span class=\"title function_\">existsSync</span>(targetPath)) &#123;</span><br><span class=\"line\">  fs.<span class=\"title function_\">removeSync</span>(targetPath);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>确保 <code>themes</code> 目录存在</li>\n<li>如果目标路径已存在，先删除以避免冲突</li>\n</ul>\n<ol start=\"6\">\n<li><strong>主题文件复制</strong>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.<span class=\"title function_\">copySync</span>(sourcePath, targetPath, &#123;</span><br><span class=\"line\">  <span class=\"attr\">overwrite</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">filter</span>: <span class=\"function\">(<span class=\"params\">src, dest</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> relativePath = path.<span class=\"title function_\">relative</span>(sourcePath, src);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> isNestedNodeModules = relativePath.<span class=\"title function_\">includes</span>(<span class=\"string\">&#x27;node_modules&#x27;</span>) &amp;&amp; relativePath !== <span class=\"string\">&#x27;node_modules&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !isNestedNodeModules;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n  <strong>复制选项说明：</strong></li>\n</ol>\n<ul>\n<li><code>overwrite: true</code>: 允许覆盖已存在的文件</li>\n<li><code>filter</code>: 过滤函数，控制哪些文件被复制</li>\n</ul>\n<p>  <strong>过滤逻辑：</strong></p>\n<ul>\n<li>排除嵌套的 <code>node_modules</code> 目录</li>\n<li>允许主题根目录下的所有其他文件和目录</li>\n<li>这避免了复制不必要的依赖文件</li>\n</ul>\n<ol start=\"7\">\n<li><strong>复制结果验证</strong>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (fs.<span class=\"title function_\">existsSync</span>(targetPath)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> files = fs.<span class=\"title function_\">readdirSync</span>(targetPath);</span><br><span class=\"line\">  hexo.<span class=\"property\">log</span>.<span class=\"title function_\">info</span>(<span class=\"string\">`主题 <span class=\"subst\">$&#123;themeName&#125;</span> 已成功复制到 themes 目录，包含 <span class=\"subst\">$&#123;files.length&#125;</span> 个文件/目录`</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  hexo.<span class=\"property\">log</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`主题复制失败：目标目录不存在`</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>验证复制是否成功</li>\n<li>统计复制的文件数量</li>\n<li>提供详细的日志信息</li>\n</ul>\n<ol start=\"8\">\n<li><strong>错误处理</strong>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">  hexo.<span class=\"property\">log</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`复制主题失败: <span class=\"subst\">$&#123;err.message&#125;</span>`</span>);</span><br><span class=\"line\">  hexo.<span class=\"property\">log</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`源路径: <span class=\"subst\">$&#123;sourcePath&#125;</span>`</span>);</span><br><span class=\"line\">  hexo.<span class=\"property\">log</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`目标路径: <span class=\"subst\">$&#123;targetPath&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>捕获并记录复制过程中的任何错误</li>\n<li>提供详细的错误信息和路径信息，便于调试</li>\n</ul>\n</li>\n</ul>\n<p>安装依赖包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install fs-extra --save</span><br></pre></td></tr></table></figure>\n\n<p>重新生成静态文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>检查<code>theme</code>目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> themes/butterfly</span><br></pre></td></tr></table></figure>\n\n<p>输出如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM-8-3-ubuntu:/home/ubuntu/blog# <span class=\"built_in\">ls</span> themes/butterfly</span><br><span class=\"line\">_config.yml  layout   package.json  README_CN.md  scripts</span><br><span class=\"line\">languages    LICENSE  plugins.yml   README.md     <span class=\"built_in\">source</span></span><br></pre></td></tr></table></figure>\n\n<p>此时再部署到Github，应该可以看到主题：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Hexo目录的权限\"><a href=\"#Hexo目录的权限\" class=\"headerlink\" title=\"Hexo目录的权限\"></a>Hexo目录的权限</h3><p>$Last Edited：2025.04.28&#x2F;20:42$</p>\n<hr>\n<p>Git 默认会检查仓库目录的所有权，如果目录所有者与当前用户不一致（常见于跨用户操作或 <code>sudo</code> 误用），会触发 <code>dubious ownership</code> 错误。<br>以下以<code>.deploy_git</code>文件夹为例，其他情况也同理。</p>\n<p>推荐的做法是将目录加入Git的全局安全列表：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --add safe.directory /home/ubuntu/blog/.deploy_git</span><br></pre></td></tr></table></figure>\n\n<p>还可以改变目录的所有者，并赋予权限。检查目录所有者用<code>ls -ld</code>指令。首先创建一个用户组：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> groupadd hexo_group</span><br></pre></td></tr></table></figure>\n\n<p>将 ubuntu 用户和 root 用户加入该用户组：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> usermod -aG hexo_group ubuntu</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> usermod -aG hexo_group root</span><br></pre></td></tr></table></figure>\n\n<p>更改目录的所属组：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chown</span> -R ubuntu:hexo_group /home/ubuntu/blog/.deploy_git</span><br></pre></td></tr></table></figure>\n\n<p>设置目录和文件的权限：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chmod</span> -R 775 /home/ubuntu/blog/.deploy_git</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chmod</span> -R g+rwX /home/ubuntu/blog/.deploy_git</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n指令的具体解释：<br>  &#x3D;&#x3D;sudo chown -R ubuntu:hexo_group &#x2F;home&#x2F;ubuntu&#x2F;blog&#x2F;.deploy_git&#x3D;&#x3D;</p>\n<ul>\n<li>**<code>chown</code>**：是 “change owner” 的缩写，用于更改文件或目录的所有者和所属组。</li>\n<li>**<code>-R</code>**：是递归选项（recursive），表示命令会递归地应用于指定目录及其所有子目录和文件。这意味着不仅会更改 <code>/home/ubuntu/blog/.deploy_git</code> 目录的所有者和所属组，还会更改该目录下所有文件和子目录的所有者和所属组。</li>\n<li>**<code>ubuntu:hexo_group</code>**：</li>\n<li><code>ubuntu</code> 是新所有者的用户名。</li>\n<li><code>hexo_group</code> 是新所属组的组名。</li>\n<li>这部分指定了新的所有者和所属组。格式为 <code>用户:组</code>。</li>\n</ul>\n<p>  &#x3D;&#x3D;sudo chmod -R 775 &#x2F;home&#x2F;ubuntu&#x2F;blog&#x2F;.deploy_git&#x3D;&#x3D;</p>\n<ul>\n<li>**<code>chmod</code>**：用于更改文件或目录的权限。</li>\n<li>**<code>-R</code>**：递归选项，表示命令会递归地应用于指定目录及其所有子目录和文件。</li>\n<li>**<code>775</code>**：是一个八进制数字，表示权限设置。具体含义如下<ul>\n<li>**<code>7</code>**：表示所有者（owner）的权限，<code>7</code> 对应于 <code>rwx</code>（读、写、执行）。</li>\n<li>**<code>7</code>**：表示所属组（group）的权限，<code>7</code> 对应于 <code>rwx</code>（读、写、执行）。</li>\n<li>**<code>5</code>**：表示其他用户（others）的权限，<code>5</code> 对应于 <code>r-x</code>（读、执行，但没有写权限）。<br>  因此，<code>sudo chmod -R 775 /home/ubuntu/blog/.deploy_git</code> 的作用是</li>\n</ul>\n</li>\n<li>所有者（通常是 <code>ubuntu</code> 用户）对目录及其内容有读、写和执行权限。</li>\n<li>所属组的用户对目录及其内容有读、写和执行权限。</li>\n<li>其他用户对目录及其内容有读和执行权限，但没有写权限。</li>\n</ul>\n<p>  &#x3D;&#x3D;sudo chmod -R g+rwX &#x2F;home&#x2F;ubuntu&#x2F;blog&#x2F;.deploy_git&#x3D;&#x3D;</p>\n<ul>\n<li>**<code>chmod</code>**：用于更改文件或目录的权限。</li>\n<li>**<code>-R</code>**：递归选项，表示命令会递归地应用于指定目录及其所有子目录和文件。</li>\n<li>**<code>g+rwX</code>**：表示为所属组（group）添加读（<code>r</code>）、写（<code>w</code>）和执行（<code>X</code>）权限。<br>  因此，<code>sudo chmod -R g+rwX /home/ubuntu/blog/.deploy_git</code> 的作用是</li>\n<li>为所属组的用户添加读、写和执行权限。</li>\n<li>其他用户的权限保持不变。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"使用Nginx部署Hexo博客\"><a href=\"#使用Nginx部署Hexo博客\" class=\"headerlink\" title=\"使用Nginx部署Hexo博客\"></a>使用Nginx部署Hexo博客</h3><p>$Last Edited：2025.04.29&#x2F;17:33$</p>\n<hr>\n<p>配置防火墙，允许相关端口。可以在服务器安全组设置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> ufw allow <span class=\"string\">&#x27;Nginx Full&#x27;</span>  <span class=\"comment\"># 允许 HTTP (80) 和 HTTPS (443)</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> ufw reload</span><br></pre></td></tr></table></figure>\n\n<p>安装Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt update</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt install nginx -y</span><br></pre></td></tr></table></figure>\n\n<p>创建 Nginx 配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nano /etc/nginx/sites-available/hexo-blog</span><br></pre></td></tr></table></figure>\n\n<p>添加以下内容（根据需求调整）</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> <span class=\"number\">154.8.222.175</span>;  <span class=\"comment\"># 替换为你的域名或服务器 IP</span></span><br><span class=\"line\">    <span class=\"attribute\">root</span> /home/ubuntu/blog/public;  <span class=\"comment\"># 指向 Hexo 生成的静态文件目录</span></span><br><span class=\"line\">    <span class=\"attribute\">index</span> index.html;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">try_files</span> <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ =<span class=\"number\">404</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 可选：启用 Gzip 压缩</span></span><br><span class=\"line\">    <span class=\"attribute\">gzip</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"attribute\">gzip_types</span> text/plain text/css application/json application/javascript text/xml application/xml appl&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启用配置并禁用默认站点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">ln</span> -s /etc/nginx/sites-available/hexo-blog /etc/nginx/sites-enabled</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">rm</span> /etc/nginx/sites-enabled/default</span><br></pre></td></tr></table></figure>\n\n<p>参考<a href=\"%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E2%80%94Hexo#%E4%B8%BB%E9%A2%98%E9%83%A8%E7%BD%B2%E5%88%B0GitHub\">静态博客—Hexo#主题部署到GitHub</a>中的配置，小修了一下脚本文件<code>scripts/copy-theme.js</code>如下（直接用上面的应该也可以）：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">const</span> <span class=\"string\">fs</span> <span class=\"string\">=</span> <span class=\"string\">require(&#x27;fs-extra&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">const</span> <span class=\"string\">path</span> <span class=\"string\">=</span> <span class=\"string\">require(&#x27;path&#x27;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">hexo.on(&#x27;generateBefore&#x27;,</span> <span class=\"string\">()</span> <span class=\"string\">=&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"string\">const</span> <span class=\"string\">themeName</span> <span class=\"string\">=</span> <span class=\"string\">hexo.config.theme;</span></span><br><span class=\"line\">  <span class=\"string\">const</span> <span class=\"string\">sourcePath</span> <span class=\"string\">=</span> <span class=\"string\">path.join(hexo.base_dir</span>, <span class=\"string\">&#x27;node_modules&#x27;</span>, <span class=\"string\">`hexo-theme-$</span>&#123;<span class=\"string\">themeNa&gt;</span></span><br><span class=\"line\">  <span class=\"string\">const</span> <span class=\"string\">targetPath</span> <span class=\"string\">=</span> <span class=\"string\">path.join(hexo.base_dir</span>, <span class=\"string\">&#x27;themes&#x27;</span>, <span class=\"string\">themeName);</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">//</span> <span class=\"string\">清空目标目录（确保无残留冲突）</span></span><br><span class=\"line\">  <span class=\"string\">if</span> <span class=\"string\">(fs.existsSync(targetPath))</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">fs.removeSync(targetPath);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">//</span> <span class=\"string\">复制主题文件（含</span> <span class=\"string\">source</span> <span class=\"string\">资源）</span></span><br><span class=\"line\">  <span class=\"string\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">fs.copySync(sourcePath</span>, <span class=\"string\">targetPath</span>, &#123;</span><br><span class=\"line\">      <span class=\"attr\">overwrite:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">filter:</span> <span class=\"string\">(src)</span> <span class=\"string\">=&gt;</span> <span class=\"type\">!src.includes(&#x27;node_modules&#x27;)</span>  <span class=\"string\">//</span> <span class=\"string\">排除嵌套</span> <span class=\"string\">node_modules</span></span><br><span class=\"line\">    &#125;<span class=\"string\">);</span></span><br><span class=\"line\">    <span class=\"string\">hexo.log.info(`主题</span> <span class=\"string\">$</span>&#123;<span class=\"string\">themeName</span>&#125; <span class=\"string\">已复制到</span> <span class=\"string\">themes</span> <span class=\"string\">目录`);</span></span><br><span class=\"line\">  &#125; <span class=\"string\">catch</span> <span class=\"string\">(err)</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">hexo.log.error(`复制主题失败:</span> <span class=\"string\">$</span>&#123;<span class=\"string\">err</span>&#125;<span class=\"string\">`);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;<span class=\"string\">);</span></span><br></pre></td></tr></table></figure>\n\n<p>打开Hexo根目录下<code>_config.yml</code>文件，检查url的配置，不设置或者如下设置都可以。<em>如果设置成其他不一致的url，在生成静态文件并访问相应地址时可能无法看到主题。</em></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">http://154.8.222.175</span>  <span class=\"comment\"># 使用服务器 IP 或域名</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/</span></span><br></pre></td></tr></table></figure>\n\n<p>重新生成静态文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>确保<code>public</code>文件目录可以被<code>Nginx</code>读取，模拟<code>Nginx</code>访问测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换到 www-data 用户尝试访问目录</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> -u www-data <span class=\"built_in\">ls</span> -l /home/ubuntu/blog/public</span><br><span class=\"line\"><span class=\"comment\"># 应能正常列出文件，无权限错误</span></span><br></pre></td></tr></table></figure>\n<p>如果输出<code>ls: cannot access &#39;/home/ubuntu/blog/public&#39;: Permission denied</code>就要修复<code>Nginx</code>访问的权限</p>\n<ul>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n权限修复过程——从根目录到目标路径的 <strong>每一级目录</strong> 都必须对 <code>www-data</code> 用户开放执行权限（<code>x</code>）。<em>（所以博客根目录放在用户目录外是不是好点？）</em></p>\n<ul>\n<li><p>让<code>www-data</code>用户加入到<code>hexo_group</code>组中</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> usermod -aG hexo_group www-data</span><br><span class=\"line\"><span class=\"comment\"># 检查组内成员</span></span><br><span class=\"line\">getent group hexo_group</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更改public目录的归属</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chown</span> -R ubuntu:hexo_group /home/ubuntu/blog/public</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修复权限（允许组和其他用户进入），哪一级目录不通给哪一级。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chmod</span> 755 /home/ubuntu</span><br></pre></td></tr></table></figure>\n<p>  正确输出应该是：<code>drwxr-xr-x 11 ubuntu ubuntu 4096 Apr 29 11:21 /home/ubuntu</code></p>\n</li>\n</ul>\n<p>  逐级检查能否访问。<br>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> -u www-data <span class=\"built_in\">ls</span> /home/ubuntu</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> -u www-data <span class=\"built_in\">ls</span> /home/ubuntu/blog/public</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> -u www-data <span class=\"built_in\">ls</span> /home/ubuntu/blog</span><br></pre></td></tr></table></figure><br>  正确的话就会列出文件目录列表。</p>\n</li>\n</ul>\n<p>测试并重启 Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nginx -t          <span class=\"comment\"># 检查语法</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart nginx</span><br></pre></td></tr></table></figure>\n<p>在浏览器中输入<a href=\"http://154.8.222.175/\">服务器域名或IP</a>查看部署情况。</p>\n<p>报错可以查看日志</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 错误日志</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">tail</span> -f /var/log/nginx/error.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 访问日志</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">tail</span> -f /var/log/nginx/access.log</span><br></pre></td></tr></table></figure>\n\n<p>每次更新博客后，执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /home/ubuntu/blog</span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart nginx</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h3 id=\"环境准备与Hexo安装\"><a href=\"#环境准备与Hexo安装\" class=\"headerlink\" title=\"环境准备与Hexo安装\"></a>环境准备与Hexo安装</h3><p>$Last Edited：2025.04.28&#x2F;20:41$</p>\n<hr>\n<p>直接从apt下载，版本可能比较低，用这个方法可以选择合适的版本。<br><strong>添加 NodeSource 的 Node.js 20.x 仓库</strong>（你可以选择其他支持的版本，如 18.x 或 20.x）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://deb.nodesource.com/setup_20.x | <span class=\"built_in\">sudo</span> -E bash -</span><br></pre></td></tr></table></figure>\n\n<p>安装 <strong>Node.js</strong> 和 <strong>npm</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install -y nodejs</span><br></pre></td></tr></table></figure>\n\n<p>验证：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n\n<p>使用 <strong>npm</strong> 全局安装 <strong>Hexo</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，检查 <strong>Hexo</strong> 版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo -v</span><br></pre></td></tr></table></figure>\n\n<p> 创建 <strong>Hexo</strong> 博客<br>选择一个目录存放博客文件，例如 <code>/home/yourname/blog</code>，然后运行以下命令初始化 Hexo：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init /home/yourname/blog</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /home/yourname/blog</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>在目录下，生成静态文件并启动本地服务器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>默认在<code>http://localhost:4000</code>运行。</p>\n<h3 id=\"Hexo部署到GitHub\"><a href=\"#Hexo部署到GitHub\" class=\"headerlink\" title=\"Hexo部署到GitHub\"></a>Hexo部署到GitHub</h3><p>参考：<br><a href=\"https://akilar.top/posts/e5502ef6/\">Ubuntu:Hexo+github搭建个人博客 | Akilarの糖果屋</a></p>\n<p>$Last Edited：2025.04.28&#x2F;20:41$</p>\n<hr>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> GitHub Pages 仓库命名规则：<ul>\n<li><strong>用户&#x2F;组织站点</strong>：仓库名 <strong>必须</strong> 为 <code>&lt;username&gt;.github.io</code>（例如 <code>cloak1522.github.io</code>），访问地址为 <code>https://&lt;username&gt;.github.io</code>。</li>\n<li><strong>项目站点</strong>：仓库名可以是任意名称（例如 <code>418blog</code>），访问地址为 <code>https://&lt;username&gt;.github.io/&lt;repo&gt;</code>。<br>在GitHub上新建一个名为418blog的仓库，确保Pages有关的设置正确。<br><img src=\"/418blog/images/Github%E8%AE%BE%E7%BD%AEpages.png\" alt=\"Github设置pages.png\"></li>\n</ul>\n</li>\n</ul>\n<p>回到云服务器，在管理员模式下设置用户名和邮箱地址：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> passwd  </span><br><span class=\"line\"><span class=\"comment\"># 然后会提示你输入新的UNIX密码，密码设置ok以后，我们进入管理员模式。输入：  </span></span><br><span class=\"line\">su</span><br></pre></td></tr></table></figure>\n\n<p>安装git：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install git</span><br></pre></td></tr></table></figure>\n\n<p>配置git：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;username&quot;</span>  </span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;username@example.com&quot;</span>  </span><br><span class=\"line\"><span class=\"comment\"># 检查电脑是否已经有 SSH keys  </span></span><br><span class=\"line\">ssh-keygen -t rsa -C youremail@example.com  </span><br><span class=\"line\"><span class=\"comment\"># -C后面加你在github的用户名邮箱，这样公钥才会被github认可  </span></span><br><span class=\"line\">less ~/.ssh/id_rsa.pub  </span><br><span class=\"line\"><span class=\"comment\"># 查看公钥内容稍后加入Github账户的sshkey中</span></span><br></pre></td></tr></table></figure>\n\n<p>大概显示如下，按q退出。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCkCIY3F5wQ2SaJU6a8AzKwxnlM4vkarK2R8uYvgunEZyx6rXUBTPXgry9Vtq+rOSZ+wowG1Gpkte4DKeQV0RHQeVbhW5daHt4INjTCopSCpLA7g1ToZ0VD3A7VphFuioj/SnpAkUY7ZZYr1X8+iU989oMHazrRqs5Ji1QAFlVKhJ0LTALMqDpj6EpQRSNzLriDnBp27sFHSrVkNMEguIAe+7/Mpiew6v1v/yIdIxsci+q5du+Yka8nviSgPH/6FJo1SCp+RITkIvV/M+nrmawEP9KqP0koiRJa1SuXmsBxHpeJMKW8U+eySYqNJJsotoEjluRFnnCz7U03Vh6oe0uwjZf5c//aephrJduZxR9Y8OzomXqSwngTBh21AEPpIyksSFV7GKYQ9NG7/EmZS4E1VTsrZoe/wQKSnsmkZqtgqSLKY0JY1i0T1ogPg6ApmEZKtKVcBcJSqrJCqcyY9tzN4vcBnz7E4dKeFscgPNOh6tZCPDvGmMy2GREpW5/5H6c= obsever20210103@gmail.com</span><br><span class=\"line\">/root/.ssh/id_rsa.pub (END)</span><br></pre></td></tr></table></figure>\n\n<p>添加到GitHub账户的SSH keys中：<br><img src=\"/418blog/images/GitHub%E7%9A%84SSHkey.png\" alt=\"GitHub的SSHkey.png\"></p>\n<p>测试连接情况，第一次一般是这样的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM-8-3-ubuntu:/home/ubuntu/blog# ssh -T git@github.com</span><br><span class=\"line\">The authenticity of host <span class=\"string\">&#x27;github.com (20.205.243.166)&#x27;</span> can<span class=\"string\">&#x27;t be established.</span></span><br><span class=\"line\"><span class=\"string\">ED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.</span></span><br><span class=\"line\"><span class=\"string\">This key is not known by any other names</span></span><br><span class=\"line\"><span class=\"string\">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span></span><br><span class=\"line\"><span class=\"string\">Warning: Permanently added &#x27;</span>github.com<span class=\"string\">&#x27; (ED25519) to the list of known hosts.</span></span><br><span class=\"line\"><span class=\"string\">Hi cloak1522! You&#x27;</span>ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class=\"line\">root@VM-8-3-ubuntu:/home/ubuntu/blog# ssh -T git@github.com</span><br><span class=\"line\">Hi cloak1522! You<span class=\"string\">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>\n\n<p>在Hexo根目录下，有一个<code>_config.yml</code>文件，存放了相关配置信息，在其中添加：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">https://cloak1522.github.io/418blog</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/418blog/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span> <span class=\"string\">git@github.com:cloak1522/418blog.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">main</span></span><br></pre></td></tr></table></figure>\n\n<p>清理并重新部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>部署完成后，访问(<a href=\"https://cloak1522.github.io/418blog)%E5%8F%AF%E6%9F%A5%E7%9C%8B%E3%80%82\">https://cloak1522.github.io/418blog)可查看。</a></p>\n<h3 id=\"主题部署到GitHub\"><a href=\"#主题部署到GitHub\" class=\"headerlink\" title=\"主题部署到GitHub\"></a>主题部署到GitHub</h3><p>$Last Edited：2025.04.28&#x2F;20:41$</p>\n<hr>\n<p>首先使用<code>npm</code>安装需要的主题，以<code>butterfly</code>为例。在Hexo根目录下，执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-theme-butterfly --save</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>_config.yml</code> 中指定主题名称（与 npm 包名一致）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: butterfly</span><br></pre></td></tr></table></figure>\n\n<p>此时，如果你的 <code>themes</code> 目录为空，但通过 <code>hexo server</code> 在本地能看到主题，说明你使用的是 <strong>通过 <code>npm</code>安装的主题</strong>（例如 <code>hexo-theme-landscape</code>），而非传统的克隆主题仓库方式。这种情况下，主题文件不会直接存放在 <code>themes</code> 目录中，而是存储在 <code>node_modules</code> 目录下。<br>因此使用脚本将主题资源复制到静态目录。</p>\n<p>在 Hexo 根目录创建 <code>scripts</code> 文件夹（如果不存在）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> scrips</span><br></pre></td></tr></table></figure>\n\n<p>创建脚本文件 <code>scripts/copy-theme.js</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs-extra&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">hexo.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;generateBefore&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> themeName = hexo.<span class=\"property\">config</span>.<span class=\"property\">theme</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> sourcePath = path.<span class=\"title function_\">join</span>(hexo.<span class=\"property\">base_dir</span>, <span class=\"string\">&#x27;node_modules&#x27;</span>, <span class=\"string\">`hexo-theme-<span class=\"subst\">$&#123;themeName&#125;</span>`</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> targetPath = path.<span class=\"title function_\">join</span>(hexo.<span class=\"property\">base_dir</span>, <span class=\"string\">&#x27;themes&#x27;</span>, themeName);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 检查源路径是否存在</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!fs.<span class=\"title function_\">existsSync</span>(sourcePath)) &#123;</span><br><span class=\"line\">    hexo.<span class=\"property\">log</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`主题源路径不存在: <span class=\"subst\">$&#123;sourcePath&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 确保 themes 目录存在</span></span><br><span class=\"line\">  fs.<span class=\"title function_\">ensureDirSync</span>(path.<span class=\"title function_\">join</span>(hexo.<span class=\"property\">base_dir</span>, <span class=\"string\">&#x27;themes&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 清空目标目录（确保无残留冲突）</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fs.<span class=\"title function_\">existsSync</span>(targetPath)) &#123;</span><br><span class=\"line\">    fs.<span class=\"title function_\">removeSync</span>(targetPath);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 复制主题文件（含 source 资源）</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    fs.<span class=\"title function_\">copySync</span>(sourcePath, targetPath, &#123;</span><br><span class=\"line\">      <span class=\"attr\">overwrite</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">filter</span>: <span class=\"function\">(<span class=\"params\">src, dest</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 排除嵌套的 node_modules，但允许主题根目录下的文件</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> relativePath = path.<span class=\"title function_\">relative</span>(sourcePath, src);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> isNestedNodeModules = relativePath.<span class=\"title function_\">includes</span>(<span class=\"string\">&#x27;node_modules&#x27;</span>) &amp;&amp; relativePath !== <span class=\"string\">&#x27;node_modules&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> !isNestedNodeModules;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"comment\">// 验证复制是否成功</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fs.<span class=\"title function_\">existsSync</span>(targetPath)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> files = fs.<span class=\"title function_\">readdirSync</span>(targetPath);</span><br><span class=\"line\">      hexo.<span class=\"property\">log</span>.<span class=\"title function_\">info</span>(<span class=\"string\">`主题 <span class=\"subst\">$&#123;themeName&#125;</span> 已成功复制到 themes 目录，包含 <span class=\"subst\">$&#123;files.length&#125;</span> 个文件/目录`</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      hexo.<span class=\"property\">log</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`主题复制失败：目标目录不存在`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    hexo.<span class=\"property\">log</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`复制主题失败: <span class=\"subst\">$&#123;err.message&#125;</span>`</span>);</span><br><span class=\"line\">    hexo.<span class=\"property\">log</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`源路径: <span class=\"subst\">$&#123;sourcePath&#125;</span>`</span>);</span><br><span class=\"line\">    hexo.<span class=\"property\">log</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`目标路径: <span class=\"subst\">$&#123;targetPath&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n脚本文件的详细解释</p>\n<ol>\n<li><strong>依赖导入</strong>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs-extra&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li><code>fs-extra</code>: 增强版的文件系统操作库，提供了更多便利的文件操作方法</li>\n<li><code>path</code>: Node.js 内置的路径处理模块</li>\n</ul>\n<ol start=\"2\">\n<li><strong>事件监听器</strong>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;generateBefore&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>监听 Hexo 的 <code>generateBefore</code> 事件</li>\n<li>这个事件在 Hexo 开始生成静态文件之前触发</li>\n<li>确保主题文件在生成过程开始前就已经准备好</li>\n</ul>\n<ol start=\"3\">\n<li><strong>路径配置</strong>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> themeName = hexo.<span class=\"property\">config</span>.<span class=\"property\">theme</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sourcePath = path.<span class=\"title function_\">join</span>(hexo.<span class=\"property\">base_dir</span>, <span class=\"string\">&#x27;node_modules&#x27;</span>, <span class=\"string\">`hexo-theme-<span class=\"subst\">$&#123;themeName&#125;</span>`</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> targetPath = path.<span class=\"title function_\">join</span>(hexo.<span class=\"property\">base_dir</span>, <span class=\"string\">&#x27;themes&#x27;</span>, themeName);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li><code>themeName</code>: 从 Hexo 配置中获取当前使用的主题名称</li>\n<li><code>sourcePath</code>: 主题在 <code>node_modules</code> 中的位置</li>\n<li><code>targetPath</code>: 主题应该复制到的目标位置</li>\n</ul>\n<ol start=\"4\">\n<li><strong>源路径验证</strong>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!fs.<span class=\"title function_\">existsSync</span>(sourcePath)) &#123;</span><br><span class=\"line\">  hexo.<span class=\"property\">log</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`主题源路径不存在: <span class=\"subst\">$&#123;sourcePath&#125;</span>`</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>检查主题是否真的存在于 <code>node_modules</code> 中</li>\n<li>如果不存在，记录错误并退出</li>\n</ul>\n<ol start=\"5\">\n<li><strong>目录准备</strong>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.<span class=\"title function_\">ensureDirSync</span>(path.<span class=\"title function_\">join</span>(hexo.<span class=\"property\">base_dir</span>, <span class=\"string\">&#x27;themes&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (fs.<span class=\"title function_\">existsSync</span>(targetPath)) &#123;</span><br><span class=\"line\">  fs.<span class=\"title function_\">removeSync</span>(targetPath);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>确保 <code>themes</code> 目录存在</li>\n<li>如果目标路径已存在，先删除以避免冲突</li>\n</ul>\n<ol start=\"6\">\n<li><strong>主题文件复制</strong>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.<span class=\"title function_\">copySync</span>(sourcePath, targetPath, &#123;</span><br><span class=\"line\">  <span class=\"attr\">overwrite</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">filter</span>: <span class=\"function\">(<span class=\"params\">src, dest</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> relativePath = path.<span class=\"title function_\">relative</span>(sourcePath, src);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> isNestedNodeModules = relativePath.<span class=\"title function_\">includes</span>(<span class=\"string\">&#x27;node_modules&#x27;</span>) &amp;&amp; relativePath !== <span class=\"string\">&#x27;node_modules&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !isNestedNodeModules;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n  <strong>复制选项说明：</strong></li>\n</ol>\n<ul>\n<li><code>overwrite: true</code>: 允许覆盖已存在的文件</li>\n<li><code>filter</code>: 过滤函数，控制哪些文件被复制</li>\n</ul>\n<p>  <strong>过滤逻辑：</strong></p>\n<ul>\n<li>排除嵌套的 <code>node_modules</code> 目录</li>\n<li>允许主题根目录下的所有其他文件和目录</li>\n<li>这避免了复制不必要的依赖文件</li>\n</ul>\n<ol start=\"7\">\n<li><strong>复制结果验证</strong>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (fs.<span class=\"title function_\">existsSync</span>(targetPath)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> files = fs.<span class=\"title function_\">readdirSync</span>(targetPath);</span><br><span class=\"line\">  hexo.<span class=\"property\">log</span>.<span class=\"title function_\">info</span>(<span class=\"string\">`主题 <span class=\"subst\">$&#123;themeName&#125;</span> 已成功复制到 themes 目录，包含 <span class=\"subst\">$&#123;files.length&#125;</span> 个文件/目录`</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  hexo.<span class=\"property\">log</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`主题复制失败：目标目录不存在`</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>验证复制是否成功</li>\n<li>统计复制的文件数量</li>\n<li>提供详细的日志信息</li>\n</ul>\n<ol start=\"8\">\n<li><strong>错误处理</strong>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">  hexo.<span class=\"property\">log</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`复制主题失败: <span class=\"subst\">$&#123;err.message&#125;</span>`</span>);</span><br><span class=\"line\">  hexo.<span class=\"property\">log</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`源路径: <span class=\"subst\">$&#123;sourcePath&#125;</span>`</span>);</span><br><span class=\"line\">  hexo.<span class=\"property\">log</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`目标路径: <span class=\"subst\">$&#123;targetPath&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>捕获并记录复制过程中的任何错误</li>\n<li>提供详细的错误信息和路径信息，便于调试</li>\n</ul>\n</li>\n</ul>\n<p>安装依赖包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install fs-extra --save</span><br></pre></td></tr></table></figure>\n\n<p>重新生成静态文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>检查<code>theme</code>目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> themes/butterfly</span><br></pre></td></tr></table></figure>\n\n<p>输出如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM-8-3-ubuntu:/home/ubuntu/blog# <span class=\"built_in\">ls</span> themes/butterfly</span><br><span class=\"line\">_config.yml  layout   package.json  README_CN.md  scripts</span><br><span class=\"line\">languages    LICENSE  plugins.yml   README.md     <span class=\"built_in\">source</span></span><br></pre></td></tr></table></figure>\n\n<p>此时再部署到Github，应该可以看到主题：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Hexo目录的权限\"><a href=\"#Hexo目录的权限\" class=\"headerlink\" title=\"Hexo目录的权限\"></a>Hexo目录的权限</h3><p>$Last Edited：2025.04.28&#x2F;20:42$</p>\n<hr>\n<p>Git 默认会检查仓库目录的所有权，如果目录所有者与当前用户不一致（常见于跨用户操作或 <code>sudo</code> 误用），会触发 <code>dubious ownership</code> 错误。<br>以下以<code>.deploy_git</code>文件夹为例，其他情况也同理。</p>\n<p>推荐的做法是将目录加入Git的全局安全列表：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --add safe.directory /home/ubuntu/blog/.deploy_git</span><br></pre></td></tr></table></figure>\n\n<p>还可以改变目录的所有者，并赋予权限。检查目录所有者用<code>ls -ld</code>指令。首先创建一个用户组：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> groupadd hexo_group</span><br></pre></td></tr></table></figure>\n\n<p>将 ubuntu 用户和 root 用户加入该用户组：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> usermod -aG hexo_group ubuntu</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> usermod -aG hexo_group root</span><br></pre></td></tr></table></figure>\n\n<p>更改目录的所属组：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chown</span> -R ubuntu:hexo_group /home/ubuntu/blog/.deploy_git</span><br></pre></td></tr></table></figure>\n\n<p>设置目录和文件的权限：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chmod</span> -R 775 /home/ubuntu/blog/.deploy_git</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chmod</span> -R g+rwX /home/ubuntu/blog/.deploy_git</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n指令的具体解释：<br>  &#x3D;&#x3D;sudo chown -R ubuntu:hexo_group &#x2F;home&#x2F;ubuntu&#x2F;blog&#x2F;.deploy_git&#x3D;&#x3D;</p>\n<ul>\n<li>**<code>chown</code>**：是 “change owner” 的缩写，用于更改文件或目录的所有者和所属组。</li>\n<li>**<code>-R</code>**：是递归选项（recursive），表示命令会递归地应用于指定目录及其所有子目录和文件。这意味着不仅会更改 <code>/home/ubuntu/blog/.deploy_git</code> 目录的所有者和所属组，还会更改该目录下所有文件和子目录的所有者和所属组。</li>\n<li>**<code>ubuntu:hexo_group</code>**：</li>\n<li><code>ubuntu</code> 是新所有者的用户名。</li>\n<li><code>hexo_group</code> 是新所属组的组名。</li>\n<li>这部分指定了新的所有者和所属组。格式为 <code>用户:组</code>。</li>\n</ul>\n<p>  &#x3D;&#x3D;sudo chmod -R 775 &#x2F;home&#x2F;ubuntu&#x2F;blog&#x2F;.deploy_git&#x3D;&#x3D;</p>\n<ul>\n<li>**<code>chmod</code>**：用于更改文件或目录的权限。</li>\n<li>**<code>-R</code>**：递归选项，表示命令会递归地应用于指定目录及其所有子目录和文件。</li>\n<li>**<code>775</code>**：是一个八进制数字，表示权限设置。具体含义如下<ul>\n<li>**<code>7</code>**：表示所有者（owner）的权限，<code>7</code> 对应于 <code>rwx</code>（读、写、执行）。</li>\n<li>**<code>7</code>**：表示所属组（group）的权限，<code>7</code> 对应于 <code>rwx</code>（读、写、执行）。</li>\n<li>**<code>5</code>**：表示其他用户（others）的权限，<code>5</code> 对应于 <code>r-x</code>（读、执行，但没有写权限）。<br>  因此，<code>sudo chmod -R 775 /home/ubuntu/blog/.deploy_git</code> 的作用是</li>\n</ul>\n</li>\n<li>所有者（通常是 <code>ubuntu</code> 用户）对目录及其内容有读、写和执行权限。</li>\n<li>所属组的用户对目录及其内容有读、写和执行权限。</li>\n<li>其他用户对目录及其内容有读和执行权限，但没有写权限。</li>\n</ul>\n<p>  &#x3D;&#x3D;sudo chmod -R g+rwX &#x2F;home&#x2F;ubuntu&#x2F;blog&#x2F;.deploy_git&#x3D;&#x3D;</p>\n<ul>\n<li>**<code>chmod</code>**：用于更改文件或目录的权限。</li>\n<li>**<code>-R</code>**：递归选项，表示命令会递归地应用于指定目录及其所有子目录和文件。</li>\n<li>**<code>g+rwX</code>**：表示为所属组（group）添加读（<code>r</code>）、写（<code>w</code>）和执行（<code>X</code>）权限。<br>  因此，<code>sudo chmod -R g+rwX /home/ubuntu/blog/.deploy_git</code> 的作用是</li>\n<li>为所属组的用户添加读、写和执行权限。</li>\n<li>其他用户的权限保持不变。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"使用Nginx部署Hexo博客\"><a href=\"#使用Nginx部署Hexo博客\" class=\"headerlink\" title=\"使用Nginx部署Hexo博客\"></a>使用Nginx部署Hexo博客</h3><p>$Last Edited：2025.04.29&#x2F;17:33$</p>\n<hr>\n<p>配置防火墙，允许相关端口。可以在服务器安全组设置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> ufw allow <span class=\"string\">&#x27;Nginx Full&#x27;</span>  <span class=\"comment\"># 允许 HTTP (80) 和 HTTPS (443)</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> ufw reload</span><br></pre></td></tr></table></figure>\n\n<p>安装Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt update</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt install nginx -y</span><br></pre></td></tr></table></figure>\n\n<p>创建 Nginx 配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nano /etc/nginx/sites-available/hexo-blog</span><br></pre></td></tr></table></figure>\n\n<p>添加以下内容（根据需求调整）</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> <span class=\"number\">154.8.222.175</span>;  <span class=\"comment\"># 替换为你的域名或服务器 IP</span></span><br><span class=\"line\">    <span class=\"attribute\">root</span> /home/ubuntu/blog/public;  <span class=\"comment\"># 指向 Hexo 生成的静态文件目录</span></span><br><span class=\"line\">    <span class=\"attribute\">index</span> index.html;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">try_files</span> <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ =<span class=\"number\">404</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 可选：启用 Gzip 压缩</span></span><br><span class=\"line\">    <span class=\"attribute\">gzip</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"attribute\">gzip_types</span> text/plain text/css application/json application/javascript text/xml application/xml appl&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启用配置并禁用默认站点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">ln</span> -s /etc/nginx/sites-available/hexo-blog /etc/nginx/sites-enabled</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">rm</span> /etc/nginx/sites-enabled/default</span><br></pre></td></tr></table></figure>\n\n<p>参考<a href=\"%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E2%80%94Hexo#%E4%B8%BB%E9%A2%98%E9%83%A8%E7%BD%B2%E5%88%B0GitHub\">静态博客—Hexo#主题部署到GitHub</a>中的配置，小修了一下脚本文件<code>scripts/copy-theme.js</code>如下（直接用上面的应该也可以）：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">const</span> <span class=\"string\">fs</span> <span class=\"string\">=</span> <span class=\"string\">require(&#x27;fs-extra&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">const</span> <span class=\"string\">path</span> <span class=\"string\">=</span> <span class=\"string\">require(&#x27;path&#x27;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">hexo.on(&#x27;generateBefore&#x27;,</span> <span class=\"string\">()</span> <span class=\"string\">=&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"string\">const</span> <span class=\"string\">themeName</span> <span class=\"string\">=</span> <span class=\"string\">hexo.config.theme;</span></span><br><span class=\"line\">  <span class=\"string\">const</span> <span class=\"string\">sourcePath</span> <span class=\"string\">=</span> <span class=\"string\">path.join(hexo.base_dir</span>, <span class=\"string\">&#x27;node_modules&#x27;</span>, <span class=\"string\">`hexo-theme-$</span>&#123;<span class=\"string\">themeNa&gt;</span></span><br><span class=\"line\">  <span class=\"string\">const</span> <span class=\"string\">targetPath</span> <span class=\"string\">=</span> <span class=\"string\">path.join(hexo.base_dir</span>, <span class=\"string\">&#x27;themes&#x27;</span>, <span class=\"string\">themeName);</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">//</span> <span class=\"string\">清空目标目录（确保无残留冲突）</span></span><br><span class=\"line\">  <span class=\"string\">if</span> <span class=\"string\">(fs.existsSync(targetPath))</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">fs.removeSync(targetPath);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">//</span> <span class=\"string\">复制主题文件（含</span> <span class=\"string\">source</span> <span class=\"string\">资源）</span></span><br><span class=\"line\">  <span class=\"string\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">fs.copySync(sourcePath</span>, <span class=\"string\">targetPath</span>, &#123;</span><br><span class=\"line\">      <span class=\"attr\">overwrite:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">filter:</span> <span class=\"string\">(src)</span> <span class=\"string\">=&gt;</span> <span class=\"type\">!src.includes(&#x27;node_modules&#x27;)</span>  <span class=\"string\">//</span> <span class=\"string\">排除嵌套</span> <span class=\"string\">node_modules</span></span><br><span class=\"line\">    &#125;<span class=\"string\">);</span></span><br><span class=\"line\">    <span class=\"string\">hexo.log.info(`主题</span> <span class=\"string\">$</span>&#123;<span class=\"string\">themeName</span>&#125; <span class=\"string\">已复制到</span> <span class=\"string\">themes</span> <span class=\"string\">目录`);</span></span><br><span class=\"line\">  &#125; <span class=\"string\">catch</span> <span class=\"string\">(err)</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">hexo.log.error(`复制主题失败:</span> <span class=\"string\">$</span>&#123;<span class=\"string\">err</span>&#125;<span class=\"string\">`);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;<span class=\"string\">);</span></span><br></pre></td></tr></table></figure>\n\n<p>打开Hexo根目录下<code>_config.yml</code>文件，检查url的配置，不设置或者如下设置都可以。<em>如果设置成其他不一致的url，在生成静态文件并访问相应地址时可能无法看到主题。</em></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">http://154.8.222.175</span>  <span class=\"comment\"># 使用服务器 IP 或域名</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/</span></span><br></pre></td></tr></table></figure>\n\n<p>重新生成静态文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>确保<code>public</code>文件目录可以被<code>Nginx</code>读取，模拟<code>Nginx</code>访问测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换到 www-data 用户尝试访问目录</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> -u www-data <span class=\"built_in\">ls</span> -l /home/ubuntu/blog/public</span><br><span class=\"line\"><span class=\"comment\"># 应能正常列出文件，无权限错误</span></span><br></pre></td></tr></table></figure>\n<p>如果输出<code>ls: cannot access &#39;/home/ubuntu/blog/public&#39;: Permission denied</code>就要修复<code>Nginx</code>访问的权限</p>\n<ul>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n权限修复过程——从根目录到目标路径的 <strong>每一级目录</strong> 都必须对 <code>www-data</code> 用户开放执行权限（<code>x</code>）。<em>（所以博客根目录放在用户目录外是不是好点？）</em></p>\n<ul>\n<li><p>让<code>www-data</code>用户加入到<code>hexo_group</code>组中</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> usermod -aG hexo_group www-data</span><br><span class=\"line\"><span class=\"comment\"># 检查组内成员</span></span><br><span class=\"line\">getent group hexo_group</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更改public目录的归属</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chown</span> -R ubuntu:hexo_group /home/ubuntu/blog/public</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修复权限（允许组和其他用户进入），哪一级目录不通给哪一级。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chmod</span> 755 /home/ubuntu</span><br></pre></td></tr></table></figure>\n<p>  正确输出应该是：<code>drwxr-xr-x 11 ubuntu ubuntu 4096 Apr 29 11:21 /home/ubuntu</code></p>\n</li>\n</ul>\n<p>  逐级检查能否访问。<br>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> -u www-data <span class=\"built_in\">ls</span> /home/ubuntu</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> -u www-data <span class=\"built_in\">ls</span> /home/ubuntu/blog/public</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> -u www-data <span class=\"built_in\">ls</span> /home/ubuntu/blog</span><br></pre></td></tr></table></figure><br>  正确的话就会列出文件目录列表。</p>\n</li>\n</ul>\n<p>测试并重启 Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nginx -t          <span class=\"comment\"># 检查语法</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart nginx</span><br></pre></td></tr></table></figure>\n<p>在浏览器中输入<a href=\"http://154.8.222.175/\">服务器域名或IP</a>查看部署情况。</p>\n<p>报错可以查看日志</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 错误日志</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">tail</span> -f /var/log/nginx/error.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 访问日志</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">tail</span> -f /var/log/nginx/access.log</span><br></pre></td></tr></table></figure>\n\n<p>每次更新博客后，执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /home/ubuntu/blog</span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart nginx</span><br></pre></td></tr></table></figure>"},{"title":"在Linux系统中查看进程","date":"2025-07-12T04:37:31.000Z","updated":"2025-07-12T03:50:02.000Z","_content":"\n## 1. `ps`命令\n**功能**：显示当前终端的进程快照（静态信息）。  \n**常用选项**：\n```bash\n# 查看所有用户的进程（详细信息）\nps aux\n\n# 查看当前用户的进程\nps -u $USER\n\n# 查看当前 Shell 的进程\nps\n\n# 查看指定进程的详细信息（如 PID 为 1234 的进程）\nps -p 1234\n```\n**输出字段解释**：\n- **USER**：运行进程的用户。\n- **%CPU**：CPU 使用率。\n- **%MEM**：内存使用率。\n- **VSZ**：虚拟内存使用量（KB）。\n- **RSS**：实际使用的物理内存（KB）。\n- **STAT**：进程状态（如 `R` 运行中，`S` 睡眠，`Z` 僵尸进程）。\n- **START**：进程启动时间。\n- **COMMAND**：启动进程的命令。\n\n## 2.`top`命令\n**功能**：实时动态显示进程状态（按 CPU 或内存排序）。  \n**使用方法**：\n```bash\ntop\n```\n**常用操作**：\n- 按 **`P`**：按 CPU 使用率排序。\n- 按 **`M`**：按内存使用率排序。\n- 按 **`1`**：切换显示 CPU 核心详情。\n- 按 **`q`**：退出 `top`。\n\n## 3.`htop`命令\n**功能**：`top` 的增强版（需安装）。  \n**安装与使用**（以 Debian/Ubuntu 为例）：\n```bash\nsudo apt insatll htop\nhtop\n```\n**优点**：\n- 图形化界面，支持鼠标操作。\n- 可通过方向键选择进程并终止（按 `F9`）。","source":"_posts/2025-07-12-在Linux系统中查看进程.md","raw":"---\ntitle: 在Linux系统中查看进程\ndate: 2025-07-12 12:37:31\nupdated: 2025-07-12 11:50:02\ncategories:\n  - [服务器&嵌入式平台操作, 常用操作]\ntags:\npermalink: 在linux系统中查看进程/\n---\n\n## 1. `ps`命令\n**功能**：显示当前终端的进程快照（静态信息）。  \n**常用选项**：\n```bash\n# 查看所有用户的进程（详细信息）\nps aux\n\n# 查看当前用户的进程\nps -u $USER\n\n# 查看当前 Shell 的进程\nps\n\n# 查看指定进程的详细信息（如 PID 为 1234 的进程）\nps -p 1234\n```\n**输出字段解释**：\n- **USER**：运行进程的用户。\n- **%CPU**：CPU 使用率。\n- **%MEM**：内存使用率。\n- **VSZ**：虚拟内存使用量（KB）。\n- **RSS**：实际使用的物理内存（KB）。\n- **STAT**：进程状态（如 `R` 运行中，`S` 睡眠，`Z` 僵尸进程）。\n- **START**：进程启动时间。\n- **COMMAND**：启动进程的命令。\n\n## 2.`top`命令\n**功能**：实时动态显示进程状态（按 CPU 或内存排序）。  \n**使用方法**：\n```bash\ntop\n```\n**常用操作**：\n- 按 **`P`**：按 CPU 使用率排序。\n- 按 **`M`**：按内存使用率排序。\n- 按 **`1`**：切换显示 CPU 核心详情。\n- 按 **`q`**：退出 `top`。\n\n## 3.`htop`命令\n**功能**：`top` 的增强版（需安装）。  \n**安装与使用**（以 Debian/Ubuntu 为例）：\n```bash\nsudo apt insatll htop\nhtop\n```\n**优点**：\n- 图形化界面，支持鼠标操作。\n- 可通过方向键选择进程并终止（按 `F9`）。","slug":"2025-07-12-在Linux系统中查看进程","published":1,"__permalink":"在linux系统中查看进程/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0nw001yzovdauwge1h3","content":"<h2 id=\"1-ps命令\"><a href=\"#1-ps命令\" class=\"headerlink\" title=\"1. ps命令\"></a>1. <code>ps</code>命令</h2><p><strong>功能</strong>：显示当前终端的进程快照（静态信息）。<br><strong>常用选项</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看所有用户的进程（详细信息）</span></span><br><span class=\"line\">ps aux</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前用户的进程</span></span><br><span class=\"line\">ps -u <span class=\"variable\">$USER</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前 Shell 的进程</span></span><br><span class=\"line\">ps</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定进程的详细信息（如 PID 为 1234 的进程）</span></span><br><span class=\"line\">ps -p 1234</span><br></pre></td></tr></table></figure>\n<p><strong>输出字段解释</strong>：</p>\n<ul>\n<li><strong>USER</strong>：运行进程的用户。</li>\n<li><strong>%CPU</strong>：CPU 使用率。</li>\n<li><strong>%MEM</strong>：内存使用率。</li>\n<li><strong>VSZ</strong>：虚拟内存使用量（KB）。</li>\n<li><strong>RSS</strong>：实际使用的物理内存（KB）。</li>\n<li><strong>STAT</strong>：进程状态（如 <code>R</code> 运行中，<code>S</code> 睡眠，<code>Z</code> 僵尸进程）。</li>\n<li><strong>START</strong>：进程启动时间。</li>\n<li><strong>COMMAND</strong>：启动进程的命令。</li>\n</ul>\n<h2 id=\"2-top命令\"><a href=\"#2-top命令\" class=\"headerlink\" title=\"2.top命令\"></a>2.<code>top</code>命令</h2><p><strong>功能</strong>：实时动态显示进程状态（按 CPU 或内存排序）。<br><strong>使用方法</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top</span><br></pre></td></tr></table></figure>\n<p><strong>常用操作</strong>：</p>\n<ul>\n<li>按 **<code>P</code>**：按 CPU 使用率排序。</li>\n<li>按 **<code>M</code>**：按内存使用率排序。</li>\n<li>按 **<code>1</code>**：切换显示 CPU 核心详情。</li>\n<li>按 **<code>q</code>**：退出 <code>top</code>。</li>\n</ul>\n<h2 id=\"3-htop命令\"><a href=\"#3-htop命令\" class=\"headerlink\" title=\"3.htop命令\"></a>3.<code>htop</code>命令</h2><p><strong>功能</strong>：<code>top</code> 的增强版（需安装）。<br><strong>安装与使用</strong>（以 Debian&#x2F;Ubuntu 为例）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt insatll htop</span><br><span class=\"line\">htop</span><br></pre></td></tr></table></figure>\n<p><strong>优点</strong>：</p>\n<ul>\n<li>图形化界面，支持鼠标操作。</li>\n<li>可通过方向键选择进程并终止（按 <code>F9</code>）。</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"1-ps命令\"><a href=\"#1-ps命令\" class=\"headerlink\" title=\"1. ps命令\"></a>1. <code>ps</code>命令</h2><p><strong>功能</strong>：显示当前终端的进程快照（静态信息）。<br><strong>常用选项</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看所有用户的进程（详细信息）</span></span><br><span class=\"line\">ps aux</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前用户的进程</span></span><br><span class=\"line\">ps -u <span class=\"variable\">$USER</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前 Shell 的进程</span></span><br><span class=\"line\">ps</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定进程的详细信息（如 PID 为 1234 的进程）</span></span><br><span class=\"line\">ps -p 1234</span><br></pre></td></tr></table></figure>\n<p><strong>输出字段解释</strong>：</p>\n<ul>\n<li><strong>USER</strong>：运行进程的用户。</li>\n<li><strong>%CPU</strong>：CPU 使用率。</li>\n<li><strong>%MEM</strong>：内存使用率。</li>\n<li><strong>VSZ</strong>：虚拟内存使用量（KB）。</li>\n<li><strong>RSS</strong>：实际使用的物理内存（KB）。</li>\n<li><strong>STAT</strong>：进程状态（如 <code>R</code> 运行中，<code>S</code> 睡眠，<code>Z</code> 僵尸进程）。</li>\n<li><strong>START</strong>：进程启动时间。</li>\n<li><strong>COMMAND</strong>：启动进程的命令。</li>\n</ul>\n<h2 id=\"2-top命令\"><a href=\"#2-top命令\" class=\"headerlink\" title=\"2.top命令\"></a>2.<code>top</code>命令</h2><p><strong>功能</strong>：实时动态显示进程状态（按 CPU 或内存排序）。<br><strong>使用方法</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top</span><br></pre></td></tr></table></figure>\n<p><strong>常用操作</strong>：</p>\n<ul>\n<li>按 **<code>P</code>**：按 CPU 使用率排序。</li>\n<li>按 **<code>M</code>**：按内存使用率排序。</li>\n<li>按 **<code>1</code>**：切换显示 CPU 核心详情。</li>\n<li>按 **<code>q</code>**：退出 <code>top</code>。</li>\n</ul>\n<h2 id=\"3-htop命令\"><a href=\"#3-htop命令\" class=\"headerlink\" title=\"3.htop命令\"></a>3.<code>htop</code>命令</h2><p><strong>功能</strong>：<code>top</code> 的增强版（需安装）。<br><strong>安装与使用</strong>（以 Debian&#x2F;Ubuntu 为例）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt insatll htop</span><br><span class=\"line\">htop</span><br></pre></td></tr></table></figure>\n<p><strong>优点</strong>：</p>\n<ul>\n<li>图形化界面，支持鼠标操作。</li>\n<li>可通过方向键选择进程并终止（按 <code>F9</code>）。</li>\n</ul>\n"},{"title":"DST服务器","date":"2025-07-15T16:45:59.000Z","updated":"2025-10-05T18:41:11.000Z","_content":"\n参考：\n[萌新亲测白嫖饥荒云服务器搭建成功全流程_哔哩哔哩bilibili_饥荒联机版](https://www.bilibili.com/video/BV1HkY8eaEpH?spm_id_from=333.788.videopod.sections&vd_source=d97d82191b995e0ba21c3438b8cf6adb)\n[饥荒联机版服务器搭建Linux（Ubuntu20.04）及常见报错和模组启用2023.5（超详细） - 哔哩哔哩](https://www.bilibili.com/opus/798802812813180931)\n[搭建饥荒服务器（2024.3更新） - 知乎](https://zhuanlan.zhihu.com/p/625645476\n[在你的 Linux 服务器上安装 SteamCMD 并搭建游戏服务器 · 瞳のBlog](https://www.hetong-re4per.com/posts/install-steamcmd-on-your-linux-server-and-setup-game-server/)\n知乎那篇最好用。\n时间有点久远了，简单记一下，主要有这么几步：\n### 1.安装steamcmd\n直接装：\n```bash\nsudo apt install steamcmd\n```\n\n启动：\n```bash\nsteamcmd\n```\n\n装不上就先装依赖：\n```bash\nsudo add-apt-repository multiverse\nsudo dpkg –add-architecture i386\nsudo apt update\nsudo apt install lib32gcc-s1 libcurl4-gnutls-dev:i386 lib32stdc++6 lib32z1 -y\n```\n\n还可以下载解压之后启动：\n```bash\nwget https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz\ntar -xvzf steamcmd_linux.tar.gz\n./steamcmd.sh\n```\n\n### 2.安装游戏服务器\n在[SteamDB](https://steamdb.info/)找到饥荒的APP ID\n安装\n```bash\nsteam> force_install_dir ../dontstarvetogether_dedicated_server\nsteam> login anonymous\nsteam> app_update 343050 validate\nsteam> quit\n```\n\n### 3.建一个服务器存档\n1. 在windows上创建好地图，这会在电脑上生成一个存档文件，目录大概为：`C://User/xxx/文档/klei/DoNotStarveTogether`\n2. 访问[Klei Account](https://accounts.klei.com/account/game/servers?game=DontStarveTogether)建一个服务器token，将token复制到`cluster_token.txt`文件中，放在存档目录下。\n3. 记录[Klei Account](https://accounts.klei.com/account/info)中的Klei ID，复制到`adminlist.txt`文件中，给自己加管理员权限。\n4. 服务器的名称的名称和密码在`.klei/DoNotStarveTogether/Cluster_1/cluster.ini` 文件中\n5. 整个文件目录上传到服务器上，我上传的位置是：`/home/ubuntu/.klei/DoNotStarveTogether/Cluster_1/`\n\n### 4.模组与启动脚本\n服务器目录下的mod文件是确定要下载哪些mod：\n```bash\ncd /dontstarvetogether_dedicated_server/mods\nvim dedicated_server_mods_setup.lua\n```\n\n存档中启用的mod在这里`.klei/DoNotStarveTogether/Cluster_1/Master/modoverride.lua`查看，这是地面的，记得还有洞穴。\n\n我的启动脚本`DST.sh`在用户目录下，内容是这样的：\n```text `!/bin/bash`\n\nsteamcmd_dir=\"/usr/games\"\ninstall_dir=\"$HOME/Steam/steamapps/common/Don't Starve Together Dedicated Server\"\ncluster_name=\"Cluster_1\"\ndontstarve_dir=\"$HOME/.klei/DoNotStarveTogether\"\n\nfunction fail() {\n    echo Error: \"$@\" >&2\n    exit 1\n}\n\nfunction check_for_file() { \n    if [ ! -e \"$1\" ]; then\n        fail \"Missing file: $1\"\n    fi\n}\n\ncd \"$steamcmd_dir\" || fail \"Missing $steamcmd_dir directory!\"\ncheck_for_file \"steamcmd\"\ncheck_for_file \"$dontstarve_dir/$cluster_name/cluster.ini\"\ncheck_for_file \"$dontstarve_dir/$cluster_name/cluster_token.txt\"\ncheck_for_file \"$dontstarve_dir/$cluster_name/Master/server.ini\"\ncheck_for_file \"$dontstarve_dir/$cluster_name/Caves/server.ini\"\ncheck_for_file \"$install_dir/bin\"\ncd \"$install_dir/bin\" || fail\nrun_shared=(./dontstarve_dedicated_server_nullrenderer)\nrun_shared+=(-console)\nrun_shared+=(-cluster \"$cluster_name\")\nrun_shared+=(-monitor_parent_process $$)\nrun_shared+=(-shard)\n\"${run_shared[@]}\" Caves | sed 's/^/Caves: /' &\n\"${run_shared[@]}\" Master | sed 's/^/Master: /'\n```\n\n加个权限：\n```bash\nsudo chmod u+x DST.sh\n```\n\n### 5.开放端口\n在租用服务器的管理界面安全组开放端口。具体需要开放的端口可以查看存档文件夹下的这几个文件：\n```text\n# 饥荒端口，UDP协议\n~/.klei/DoNotStarveTogether/Cluster_1/cluster.ini 中的 master_port。\n~/.klei/DoNotStarveTogether/Cluster_1/Master/server.ini 中的 server_port。\n~/.klei/DoNotStarveTogether/Cluster_1/Caves/server.ini 中的 server_port\n# steam端口，TCP+UDP协议\n~/.klei/DoNotStarveTogether/Cluster_1/Caves/server.ini 中的 master_server_port、authentication_port\n```\n### 6.运行与后续\n带日志输出的运行：\n```bash\nnohup ./boot.sh>root.log 2>&1 &\n```\n据说可能会因为缺少依赖报错。\n\n运行成功如下：\n![DST.png](/images/DST.png)\n\n关闭就是找到PID然后kill掉：\n```bash\nps -ef | grep don\nkill 服务器pid\n```","source":"_posts/2025-07-16-DST服务器.md","raw":"---\ntitle: DST服务器\ndate: 2025-07-16 00:45:59\nupdated: 2025-10-06 02:41:11\ncategories:\n  - [For Fun]\ntags:\npermalink: dst服务器/\n---\n\n参考：\n[萌新亲测白嫖饥荒云服务器搭建成功全流程_哔哩哔哩bilibili_饥荒联机版](https://www.bilibili.com/video/BV1HkY8eaEpH?spm_id_from=333.788.videopod.sections&vd_source=d97d82191b995e0ba21c3438b8cf6adb)\n[饥荒联机版服务器搭建Linux（Ubuntu20.04）及常见报错和模组启用2023.5（超详细） - 哔哩哔哩](https://www.bilibili.com/opus/798802812813180931)\n[搭建饥荒服务器（2024.3更新） - 知乎](https://zhuanlan.zhihu.com/p/625645476\n[在你的 Linux 服务器上安装 SteamCMD 并搭建游戏服务器 · 瞳のBlog](https://www.hetong-re4per.com/posts/install-steamcmd-on-your-linux-server-and-setup-game-server/)\n知乎那篇最好用。\n时间有点久远了，简单记一下，主要有这么几步：\n### 1.安装steamcmd\n直接装：\n```bash\nsudo apt install steamcmd\n```\n\n启动：\n```bash\nsteamcmd\n```\n\n装不上就先装依赖：\n```bash\nsudo add-apt-repository multiverse\nsudo dpkg –add-architecture i386\nsudo apt update\nsudo apt install lib32gcc-s1 libcurl4-gnutls-dev:i386 lib32stdc++6 lib32z1 -y\n```\n\n还可以下载解压之后启动：\n```bash\nwget https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz\ntar -xvzf steamcmd_linux.tar.gz\n./steamcmd.sh\n```\n\n### 2.安装游戏服务器\n在[SteamDB](https://steamdb.info/)找到饥荒的APP ID\n安装\n```bash\nsteam> force_install_dir ../dontstarvetogether_dedicated_server\nsteam> login anonymous\nsteam> app_update 343050 validate\nsteam> quit\n```\n\n### 3.建一个服务器存档\n1. 在windows上创建好地图，这会在电脑上生成一个存档文件，目录大概为：`C://User/xxx/文档/klei/DoNotStarveTogether`\n2. 访问[Klei Account](https://accounts.klei.com/account/game/servers?game=DontStarveTogether)建一个服务器token，将token复制到`cluster_token.txt`文件中，放在存档目录下。\n3. 记录[Klei Account](https://accounts.klei.com/account/info)中的Klei ID，复制到`adminlist.txt`文件中，给自己加管理员权限。\n4. 服务器的名称的名称和密码在`.klei/DoNotStarveTogether/Cluster_1/cluster.ini` 文件中\n5. 整个文件目录上传到服务器上，我上传的位置是：`/home/ubuntu/.klei/DoNotStarveTogether/Cluster_1/`\n\n### 4.模组与启动脚本\n服务器目录下的mod文件是确定要下载哪些mod：\n```bash\ncd /dontstarvetogether_dedicated_server/mods\nvim dedicated_server_mods_setup.lua\n```\n\n存档中启用的mod在这里`.klei/DoNotStarveTogether/Cluster_1/Master/modoverride.lua`查看，这是地面的，记得还有洞穴。\n\n我的启动脚本`DST.sh`在用户目录下，内容是这样的：\n```text `!/bin/bash`\n\nsteamcmd_dir=\"/usr/games\"\ninstall_dir=\"$HOME/Steam/steamapps/common/Don't Starve Together Dedicated Server\"\ncluster_name=\"Cluster_1\"\ndontstarve_dir=\"$HOME/.klei/DoNotStarveTogether\"\n\nfunction fail() {\n    echo Error: \"$@\" >&2\n    exit 1\n}\n\nfunction check_for_file() { \n    if [ ! -e \"$1\" ]; then\n        fail \"Missing file: $1\"\n    fi\n}\n\ncd \"$steamcmd_dir\" || fail \"Missing $steamcmd_dir directory!\"\ncheck_for_file \"steamcmd\"\ncheck_for_file \"$dontstarve_dir/$cluster_name/cluster.ini\"\ncheck_for_file \"$dontstarve_dir/$cluster_name/cluster_token.txt\"\ncheck_for_file \"$dontstarve_dir/$cluster_name/Master/server.ini\"\ncheck_for_file \"$dontstarve_dir/$cluster_name/Caves/server.ini\"\ncheck_for_file \"$install_dir/bin\"\ncd \"$install_dir/bin\" || fail\nrun_shared=(./dontstarve_dedicated_server_nullrenderer)\nrun_shared+=(-console)\nrun_shared+=(-cluster \"$cluster_name\")\nrun_shared+=(-monitor_parent_process $$)\nrun_shared+=(-shard)\n\"${run_shared[@]}\" Caves | sed 's/^/Caves: /' &\n\"${run_shared[@]}\" Master | sed 's/^/Master: /'\n```\n\n加个权限：\n```bash\nsudo chmod u+x DST.sh\n```\n\n### 5.开放端口\n在租用服务器的管理界面安全组开放端口。具体需要开放的端口可以查看存档文件夹下的这几个文件：\n```text\n# 饥荒端口，UDP协议\n~/.klei/DoNotStarveTogether/Cluster_1/cluster.ini 中的 master_port。\n~/.klei/DoNotStarveTogether/Cluster_1/Master/server.ini 中的 server_port。\n~/.klei/DoNotStarveTogether/Cluster_1/Caves/server.ini 中的 server_port\n# steam端口，TCP+UDP协议\n~/.klei/DoNotStarveTogether/Cluster_1/Caves/server.ini 中的 master_server_port、authentication_port\n```\n### 6.运行与后续\n带日志输出的运行：\n```bash\nnohup ./boot.sh>root.log 2>&1 &\n```\n据说可能会因为缺少依赖报错。\n\n运行成功如下：\n![DST.png](/images/DST.png)\n\n关闭就是找到PID然后kill掉：\n```bash\nps -ef | grep don\nkill 服务器pid\n```","slug":"2025-07-16-DST服务器","published":1,"__permalink":"dst服务器/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0nx0021zovd6c6r4xji","content":"<p>参考：<br><a href=\"https://www.bilibili.com/video/BV1HkY8eaEpH?spm_id_from=333.788.videopod.sections&vd_source=d97d82191b995e0ba21c3438b8cf6adb\">萌新亲测白嫖饥荒云服务器搭建成功全流程_哔哩哔哩bilibili_饥荒联机版</a><br><a href=\"https://www.bilibili.com/opus/798802812813180931\">饥荒联机版服务器搭建Linux（Ubuntu20.04）及常见报错和模组启用2023.5（超详细） - 哔哩哔哩</a><br>[搭建饥荒服务器（2024.3更新） - 知乎](<a href=\"https://zhuanlan.zhihu.com/p/625645476\">https://zhuanlan.zhihu.com/p/625645476</a><br><a href=\"https://www.hetong-re4per.com/posts/install-steamcmd-on-your-linux-server-and-setup-game-server/\">在你的 Linux 服务器上安装 SteamCMD 并搭建游戏服务器 · 瞳のBlog</a><br>知乎那篇最好用。<br>时间有点久远了，简单记一下，主要有这么几步：</p>\n<h3 id=\"1-安装steamcmd\"><a href=\"#1-安装steamcmd\" class=\"headerlink\" title=\"1.安装steamcmd\"></a>1.安装steamcmd</h3><p>直接装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install steamcmd</span><br></pre></td></tr></table></figure>\n\n<p>启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">steamcmd</span><br></pre></td></tr></table></figure>\n\n<p>装不上就先装依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> add-apt-repository multiverse</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> dpkg –add-architecture i386</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt update</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt install lib32gcc-s1 libcurl4-gnutls-dev:i386 lib32stdc++6 lib32z1 -y</span><br></pre></td></tr></table></figure>\n\n<p>还可以下载解压之后启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz</span><br><span class=\"line\">tar -xvzf steamcmd_linux.tar.gz</span><br><span class=\"line\">./steamcmd.sh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-安装游戏服务器\"><a href=\"#2-安装游戏服务器\" class=\"headerlink\" title=\"2.安装游戏服务器\"></a>2.安装游戏服务器</h3><p>在<a href=\"https://steamdb.info/\">SteamDB</a>找到饥荒的APP ID<br>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">steam&gt; force_install_dir ../dontstarvetogether_dedicated_server</span><br><span class=\"line\">steam&gt; login anonymous</span><br><span class=\"line\">steam&gt; app_update 343050 validate</span><br><span class=\"line\">steam&gt; quit</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-建一个服务器存档\"><a href=\"#3-建一个服务器存档\" class=\"headerlink\" title=\"3.建一个服务器存档\"></a>3.建一个服务器存档</h3><ol>\n<li>在windows上创建好地图，这会在电脑上生成一个存档文件，目录大概为：<code>C://User/xxx/文档/klei/DoNotStarveTogether</code></li>\n<li>访问<a href=\"https://accounts.klei.com/account/game/servers?game=DontStarveTogether\">Klei Account</a>建一个服务器token，将token复制到<code>cluster_token.txt</code>文件中，放在存档目录下。</li>\n<li>记录<a href=\"https://accounts.klei.com/account/info\">Klei Account</a>中的Klei ID，复制到<code>adminlist.txt</code>文件中，给自己加管理员权限。</li>\n<li>服务器的名称的名称和密码在<code>.klei/DoNotStarveTogether/Cluster_1/cluster.ini</code> 文件中</li>\n<li>整个文件目录上传到服务器上，我上传的位置是：<code>/home/ubuntu/.klei/DoNotStarveTogether/Cluster_1/</code></li>\n</ol>\n<h3 id=\"4-模组与启动脚本\"><a href=\"#4-模组与启动脚本\" class=\"headerlink\" title=\"4.模组与启动脚本\"></a>4.模组与启动脚本</h3><p>服务器目录下的mod文件是确定要下载哪些mod：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /dontstarvetogether_dedicated_server/mods</span><br><span class=\"line\">vim dedicated_server_mods_setup.lua</span><br></pre></td></tr></table></figure>\n\n<p>存档中启用的mod在这里<code>.klei/DoNotStarveTogether/Cluster_1/Master/modoverride.lua</code>查看，这是地面的，记得还有洞穴。</p>\n<p>我的启动脚本<code>DST.sh</code>在用户目录下，内容是这样的：<br>&#96;&#96;&#96;text <code>!/bin/bash</code></p>\n<p>steamcmd_dir&#x3D;”&#x2F;usr&#x2F;games”<br>install_dir&#x3D;”$HOME&#x2F;Steam&#x2F;steamapps&#x2F;common&#x2F;Don’t Starve Together Dedicated Server”<br>cluster_name&#x3D;”Cluster_1”<br>dontstarve_dir&#x3D;”$HOME&#x2F;.klei&#x2F;DoNotStarveTogether”</p>\n<p>function fail() {<br>    echo Error: “$@” &gt;&amp;2<br>    exit 1<br>}</p>\n<p>function check_for_file() {<br>    if [ ! -e “$1” ]; then<br>        fail “Missing file: $1”<br>    fi<br>}</p>\n<p>cd “$steamcmd_dir” || fail “Missing $steamcmd_dir directory!”<br>check_for_file “steamcmd”<br>check_for_file “$dontstarve_dir&#x2F;$cluster_name&#x2F;cluster.ini”<br>check_for_file “$dontstarve_dir&#x2F;$cluster_name&#x2F;cluster_token.txt”<br>check_for_file “$dontstarve_dir&#x2F;$cluster_name&#x2F;Master&#x2F;server.ini”<br>check_for_file “$dontstarve_dir&#x2F;$cluster_name&#x2F;Caves&#x2F;server.ini”<br>check_for_file “$install_dir&#x2F;bin”<br>cd “$install_dir&#x2F;bin” || fail<br>run_shared&#x3D;(.&#x2F;dontstarve_dedicated_server_nullrenderer)<br>run_shared+&#x3D;(-console)<br>run_shared+&#x3D;(-cluster “$cluster_name”)<br>run_shared+&#x3D;(-monitor_parent_process $$)<br>run_shared+&#x3D;(-shard)<br>“${run_shared[@]}” Caves | sed ‘s&#x2F;^&#x2F;Caves: &#x2F;‘ &amp;<br>“${run_shared[@]}” Master | sed ‘s&#x2F;^&#x2F;Master: &#x2F;‘</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">加个权限：</span><br><span class=\"line\">```bash</span><br><span class=\"line\">sudo chmod u+x DST.sh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-开放端口\"><a href=\"#5-开放端口\" class=\"headerlink\" title=\"5.开放端口\"></a>5.开放端口</h3><p>在租用服务器的管理界面安全组开放端口。具体需要开放的端口可以查看存档文件夹下的这几个文件：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 饥荒端口，UDP协议</span><br><span class=\"line\">~/.klei/DoNotStarveTogether/Cluster_1/cluster.ini 中的 master_port。</span><br><span class=\"line\">~/.klei/DoNotStarveTogether/Cluster_1/Master/server.ini 中的 server_port。</span><br><span class=\"line\">~/.klei/DoNotStarveTogether/Cluster_1/Caves/server.ini 中的 server_port</span><br><span class=\"line\"># steam端口，TCP+UDP协议</span><br><span class=\"line\">~/.klei/DoNotStarveTogether/Cluster_1/Caves/server.ini 中的 master_server_port、authentication_port</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-运行与后续\"><a href=\"#6-运行与后续\" class=\"headerlink\" title=\"6.运行与后续\"></a>6.运行与后续</h3><p>带日志输出的运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">nohup</span> ./boot.sh&gt;root.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n<p>据说可能会因为缺少依赖报错。</p>\n<p>运行成功如下：<br><img src=\"/418blog/images/DST.png\" alt=\"DST.png\"></p>\n<p>关闭就是找到PID然后kill掉：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep don</span><br><span class=\"line\"><span class=\"built_in\">kill</span> 服务器pid</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>参考：<br><a href=\"https://www.bilibili.com/video/BV1HkY8eaEpH?spm_id_from=333.788.videopod.sections&vd_source=d97d82191b995e0ba21c3438b8cf6adb\">萌新亲测白嫖饥荒云服务器搭建成功全流程_哔哩哔哩bilibili_饥荒联机版</a><br><a href=\"https://www.bilibili.com/opus/798802812813180931\">饥荒联机版服务器搭建Linux（Ubuntu20.04）及常见报错和模组启用2023.5（超详细） - 哔哩哔哩</a><br>[搭建饥荒服务器（2024.3更新） - 知乎](<a href=\"https://zhuanlan.zhihu.com/p/625645476\">https://zhuanlan.zhihu.com/p/625645476</a><br><a href=\"https://www.hetong-re4per.com/posts/install-steamcmd-on-your-linux-server-and-setup-game-server/\">在你的 Linux 服务器上安装 SteamCMD 并搭建游戏服务器 · 瞳のBlog</a><br>知乎那篇最好用。<br>时间有点久远了，简单记一下，主要有这么几步：</p>\n<h3 id=\"1-安装steamcmd\"><a href=\"#1-安装steamcmd\" class=\"headerlink\" title=\"1.安装steamcmd\"></a>1.安装steamcmd</h3><p>直接装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install steamcmd</span><br></pre></td></tr></table></figure>\n\n<p>启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">steamcmd</span><br></pre></td></tr></table></figure>\n\n<p>装不上就先装依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> add-apt-repository multiverse</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> dpkg –add-architecture i386</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt update</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt install lib32gcc-s1 libcurl4-gnutls-dev:i386 lib32stdc++6 lib32z1 -y</span><br></pre></td></tr></table></figure>\n\n<p>还可以下载解压之后启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz</span><br><span class=\"line\">tar -xvzf steamcmd_linux.tar.gz</span><br><span class=\"line\">./steamcmd.sh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-安装游戏服务器\"><a href=\"#2-安装游戏服务器\" class=\"headerlink\" title=\"2.安装游戏服务器\"></a>2.安装游戏服务器</h3><p>在<a href=\"https://steamdb.info/\">SteamDB</a>找到饥荒的APP ID<br>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">steam&gt; force_install_dir ../dontstarvetogether_dedicated_server</span><br><span class=\"line\">steam&gt; login anonymous</span><br><span class=\"line\">steam&gt; app_update 343050 validate</span><br><span class=\"line\">steam&gt; quit</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-建一个服务器存档\"><a href=\"#3-建一个服务器存档\" class=\"headerlink\" title=\"3.建一个服务器存档\"></a>3.建一个服务器存档</h3><ol>\n<li>在windows上创建好地图，这会在电脑上生成一个存档文件，目录大概为：<code>C://User/xxx/文档/klei/DoNotStarveTogether</code></li>\n<li>访问<a href=\"https://accounts.klei.com/account/game/servers?game=DontStarveTogether\">Klei Account</a>建一个服务器token，将token复制到<code>cluster_token.txt</code>文件中，放在存档目录下。</li>\n<li>记录<a href=\"https://accounts.klei.com/account/info\">Klei Account</a>中的Klei ID，复制到<code>adminlist.txt</code>文件中，给自己加管理员权限。</li>\n<li>服务器的名称的名称和密码在<code>.klei/DoNotStarveTogether/Cluster_1/cluster.ini</code> 文件中</li>\n<li>整个文件目录上传到服务器上，我上传的位置是：<code>/home/ubuntu/.klei/DoNotStarveTogether/Cluster_1/</code></li>\n</ol>\n<h3 id=\"4-模组与启动脚本\"><a href=\"#4-模组与启动脚本\" class=\"headerlink\" title=\"4.模组与启动脚本\"></a>4.模组与启动脚本</h3><p>服务器目录下的mod文件是确定要下载哪些mod：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /dontstarvetogether_dedicated_server/mods</span><br><span class=\"line\">vim dedicated_server_mods_setup.lua</span><br></pre></td></tr></table></figure>\n\n<p>存档中启用的mod在这里<code>.klei/DoNotStarveTogether/Cluster_1/Master/modoverride.lua</code>查看，这是地面的，记得还有洞穴。</p>\n<p>我的启动脚本<code>DST.sh</code>在用户目录下，内容是这样的：<br>&#96;&#96;&#96;text <code>!/bin/bash</code></p>\n<p>steamcmd_dir&#x3D;”&#x2F;usr&#x2F;games”<br>install_dir&#x3D;”$HOME&#x2F;Steam&#x2F;steamapps&#x2F;common&#x2F;Don’t Starve Together Dedicated Server”<br>cluster_name&#x3D;”Cluster_1”<br>dontstarve_dir&#x3D;”$HOME&#x2F;.klei&#x2F;DoNotStarveTogether”</p>\n<p>function fail() {<br>    echo Error: “$@” &gt;&amp;2<br>    exit 1<br>}</p>\n<p>function check_for_file() {<br>    if [ ! -e “$1” ]; then<br>        fail “Missing file: $1”<br>    fi<br>}</p>\n<p>cd “$steamcmd_dir” || fail “Missing $steamcmd_dir directory!”<br>check_for_file “steamcmd”<br>check_for_file “$dontstarve_dir&#x2F;$cluster_name&#x2F;cluster.ini”<br>check_for_file “$dontstarve_dir&#x2F;$cluster_name&#x2F;cluster_token.txt”<br>check_for_file “$dontstarve_dir&#x2F;$cluster_name&#x2F;Master&#x2F;server.ini”<br>check_for_file “$dontstarve_dir&#x2F;$cluster_name&#x2F;Caves&#x2F;server.ini”<br>check_for_file “$install_dir&#x2F;bin”<br>cd “$install_dir&#x2F;bin” || fail<br>run_shared&#x3D;(.&#x2F;dontstarve_dedicated_server_nullrenderer)<br>run_shared+&#x3D;(-console)<br>run_shared+&#x3D;(-cluster “$cluster_name”)<br>run_shared+&#x3D;(-monitor_parent_process $$)<br>run_shared+&#x3D;(-shard)<br>“${run_shared[@]}” Caves | sed ‘s&#x2F;^&#x2F;Caves: &#x2F;‘ &amp;<br>“${run_shared[@]}” Master | sed ‘s&#x2F;^&#x2F;Master: &#x2F;‘</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">加个权限：</span><br><span class=\"line\">```bash</span><br><span class=\"line\">sudo chmod u+x DST.sh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-开放端口\"><a href=\"#5-开放端口\" class=\"headerlink\" title=\"5.开放端口\"></a>5.开放端口</h3><p>在租用服务器的管理界面安全组开放端口。具体需要开放的端口可以查看存档文件夹下的这几个文件：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 饥荒端口，UDP协议</span><br><span class=\"line\">~/.klei/DoNotStarveTogether/Cluster_1/cluster.ini 中的 master_port。</span><br><span class=\"line\">~/.klei/DoNotStarveTogether/Cluster_1/Master/server.ini 中的 server_port。</span><br><span class=\"line\">~/.klei/DoNotStarveTogether/Cluster_1/Caves/server.ini 中的 server_port</span><br><span class=\"line\"># steam端口，TCP+UDP协议</span><br><span class=\"line\">~/.klei/DoNotStarveTogether/Cluster_1/Caves/server.ini 中的 master_server_port、authentication_port</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-运行与后续\"><a href=\"#6-运行与后续\" class=\"headerlink\" title=\"6.运行与后续\"></a>6.运行与后续</h3><p>带日志输出的运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">nohup</span> ./boot.sh&gt;root.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n<p>据说可能会因为缺少依赖报错。</p>\n<p>运行成功如下：<br><img src=\"/418blog/images/DST.png\" alt=\"DST.png\"></p>\n<p>关闭就是找到PID然后kill掉：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep don</span><br><span class=\"line\"><span class=\"built_in\">kill</span> 服务器pid</span><br></pre></td></tr></table></figure>"},{"title":"Zotero","date":"2025-07-21T12:02:07.000Z","updated":"2025-07-21T03:01:11.000Z","_content":"\n## 批量替换语言为en的脚本\n\n```\n.zoteroPane = Zotero.getActiveZoteroPane();\nitems = zoteroPane.getSelectedItems();\nvar rn=0; //计数替换条目个数\nvar lan=\"en\"; //替换的语言\nfor (item of items) {\nvar la = item.getField(\"language\");\nif (la==\"\")  //如果为空则替换\n {item.setField(\"language\", lan);\nrn+=1;\n await item.saveTx();\n}\nif (la==\"English\")  //如果为English则替换\n {item.setField(\"language\", lan);\nrn+=1;\n await item.saveTx();\n}\nif (la==\"en-US\")  //如果为en-US则替换\n {item.setField(\"language\", lan);\nrn+=1;\n await item.saveTx();\n}\nif (la==\"eng\")  //如果为eng则替换\n {item.setField(\"language\", lan);\nrn+=1;\n await item.saveTx();\n}\n}\nreturn rn+\"个条目语言被替换为\"+lan+\"。\"\n```","source":"_posts/2025-07-21-Zotero.md","raw":"---\ntitle: Zotero\ndate: 2025-07-21 20:02:07\nupdated: 2025-07-21 11:01:11\ncategories:\n  - [学习笔记]\ntags:\npermalink: zotero/\n---\n\n## 批量替换语言为en的脚本\n\n```\n.zoteroPane = Zotero.getActiveZoteroPane();\nitems = zoteroPane.getSelectedItems();\nvar rn=0; //计数替换条目个数\nvar lan=\"en\"; //替换的语言\nfor (item of items) {\nvar la = item.getField(\"language\");\nif (la==\"\")  //如果为空则替换\n {item.setField(\"language\", lan);\nrn+=1;\n await item.saveTx();\n}\nif (la==\"English\")  //如果为English则替换\n {item.setField(\"language\", lan);\nrn+=1;\n await item.saveTx();\n}\nif (la==\"en-US\")  //如果为en-US则替换\n {item.setField(\"language\", lan);\nrn+=1;\n await item.saveTx();\n}\nif (la==\"eng\")  //如果为eng则替换\n {item.setField(\"language\", lan);\nrn+=1;\n await item.saveTx();\n}\n}\nreturn rn+\"个条目语言被替换为\"+lan+\"。\"\n```","slug":"2025-07-21-Zotero","published":1,"__permalink":"zotero/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0o30023zovdaxr6af09","content":"<h2 id=\"批量替换语言为en的脚本\"><a href=\"#批量替换语言为en的脚本\" class=\"headerlink\" title=\"批量替换语言为en的脚本\"></a>批量替换语言为en的脚本</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.zoteroPane = Zotero.getActiveZoteroPane();</span><br><span class=\"line\">items = zoteroPane.getSelectedItems();</span><br><span class=\"line\">var rn=0; //计数替换条目个数</span><br><span class=\"line\">var lan=&quot;en&quot;; //替换的语言</span><br><span class=\"line\">for (item of items) &#123;</span><br><span class=\"line\">var la = item.getField(&quot;language&quot;);</span><br><span class=\"line\">if (la==&quot;&quot;)  //如果为空则替换</span><br><span class=\"line\"> &#123;item.setField(&quot;language&quot;, lan);</span><br><span class=\"line\">rn+=1;</span><br><span class=\"line\"> await item.saveTx();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (la==&quot;English&quot;)  //如果为English则替换</span><br><span class=\"line\"> &#123;item.setField(&quot;language&quot;, lan);</span><br><span class=\"line\">rn+=1;</span><br><span class=\"line\"> await item.saveTx();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (la==&quot;en-US&quot;)  //如果为en-US则替换</span><br><span class=\"line\"> &#123;item.setField(&quot;language&quot;, lan);</span><br><span class=\"line\">rn+=1;</span><br><span class=\"line\"> await item.saveTx();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (la==&quot;eng&quot;)  //如果为eng则替换</span><br><span class=\"line\"> &#123;item.setField(&quot;language&quot;, lan);</span><br><span class=\"line\">rn+=1;</span><br><span class=\"line\"> await item.saveTx();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return rn+&quot;个条目语言被替换为&quot;+lan+&quot;。&quot;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"批量替换语言为en的脚本\"><a href=\"#批量替换语言为en的脚本\" class=\"headerlink\" title=\"批量替换语言为en的脚本\"></a>批量替换语言为en的脚本</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.zoteroPane = Zotero.getActiveZoteroPane();</span><br><span class=\"line\">items = zoteroPane.getSelectedItems();</span><br><span class=\"line\">var rn=0; //计数替换条目个数</span><br><span class=\"line\">var lan=&quot;en&quot;; //替换的语言</span><br><span class=\"line\">for (item of items) &#123;</span><br><span class=\"line\">var la = item.getField(&quot;language&quot;);</span><br><span class=\"line\">if (la==&quot;&quot;)  //如果为空则替换</span><br><span class=\"line\"> &#123;item.setField(&quot;language&quot;, lan);</span><br><span class=\"line\">rn+=1;</span><br><span class=\"line\"> await item.saveTx();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (la==&quot;English&quot;)  //如果为English则替换</span><br><span class=\"line\"> &#123;item.setField(&quot;language&quot;, lan);</span><br><span class=\"line\">rn+=1;</span><br><span class=\"line\"> await item.saveTx();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (la==&quot;en-US&quot;)  //如果为en-US则替换</span><br><span class=\"line\"> &#123;item.setField(&quot;language&quot;, lan);</span><br><span class=\"line\">rn+=1;</span><br><span class=\"line\"> await item.saveTx();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (la==&quot;eng&quot;)  //如果为eng则替换</span><br><span class=\"line\"> &#123;item.setField(&quot;language&quot;, lan);</span><br><span class=\"line\">rn+=1;</span><br><span class=\"line\"> await item.saveTx();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return rn+&quot;个条目语言被替换为&quot;+lan+&quot;。&quot;</span><br></pre></td></tr></table></figure>"},{"title":"香橙派相关","date":"2025-07-23T14:49:49.000Z","updated":"2025-07-23T08:56:00.000Z","_content":"\n## 香橙派内核编译\n$Last Edited：2025.07.23/16:50$\n___\n\n直接按香橙派手册来就行：\n\n之前我在香橙派4的镜像\n`Orangepi4-lts_3.0.6_debian_bullseye_server_linux5.10.43`\n上编译了内核\n`linux-image-current-rk3399_3.1.2_arm64`\n印象里是加上了NFS相关的功能\n\n安装方式就是先在开发板中卸载已经安装的Linux内核的deb包：\n```bash\napt purge -y linux-image-current-rk3399\n```\n\n再安装新的deb包：\n```bash\ndpkg -i linux-image-current-rk3399_3.1.2_arm64.deb\n```\n重启开发板即可\n\n安装前后用`uname -a`可以看到内核的版本变化","source":"_posts/2025-07-23-香橙派相关.md","raw":"---\ntitle: 香橙派相关\ndate: 2025-07-23 22:49:49\nupdated: 2025-07-23 16:56:00\ncategories:\n  - [服务器&嵌入式平台操作, 基础配置]\ntags:\npermalink: 香橙派相关/\n---\n\n## 香橙派内核编译\n$Last Edited：2025.07.23/16:50$\n___\n\n直接按香橙派手册来就行：\n\n之前我在香橙派4的镜像\n`Orangepi4-lts_3.0.6_debian_bullseye_server_linux5.10.43`\n上编译了内核\n`linux-image-current-rk3399_3.1.2_arm64`\n印象里是加上了NFS相关的功能\n\n安装方式就是先在开发板中卸载已经安装的Linux内核的deb包：\n```bash\napt purge -y linux-image-current-rk3399\n```\n\n再安装新的deb包：\n```bash\ndpkg -i linux-image-current-rk3399_3.1.2_arm64.deb\n```\n重启开发板即可\n\n安装前后用`uname -a`可以看到内核的版本变化","slug":"2025-07-23-香橙派相关","published":1,"__permalink":"香橙派相关/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0o30025zovd7pvb5og8","content":"<h2 id=\"香橙派内核编译\"><a href=\"#香橙派内核编译\" class=\"headerlink\" title=\"香橙派内核编译\"></a>香橙派内核编译</h2><p>$Last Edited：2025.07.23&#x2F;16:50$</p>\n<hr>\n<p>直接按香橙派手册来就行：</p>\n<p>之前我在香橙派4的镜像<br><code>Orangepi4-lts_3.0.6_debian_bullseye_server_linux5.10.43</code><br>上编译了内核<br><code>linux-image-current-rk3399_3.1.2_arm64</code><br>印象里是加上了NFS相关的功能</p>\n<p>安装方式就是先在开发板中卸载已经安装的Linux内核的deb包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt purge -y linux-image-current-rk3399</span><br></pre></td></tr></table></figure>\n\n<p>再安装新的deb包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg -i linux-image-current-rk3399_3.1.2_arm64.deb</span><br></pre></td></tr></table></figure>\n<p>重启开发板即可</p>\n<p>安装前后用<code>uname -a</code>可以看到内核的版本变化</p>\n","excerpt":"","more":"<h2 id=\"香橙派内核编译\"><a href=\"#香橙派内核编译\" class=\"headerlink\" title=\"香橙派内核编译\"></a>香橙派内核编译</h2><p>$Last Edited：2025.07.23&#x2F;16:50$</p>\n<hr>\n<p>直接按香橙派手册来就行：</p>\n<p>之前我在香橙派4的镜像<br><code>Orangepi4-lts_3.0.6_debian_bullseye_server_linux5.10.43</code><br>上编译了内核<br><code>linux-image-current-rk3399_3.1.2_arm64</code><br>印象里是加上了NFS相关的功能</p>\n<p>安装方式就是先在开发板中卸载已经安装的Linux内核的deb包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt purge -y linux-image-current-rk3399</span><br></pre></td></tr></table></figure>\n\n<p>再安装新的deb包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg -i linux-image-current-rk3399_3.1.2_arm64.deb</span><br></pre></td></tr></table></figure>\n<p>重启开发板即可</p>\n<p>安装前后用<code>uname -a</code>可以看到内核的版本变化</p>\n"},{"title":"Conda-Q&A","date":"2025-07-24T12:54:54.000Z","updated":"2025-10-05T18:32:14.000Z","_content":"\n## windows命令提示符中conda不可用\n 会提示'conda' 不是内部或外部命令，也不是可运行的程序 或批处理文件\n 如下，将conda路径添加到环境变量即可：\n![conda环境变量.png](/images/conda环境变量.png)\n\n## 在Pycharm中添加解释器miniconda3\\condabin\\conda.bat出现了问题\nCondaToSNonInteractiveError: Terms of Service have not been accepted for the following channels. Please accept or remove them before proceeding: \\u2022 https://repo.anaconda.com/pkgs/main \\u2022 https://repo.anaconda.com/pkgs/r \\u2022 https://repo.anaconda.com/pkgs/msys2\n\n运行以下命令触发协议确认：\n```shell\nconda install -n base _license\n```\n\n另一种没试过的方法：\n更新 Conda（长期解决方案）\n\n1. 更新 Conda 到最新版本：\n```shell\nconda update -n base conda\n```\n\n2. 更新后使用新语法接受协议：\n```shell\nconda config --set channel_alias https://repo.anaconda.com/pkgs/main --accept license:yes\n```","source":"_posts/2025-07-24-Conda-QA.md","raw":"---\ntitle: Conda-Q&A\ndate: 2025-07-24 20:54:54\nupdated: 2025-10-06 02:32:14\ncategories:\n  - [服务器&嵌入式平台操作, Q&A问题及解决汇总]\ntags:\npermalink: conda-q&a/\n---\n\n## windows命令提示符中conda不可用\n 会提示'conda' 不是内部或外部命令，也不是可运行的程序 或批处理文件\n 如下，将conda路径添加到环境变量即可：\n![conda环境变量.png](/images/conda环境变量.png)\n\n## 在Pycharm中添加解释器miniconda3\\condabin\\conda.bat出现了问题\nCondaToSNonInteractiveError: Terms of Service have not been accepted for the following channels. Please accept or remove them before proceeding: \\u2022 https://repo.anaconda.com/pkgs/main \\u2022 https://repo.anaconda.com/pkgs/r \\u2022 https://repo.anaconda.com/pkgs/msys2\n\n运行以下命令触发协议确认：\n```shell\nconda install -n base _license\n```\n\n另一种没试过的方法：\n更新 Conda（长期解决方案）\n\n1. 更新 Conda 到最新版本：\n```shell\nconda update -n base conda\n```\n\n2. 更新后使用新语法接受协议：\n```shell\nconda config --set channel_alias https://repo.anaconda.com/pkgs/main --accept license:yes\n```","slug":"2025-07-24-Conda-QA","published":1,"__permalink":"conda-q&a/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0o40028zovdflzy5nlt","content":"<h2 id=\"windows命令提示符中conda不可用\"><a href=\"#windows命令提示符中conda不可用\" class=\"headerlink\" title=\"windows命令提示符中conda不可用\"></a>windows命令提示符中conda不可用</h2><p> 会提示’conda’ 不是内部或外部命令，也不是可运行的程序 或批处理文件<br> 如下，将conda路径添加到环境变量即可：<br><img src=\"/418blog/images/conda%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png\" alt=\"conda环境变量.png\"></p>\n<h2 id=\"在Pycharm中添加解释器miniconda3-condabin-conda-bat出现了问题\"><a href=\"#在Pycharm中添加解释器miniconda3-condabin-conda-bat出现了问题\" class=\"headerlink\" title=\"在Pycharm中添加解释器miniconda3\\condabin\\conda.bat出现了问题\"></a>在Pycharm中添加解释器miniconda3\\condabin\\conda.bat出现了问题</h2><p>CondaToSNonInteractiveError: Terms of Service have not been accepted for the following channels. Please accept or remove them before proceeding: \\u2022 <a href=\"https://repo.anaconda.com/pkgs/main\">https://repo.anaconda.com/pkgs/main</a> \\u2022 <a href=\"https://repo.anaconda.com/pkgs/r\">https://repo.anaconda.com/pkgs/r</a> \\u2022 <a href=\"https://repo.anaconda.com/pkgs/msys2\">https://repo.anaconda.com/pkgs/msys2</a></p>\n<p>运行以下命令触发协议确认：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install -n base _license</span><br></pre></td></tr></table></figure>\n\n<p>另一种没试过的方法：<br>更新 Conda（长期解决方案）</p>\n<ol>\n<li><p>更新 Conda 到最新版本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda update -n base conda</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新后使用新语法接受协议：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda config --set channel_alias https://repo.anaconda.com/pkgs/main --accept license:yes</span><br></pre></td></tr></table></figure></li>\n</ol>\n","excerpt":"","more":"<h2 id=\"windows命令提示符中conda不可用\"><a href=\"#windows命令提示符中conda不可用\" class=\"headerlink\" title=\"windows命令提示符中conda不可用\"></a>windows命令提示符中conda不可用</h2><p> 会提示’conda’ 不是内部或外部命令，也不是可运行的程序 或批处理文件<br> 如下，将conda路径添加到环境变量即可：<br><img src=\"/418blog/images/conda%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png\" alt=\"conda环境变量.png\"></p>\n<h2 id=\"在Pycharm中添加解释器miniconda3-condabin-conda-bat出现了问题\"><a href=\"#在Pycharm中添加解释器miniconda3-condabin-conda-bat出现了问题\" class=\"headerlink\" title=\"在Pycharm中添加解释器miniconda3\\condabin\\conda.bat出现了问题\"></a>在Pycharm中添加解释器miniconda3\\condabin\\conda.bat出现了问题</h2><p>CondaToSNonInteractiveError: Terms of Service have not been accepted for the following channels. Please accept or remove them before proceeding: \\u2022 <a href=\"https://repo.anaconda.com/pkgs/main\">https://repo.anaconda.com/pkgs/main</a> \\u2022 <a href=\"https://repo.anaconda.com/pkgs/r\">https://repo.anaconda.com/pkgs/r</a> \\u2022 <a href=\"https://repo.anaconda.com/pkgs/msys2\">https://repo.anaconda.com/pkgs/msys2</a></p>\n<p>运行以下命令触发协议确认：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install -n base _license</span><br></pre></td></tr></table></figure>\n\n<p>另一种没试过的方法：<br>更新 Conda（长期解决方案）</p>\n<ol>\n<li><p>更新 Conda 到最新版本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda update -n base conda</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新后使用新语法接受协议：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda config --set channel_alias https://repo.anaconda.com/pkgs/main --accept license:yes</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"杂项","date":"2025-07-29T18:26:35.000Z","updated":"2025-07-29T18:27:31.000Z","_content":"\n## 解决：git SSL certificate problem: unable to get local issuer certificate\n来源：[解决：git SSL certificate problem: unable to get local issuer certificate-CSDN博客](https://blog.csdn.net/weixin_44014995/article/details/109900149)\n\n错误： git SSL certificate problem: unable to get local issuer certificate\n这个问题是由于没有配置信任的服务器HTTPS验证。默认，cURL被设为不信任任何CAs，就是说，它不信任任何服务器验证。\n\n只需要执行下面命令就可以解决：\n```\ngit config --global http.sslVerify false\n```","source":"_posts/2025-07-30-杂项.md","raw":"---\ntitle: 杂项\ndate: 2025-07-30 02:26:35\nupdated: 2025-07-30 02:27:31\ncategories:\n  - [服务器&嵌入式平台操作, Q&A问题及解决汇总]\ntags:\npermalink: 杂项/\n---\n\n## 解决：git SSL certificate problem: unable to get local issuer certificate\n来源：[解决：git SSL certificate problem: unable to get local issuer certificate-CSDN博客](https://blog.csdn.net/weixin_44014995/article/details/109900149)\n\n错误： git SSL certificate problem: unable to get local issuer certificate\n这个问题是由于没有配置信任的服务器HTTPS验证。默认，cURL被设为不信任任何CAs，就是说，它不信任任何服务器验证。\n\n只需要执行下面命令就可以解决：\n```\ngit config --global http.sslVerify false\n```","slug":"2025-07-30-杂项","published":1,"__permalink":"杂项/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0o5002azovdasfw22hc","content":"<h2 id=\"解决：git-SSL-certificate-problem-unable-to-get-local-issuer-certificate\"><a href=\"#解决：git-SSL-certificate-problem-unable-to-get-local-issuer-certificate\" class=\"headerlink\" title=\"解决：git SSL certificate problem: unable to get local issuer certificate\"></a>解决：git SSL certificate problem: unable to get local issuer certificate</h2><p>来源：<a href=\"https://blog.csdn.net/weixin_44014995/article/details/109900149\">解决：git SSL certificate problem: unable to get local issuer certificate-CSDN博客</a></p>\n<p>错误： git SSL certificate problem: unable to get local issuer certificate<br>这个问题是由于没有配置信任的服务器HTTPS验证。默认，cURL被设为不信任任何CAs，就是说，它不信任任何服务器验证。</p>\n<p>只需要执行下面命令就可以解决：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.sslVerify false</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"解决：git-SSL-certificate-problem-unable-to-get-local-issuer-certificate\"><a href=\"#解决：git-SSL-certificate-problem-unable-to-get-local-issuer-certificate\" class=\"headerlink\" title=\"解决：git SSL certificate problem: unable to get local issuer certificate\"></a>解决：git SSL certificate problem: unable to get local issuer certificate</h2><p>来源：<a href=\"https://blog.csdn.net/weixin_44014995/article/details/109900149\">解决：git SSL certificate problem: unable to get local issuer certificate-CSDN博客</a></p>\n<p>错误： git SSL certificate problem: unable to get local issuer certificate<br>这个问题是由于没有配置信任的服务器HTTPS验证。默认，cURL被设为不信任任何CAs，就是说，它不信任任何服务器验证。</p>\n<p>只需要执行下面命令就可以解决：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.sslVerify false</span><br></pre></td></tr></table></figure>"},{"title":"目标跟踪结果对比工具","date":"2025-07-29T17:09:15.000Z","updated":"2025-08-15T04:31:12.000Z","_content":"\n## VOT-Toolkit\n\n$Last Edited：2025.08.05/03:08$\n___\n\n> [!NOTE] 版本信息\n> 工具包版本是0.7.4，来自VOT2025\n> \n\n### 安装\n直接pip下载或者从github主页[votchallenge/toolkit: The official VOT Challenge evaluation and analysis toolkit](https://github.com/votchallenge/toolkit)下载之后再本地安装\n```powershell\npip install vot-toolkit\n```\n\n本地安装操作如下，以从git上下载的zip文件解压后为例，文件名是`toolkit-master`\n```powershell\ncd /path/to/toolkit-master\npip install .\n```\n\n`vot -h`看一下支持的操作，这些都是后面要说的：\n```shell\n(trackers) PS D:\\CODE\\trackers\\vot_vot2018> vot -h       \nusage: vot [-h] [--debug] [--registry REGISTRY] {test,configure,initialize,evaluate,run,analysis,analyse,analyze,report,document,pack} ...\n\nVOT Toolkit Command Line Interface\n\noptions:\n  -h, --help            show this help message and exit\n  --debug, -d           Backup backend\n  --registry REGISTRY   Tracker registry paths\n\nCommands:\n  {test,configure,initialize,evaluate,run,analysis,analyse,analyze,report,document,pack}\n                        commands\n    test                Test a tracker integration on a synthetic sequence\n    configure (initialize)\n                        Setup a new workspace and download data\n    evaluate (run)      Evaluate one or more trackers in a given workspace\n    analysis (analyse, analyze)\n                        Run analysis of results\n    report (document)   Generate report document\n    pack                Package results for submission\n```\n### 新建工作区—initialize\n新建工作区的命令`vot initialize`，规则如下：\n```shell\nvot initialize <stack-name> --workspace <workspace-path>\n# 比如，workspace一定要是空文件夹\nvot initialize vot2018\\longterm --workspace ./vot_vot2018lt\n```\n这里的`<stack-name>`是数据集名称，用下面的指令会输出可用的stacks：\n```shell\n(trackers) PS D:\\CODE\\trackers> vot initialize\nUnable to continue without a stack\nList of available integrated stacks:\n * otb100 - OTB100 dataset experiment stack\n * otb50 - OTB50 dataset experiment stack\n * tests\\basic - VOT Basic Test Stack\n * tests\\multiobject - VOTS2023 Test Stack\n * tests\\segmentation - VOT Segmentation testing\n * vot2013 - VOT2013 challenge\n * vot2014 - VOT2014 challenge\n * vot2015\\rgb - VOT2015 challenge\n * vot2015\\tir - VOT-TIR2015 challenge\n * vot2016\\rgb - VOT2016 challenge\n * vot2016\\tir - VOT-TIR2016 challenge\n * vot2017 - VOT2017 challenge\n * vot2018\\longterm - VOT-LT2018 challenge\n * vot2018\\shortterm - VOT-ST2018 challenge\n * vot2019\\longterm - VOT-LT2019 challenge\n * vot2019\\rgbd - VOT-RGBD2019 challenge\n * vot2019\\rgbtir - VOT-RGBTIR2019 challenge\n * vot2019\\shortterm - VOT-ST2019 challenge\n * vot2020\\longterm - VOT-LT2020 challenge\n * vot2020\\rgbd - VOT-RGBD2020 challenge\n * vot2020\\rgbtir - VOT-RGBTIR2020 challenge\n * vot2020\\shortterm - VOT-ST2020 challenge\n * vot2021\\longterm - VOT-LT2021 challenge\n * vot2021\\rgbd - VOT-RGBD2021 challenge\n * vot2021\\shortterm - VOT-ST2021 challenge\n * vot2022\\depth - VOT-D2022 challenge\n * vot2022\\longterm - VOT-LT2022 challenge\n * vot2022\\rgbd - VOT-RGBD2022 challenge\n * vot2022\\shortterm - VOT-ST2021 segmentation challenge\n * vot2022\\shorttermbox - VOT-ST2022 bounding-box challenge\n * vots2023 - VOTS2023 Challenge Stack\n * vots2024\\main - VOTS2024 Challenge Stack\n * vots2024\\votst - VOTS2024 ST Challenge Stack\n * vots2024\\votstval - VOTS2024 ST Challenge Validation Stack\n * vots2025\\main - VOTS2025 Challenge Stack\n * vots2025\\realtime - VOTS2025-RT Challenge Stack\n * vots2025\\votst - VOTST2025 Challenge Stack\n * vots2025\\votstval - VOTS2025 ST Challenge Validation Stack\n```\n\n但是发现当前环境的vot库中`C:\\Users\\Administrator\\.conda\\envs\\trackers\\Lib\\site-packages\\vot\\stack`文件目录是空的，这会导致initialize工作区时会出现错误：\n```shell\n(trackers) PS D:\\CODE\\trackers> vot initialize otb100 --workspace ./toolkit-workspace     \nExperiment stack None not found\n```\n\n这个输出也是空的\n```\n(trackers) PS D:\\CODE\\trackers> vot initialize\nUnable to continue without a stack\nList of available integrated stacks:\n```\n\n这时需要手动把安装时下载文件目录`toolkit-master`中的`./vot/stack`目录下的文件复制到当前环境的vot库里的`stack`目录下\n\n这时候再新建就能跑通了，一般来说第一次新建会下载数据集：\n下载中：\n```shell\n(trackers) PS D:\\CODE\\trackers> vot initialize vot2018\\longterm --workspace ./vot_vot2018lt\nDownloading sequence dataset \"VOT2018 Long-Term Challenge\" with 35 sequences (total 9.5GiB).\n Downloading          |██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                         |  69% [24:30<11:37]\n```\n创建完成：\n```shell\n(trackers) PS D:\\CODE\\trackers> vot initialize vot2018\\longterm --workspace ./vot_vot2018lt\nDownloading sequence dataset \"VOT2018 Long-Term Challenge\" with 35 sequences (total 9.5GiB).\nSuccessfully downloaded all sequences.                                                                                                                                                                                             \nDownload completed\nInitialized workspace in './vot_vot2018lt'\n```\n\n如果提示`Workspace already initialized`，并且数据集没有下载，原因应该是workspace的文件目录不是空的，建议删了重新initialize。\n\n我看[vot-toolkit-python测试DiMP50在VOT2018上的表现-CSDN博客](https://blog.csdn.net/laizi_laizi/article/details/110444884)这个博客里，说是有`--nodownload`这个选项，然后自己手动下载数据集，后面再去移动或者建立软连接。\n试了下，即使手动配置了数据集还是会在`evaluate`的时候重新下载，可能是我数据集格式不对？\n另外`--nodownload`我没试过，上面讲的我的workspace没有数据集这个情况，是因为出了网络问题没下载下来。\n\n### 修改配置文件并测试—test\n新建的工作区一般是这个结构：\n```text\nMode                 LastWriteTime         Length Name                                                                                                                                                                             \n----                 -------------         ------ ----\nd-----          2025/8/1      2:17                sequences\n-a----          2025/8/1      1:43             54 config.yaml                   \n-a----          2025/8/1      2:33            323 trackers.ini\n```\n\n按下面这个步骤走：\n\n1. 修改新建工作区中的`trackers.ini`文件，下面是一个已经写好的\n```ini\n[PLAT]  # <tracker-name>  \nlabel = PLAT  \nprotocol = traxpython  \n  \ncommand = VOTtest  \n  \n# Specify a path to trax python wrapper if it is not visible (separate by ; if using multiple paths)  \npaths = D:/CODE/trackers/plat4edge  \n  \n# Additional environment paths  \nenv_PATH = C:/Users/Administrator/.conda/envs/trackers/python.exe\n```\n中括号里的和==label==就是名字，==command==是需要运行的跟踪文件，名字是自己起的，比如VOTtest就对应我自己的VOTtest.py，也就是包装器（wrapper）文件，分单目标多目标等很多种，在官方的GitHub上有定义写法[integration/python at master · votchallenge/integration](https://github.com/votchallenge/integration/tree/master/python)。注意，command不要带字符'-'，不然会报错：\n```powershell\nGenerating dummy sequence\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'vot' is not defined\nUnable to connect to tracker\n```\n==paths==是包装器文件所在的路径，==env_PATH==是python解释器的路径，这里我用的是虚拟环境的解释器\n\n如果已经有其他跟踪器结果，不需要自行评估，但是后续分析报告会用到，那在后面加上这些：\n```ini\n[SiamRPN]  # <tracker-name>  \nlabel = SiamRPN  \nprotocol = traxpython  \n  \ncommand = VOTtest\n```\n前三个参数就够了，类似的可以加很多个，只要名字对上就能用。command要有不然会报错，至于填什么应该无所谓，别空着就行。\n\n2. 创建一个==按照工具包规则定义的单目标跟踪器==python文件，也就是包装器\n我的command对应文件`VOTtest.py`改好之后是这样的，之前的跟踪器定义没有confidence返回值，所以还回去改了一下跟踪器代码，就是这个LATtracker_vot\n```python\nimport vot  \nimport sys  \nimport time  \nimport cv2  \nimport numpy  \nimport sys  \nimport os # 导入 os 模块  \n  \n# --- 在所有其他导入之前，手动将项目根目录添加到 sys.path ---# __file__ 是当前脚本的路径 D:/CODE/trackers/plat4edge/VOTtest.py# os.path.dirname(__file__) 是脚本所在的目录 D:/CODE/trackers/plat4edge# 再取一次 dirname 就得到了项目的根目录 D:/CODE/trackersproject_root = os.path.dirname(os.path.dirname(__file__))  \nsys.path.insert(0, project_root)  \n  \nfrom plat4edge.tracker.PLATtracker_vot import PLATTracker  \n\nclass VOTTracker(object):  \n    \"\"\"  \n    符合VOT接口的包装器类，它导入并使用您的 PLATTracker。  \n    \"\"\"  \n    def __init__(self, image, region):  \n        \"\"\"  \n        初始化函数。  \n        Args:            image (numpy.ndarray): VOT提供的第一帧图像 (RGB)。  \n            region (vot.Rectangle): VOT提供的初始目标区域。  \n        \"\"\"        # --- 在这里配置您的模型路径 ---        model_path = 'D:/CODE/trackers/plat4edge/siamlat_1.1_70.pth'  \n  \n        # 1. 实例化您自己的跟踪器  \n        self.tracker = PLATTracker(model_path)  \n  \n        # 2. 将VOT的region格式转换为 [x, y, w, h] 格式  \n        bbox = [region.x, region.y, region.width, region.height]  \n  \n        # 3. 调用核心跟踪器的初始化方法  \n        self.tracker.init(image, bbox)  \n  \n    def track(self, image):  \n        \"\"\"  \n        跟踪函数。  \n        Args:            image (numpy.ndarray): VOT提供的后续图像帧 (RGB)。  \n        Returns:            tuple: (vot.Rectangle, float) 包含预测区域和其置信度。  \n        \"\"\"        # 1. 调用您的跟踪器的更新方法，它现在会返回bbox和confidence  \n        predicted_bbox, confidence = self.tracker.update(image)  \n  \n        # 2. 将返回的 numpy 数组转换为 VOT 需要的 Rectangle 对象  \n        predicted_region = vot.Rectangle(predicted_bbox[0], predicted_bbox[1], predicted_bbox[2], predicted_bbox[3])  \n  \n        # 3. 返回VOT需要的结果  \n        return predicted_region, confidence  \n\n# ==========================================================  \n#                  VOT 主 循 环  \n# ==========================================================  \n  \n# 1. 初始化VOT句柄  \nhandle = vot.VOT(\"rectangle\")  \nselection = handle.region()  \n  \n# 2. 获取第一帧并检查  \nimagefile = handle.frame()  \nif not imagefile:  \n    sys.exit(0)  \n  \n# 3. 读取第一帧图像 (必须是彩色图像)  \nimage = cv2.imread(imagefile, cv2.IMREAD_COLOR)  \n  \n# 4. 初始化VOT包装器，这会进一步初始化您的PLATTracker  \ntracker = VOTTracker(image, selection)  \n  \n# 5. 进入主循环  \nwhile True:  \n    # 获取新的一帧路径  \n    imagefile = handle.frame()  \n    if not imagefile:  \n        break  # 序列结束  \n  \n    # 读取图像  \n    image = cv2.imread(imagefile, cv2.IMREAD_COLOR)  \n  \n    # 调用跟踪方法  \n    region, confidence = tracker.track(image)  \n  \n    # 向VOT环境报告结果  \n    handle.report(region, confidence)\n```\n\n3. 把`vot.py`放到跟踪器python文件可以import的目录中\n从site-package里import的vot缺一点东西，官方GitHub提供了另一份`vot.py`文件[integration/python at master · votchallenge/integration](https://github.com/votchallenge/integration/tree/master/python)，可能就是想让我们本地导入的。\n\n4. 使用test指令查看是否能正常运行\n如果上面配置都没毛病，运行下面的指令是不会出错的，可以检验一下：\n```shell\nvot test PLAT -g\n```\n记得在workspace目录下运行\n\n### 评估模型—evaluate\n我比较喜欢在workspace也就是工作区目录下运行，这样就不用加参数--workspace了，以下都是在workspace目录下运行的结果。\n\n看一下参数：\n```shell\n(trackers) PS D:\\CODE\\trackers\\vot_vot2018> vot evaluate -h\nusage: vot evaluate [-h] [--force] [--persist] [--workspace WORKSPACE] [--experiments EXPERIMENTS] trackers [trackers ...]\n\npositional arguments:\n  trackers              Tracker identifiers\n\noptions:\n  -h, --help            show this help message and exit\n  --force, -f           Force rerun of the entire evaluation\n  --persist, -p         Persist execution even in case of an error\n  --workspace WORKSPACE\n                        Workspace path\n  --experiments EXPERIMENTS\n                        Filter specified experiments (comma separated names)\n```\n\n评估模型就是用自己的跟踪器跑几遍工作区的数据集，在sequence目录下，这个运行时间很长，不过可以去stack里改，下面会说。\n```\nvot evaluate PLAT\n```\n\n最后工作区里会出现results的文件目录，结构类似：\n```\n--results\n  --PLAT\n    --baseline\n\t --realtime\n\t --unsupervised\n```\n最后一级是几个要做的实验名，不同数据集可能不一样。历年的官网上可以下载挑战赛对应数据集benchmark模型的结果，结构也是差不多的，同样直接放在这个results目录下就行，后面对比时可以用到。\n\n另外要提一点，评估时如果检测到文件目录存在时不会执行的，建议重新评估时删掉原来的。\n\n在site-package的目录下，类似：`C:\\Users\\Administrator\\.conda\\envs\\trackers\\Lib\\site-packages\\vot\\stack`，能找到这样一些yaml配置文件，按需修改。\n以vot2018/shortterm为例：\n```yaml\ntitle: VOT-ST2018 challenge\n\ndataset: http://data.votchallenge.net/vot2018/main/description.json\n\nurl: http://www.votchallenge.net/vot2018/\n\nexperiments:\n\n  baseline:\n\n    type: supervised\n\n    repetitions: 3\n\n    skip_initialize: 5\n\n    analyses:\n\n      - type: supervised_average_ar\n\n        sensitivity: 30\n\n      - type: supervised_eao_score\n\n        low: 100\n\n        high: 356\n\n      - type: supervised_eao_curve\n\n  realtime:\n\n    type: supervised\n\n    realtime:\n\n      grace: 3\n\n    repetitions: 1\n\n    skip_initialize: 5\n\n    analyses:\n\n      - type: supervised_average_ar\n\n        sensitivity: 30\n\n      - type: supervised_eao_score\n\n        low: 100\n\n        high: 356\n\n      - type: supervised_eao_curve\n\n  unsupervised:\n\n    type: unsupervised\n\n    repetitions: 1\n\n    analyses:\n\n      - type: average_accuracy\n```\n里面包含了几个实验的相关参数，我修改了repetitions到3，这样可以快一些。\n\n### 分析评估结果—analysis\n看一下参数：\n```shell\n(trackers) PS D:\\CODE\\trackers\\vot_vot2018> vot analysis -h\nusage: vot analysis [-h] [--workspace WORKSPACE] [--format {json,yaml}] [--name NAME] [trackers ...]\n\npositional arguments:\n  trackers              Tracker identifiers\n\noptions:\n  -h, --help            show this help message and exit\n  --workspace WORKSPACE\n                        Workspace path\n  --format {json,yaml}  Analysis output format\n  --name NAME           Analysis output name\n```\n\n当上一步评估被正确执行并产生了results文件目录，就可以运行分析，只要有跟踪器在results目录下存在结果就行，所以==直接拿官网结果放在目录下也能分析==:\n```shell\nvot analysis PLAT --name PLAT \n```\n会生成analysis和cache目录\n\n### 得到可视化报告—report\n可以看到以下输入参数：\n```shell\n(trackers) PS D:\\CODE\\trackers\\vot_vot2018> vot report -h     \nusage: vot report [-h] [--workspace WORKSPACE] [--format {html,latex,plots}] [--name NAME] [--sequences SEQUENCES] [--experiments EXPERIMENTS] [trackers ...]\n\npositional arguments:\n  trackers              Tracker identifiers\n\noptions:\n  -h, --help            show this help message and exit\n  --workspace WORKSPACE\n                        Workspace path\n  --format {html,latex,plots}\n                        Analysis output format\n  --name NAME           Document output name\n  --sequences SEQUENCES\n                        Filter specified sequences (comma separated names)\n  --experiments EXPERIMENTS\n                        Filter specified experiments (comma separated names)\n```\n\n分析得到的analysis目录下json文件看不明白，所以还是得换成图像展示，这就用到了report\n\nreport可以生成单个或多个模型的报告，如果是多个模型会在一起比较。\n```shell\nvot report SiamRPN PLAT SiamFC KCF RCO LADCF ECO DeepCSRDCF\n```\n会出现report目录以及目录下的html文件\n\n## Pysot-Toolkit\n```powershell\n $env:PYTHONPATH = \"D:/CODE/trackers/pysot-toolkit;$env:PYTHONPATH\"\n```\n\n如果在linux/macOS就是：\n```bash\nexport PYTHONPATH='D:/CODE/trackers/pysot-toolkit':$PYTHONPATH\n```\n\n```python\nax.grid(b=True)\n# matplotib版本更新，从 3.5 版开始 `b` 这个关键字被移除，改成下面这个\nax.grid(True)\n```\n\n安装装 **MiKTeX**（体积小、按需下载）或 **TeX Live**（完整、体积大），用来显示绘图结果。","source":"_posts/2025-07-30-目标跟踪结果对比工具.md","raw":"---\ntitle: 目标跟踪结果对比工具\ndate: 2025-07-30 01:09:15\nupdated: 2025-08-15 12:31:12\ncategories:\n  - [服务器&嵌入式平台操作, 工具]\ntags:\npermalink: 目标跟踪结果对比工具/\n---\n\n## VOT-Toolkit\n\n$Last Edited：2025.08.05/03:08$\n___\n\n> [!NOTE] 版本信息\n> 工具包版本是0.7.4，来自VOT2025\n> \n\n### 安装\n直接pip下载或者从github主页[votchallenge/toolkit: The official VOT Challenge evaluation and analysis toolkit](https://github.com/votchallenge/toolkit)下载之后再本地安装\n```powershell\npip install vot-toolkit\n```\n\n本地安装操作如下，以从git上下载的zip文件解压后为例，文件名是`toolkit-master`\n```powershell\ncd /path/to/toolkit-master\npip install .\n```\n\n`vot -h`看一下支持的操作，这些都是后面要说的：\n```shell\n(trackers) PS D:\\CODE\\trackers\\vot_vot2018> vot -h       \nusage: vot [-h] [--debug] [--registry REGISTRY] {test,configure,initialize,evaluate,run,analysis,analyse,analyze,report,document,pack} ...\n\nVOT Toolkit Command Line Interface\n\noptions:\n  -h, --help            show this help message and exit\n  --debug, -d           Backup backend\n  --registry REGISTRY   Tracker registry paths\n\nCommands:\n  {test,configure,initialize,evaluate,run,analysis,analyse,analyze,report,document,pack}\n                        commands\n    test                Test a tracker integration on a synthetic sequence\n    configure (initialize)\n                        Setup a new workspace and download data\n    evaluate (run)      Evaluate one or more trackers in a given workspace\n    analysis (analyse, analyze)\n                        Run analysis of results\n    report (document)   Generate report document\n    pack                Package results for submission\n```\n### 新建工作区—initialize\n新建工作区的命令`vot initialize`，规则如下：\n```shell\nvot initialize <stack-name> --workspace <workspace-path>\n# 比如，workspace一定要是空文件夹\nvot initialize vot2018\\longterm --workspace ./vot_vot2018lt\n```\n这里的`<stack-name>`是数据集名称，用下面的指令会输出可用的stacks：\n```shell\n(trackers) PS D:\\CODE\\trackers> vot initialize\nUnable to continue without a stack\nList of available integrated stacks:\n * otb100 - OTB100 dataset experiment stack\n * otb50 - OTB50 dataset experiment stack\n * tests\\basic - VOT Basic Test Stack\n * tests\\multiobject - VOTS2023 Test Stack\n * tests\\segmentation - VOT Segmentation testing\n * vot2013 - VOT2013 challenge\n * vot2014 - VOT2014 challenge\n * vot2015\\rgb - VOT2015 challenge\n * vot2015\\tir - VOT-TIR2015 challenge\n * vot2016\\rgb - VOT2016 challenge\n * vot2016\\tir - VOT-TIR2016 challenge\n * vot2017 - VOT2017 challenge\n * vot2018\\longterm - VOT-LT2018 challenge\n * vot2018\\shortterm - VOT-ST2018 challenge\n * vot2019\\longterm - VOT-LT2019 challenge\n * vot2019\\rgbd - VOT-RGBD2019 challenge\n * vot2019\\rgbtir - VOT-RGBTIR2019 challenge\n * vot2019\\shortterm - VOT-ST2019 challenge\n * vot2020\\longterm - VOT-LT2020 challenge\n * vot2020\\rgbd - VOT-RGBD2020 challenge\n * vot2020\\rgbtir - VOT-RGBTIR2020 challenge\n * vot2020\\shortterm - VOT-ST2020 challenge\n * vot2021\\longterm - VOT-LT2021 challenge\n * vot2021\\rgbd - VOT-RGBD2021 challenge\n * vot2021\\shortterm - VOT-ST2021 challenge\n * vot2022\\depth - VOT-D2022 challenge\n * vot2022\\longterm - VOT-LT2022 challenge\n * vot2022\\rgbd - VOT-RGBD2022 challenge\n * vot2022\\shortterm - VOT-ST2021 segmentation challenge\n * vot2022\\shorttermbox - VOT-ST2022 bounding-box challenge\n * vots2023 - VOTS2023 Challenge Stack\n * vots2024\\main - VOTS2024 Challenge Stack\n * vots2024\\votst - VOTS2024 ST Challenge Stack\n * vots2024\\votstval - VOTS2024 ST Challenge Validation Stack\n * vots2025\\main - VOTS2025 Challenge Stack\n * vots2025\\realtime - VOTS2025-RT Challenge Stack\n * vots2025\\votst - VOTST2025 Challenge Stack\n * vots2025\\votstval - VOTS2025 ST Challenge Validation Stack\n```\n\n但是发现当前环境的vot库中`C:\\Users\\Administrator\\.conda\\envs\\trackers\\Lib\\site-packages\\vot\\stack`文件目录是空的，这会导致initialize工作区时会出现错误：\n```shell\n(trackers) PS D:\\CODE\\trackers> vot initialize otb100 --workspace ./toolkit-workspace     \nExperiment stack None not found\n```\n\n这个输出也是空的\n```\n(trackers) PS D:\\CODE\\trackers> vot initialize\nUnable to continue without a stack\nList of available integrated stacks:\n```\n\n这时需要手动把安装时下载文件目录`toolkit-master`中的`./vot/stack`目录下的文件复制到当前环境的vot库里的`stack`目录下\n\n这时候再新建就能跑通了，一般来说第一次新建会下载数据集：\n下载中：\n```shell\n(trackers) PS D:\\CODE\\trackers> vot initialize vot2018\\longterm --workspace ./vot_vot2018lt\nDownloading sequence dataset \"VOT2018 Long-Term Challenge\" with 35 sequences (total 9.5GiB).\n Downloading          |██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                         |  69% [24:30<11:37]\n```\n创建完成：\n```shell\n(trackers) PS D:\\CODE\\trackers> vot initialize vot2018\\longterm --workspace ./vot_vot2018lt\nDownloading sequence dataset \"VOT2018 Long-Term Challenge\" with 35 sequences (total 9.5GiB).\nSuccessfully downloaded all sequences.                                                                                                                                                                                             \nDownload completed\nInitialized workspace in './vot_vot2018lt'\n```\n\n如果提示`Workspace already initialized`，并且数据集没有下载，原因应该是workspace的文件目录不是空的，建议删了重新initialize。\n\n我看[vot-toolkit-python测试DiMP50在VOT2018上的表现-CSDN博客](https://blog.csdn.net/laizi_laizi/article/details/110444884)这个博客里，说是有`--nodownload`这个选项，然后自己手动下载数据集，后面再去移动或者建立软连接。\n试了下，即使手动配置了数据集还是会在`evaluate`的时候重新下载，可能是我数据集格式不对？\n另外`--nodownload`我没试过，上面讲的我的workspace没有数据集这个情况，是因为出了网络问题没下载下来。\n\n### 修改配置文件并测试—test\n新建的工作区一般是这个结构：\n```text\nMode                 LastWriteTime         Length Name                                                                                                                                                                             \n----                 -------------         ------ ----\nd-----          2025/8/1      2:17                sequences\n-a----          2025/8/1      1:43             54 config.yaml                   \n-a----          2025/8/1      2:33            323 trackers.ini\n```\n\n按下面这个步骤走：\n\n1. 修改新建工作区中的`trackers.ini`文件，下面是一个已经写好的\n```ini\n[PLAT]  # <tracker-name>  \nlabel = PLAT  \nprotocol = traxpython  \n  \ncommand = VOTtest  \n  \n# Specify a path to trax python wrapper if it is not visible (separate by ; if using multiple paths)  \npaths = D:/CODE/trackers/plat4edge  \n  \n# Additional environment paths  \nenv_PATH = C:/Users/Administrator/.conda/envs/trackers/python.exe\n```\n中括号里的和==label==就是名字，==command==是需要运行的跟踪文件，名字是自己起的，比如VOTtest就对应我自己的VOTtest.py，也就是包装器（wrapper）文件，分单目标多目标等很多种，在官方的GitHub上有定义写法[integration/python at master · votchallenge/integration](https://github.com/votchallenge/integration/tree/master/python)。注意，command不要带字符'-'，不然会报错：\n```powershell\nGenerating dummy sequence\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'vot' is not defined\nUnable to connect to tracker\n```\n==paths==是包装器文件所在的路径，==env_PATH==是python解释器的路径，这里我用的是虚拟环境的解释器\n\n如果已经有其他跟踪器结果，不需要自行评估，但是后续分析报告会用到，那在后面加上这些：\n```ini\n[SiamRPN]  # <tracker-name>  \nlabel = SiamRPN  \nprotocol = traxpython  \n  \ncommand = VOTtest\n```\n前三个参数就够了，类似的可以加很多个，只要名字对上就能用。command要有不然会报错，至于填什么应该无所谓，别空着就行。\n\n2. 创建一个==按照工具包规则定义的单目标跟踪器==python文件，也就是包装器\n我的command对应文件`VOTtest.py`改好之后是这样的，之前的跟踪器定义没有confidence返回值，所以还回去改了一下跟踪器代码，就是这个LATtracker_vot\n```python\nimport vot  \nimport sys  \nimport time  \nimport cv2  \nimport numpy  \nimport sys  \nimport os # 导入 os 模块  \n  \n# --- 在所有其他导入之前，手动将项目根目录添加到 sys.path ---# __file__ 是当前脚本的路径 D:/CODE/trackers/plat4edge/VOTtest.py# os.path.dirname(__file__) 是脚本所在的目录 D:/CODE/trackers/plat4edge# 再取一次 dirname 就得到了项目的根目录 D:/CODE/trackersproject_root = os.path.dirname(os.path.dirname(__file__))  \nsys.path.insert(0, project_root)  \n  \nfrom plat4edge.tracker.PLATtracker_vot import PLATTracker  \n\nclass VOTTracker(object):  \n    \"\"\"  \n    符合VOT接口的包装器类，它导入并使用您的 PLATTracker。  \n    \"\"\"  \n    def __init__(self, image, region):  \n        \"\"\"  \n        初始化函数。  \n        Args:            image (numpy.ndarray): VOT提供的第一帧图像 (RGB)。  \n            region (vot.Rectangle): VOT提供的初始目标区域。  \n        \"\"\"        # --- 在这里配置您的模型路径 ---        model_path = 'D:/CODE/trackers/plat4edge/siamlat_1.1_70.pth'  \n  \n        # 1. 实例化您自己的跟踪器  \n        self.tracker = PLATTracker(model_path)  \n  \n        # 2. 将VOT的region格式转换为 [x, y, w, h] 格式  \n        bbox = [region.x, region.y, region.width, region.height]  \n  \n        # 3. 调用核心跟踪器的初始化方法  \n        self.tracker.init(image, bbox)  \n  \n    def track(self, image):  \n        \"\"\"  \n        跟踪函数。  \n        Args:            image (numpy.ndarray): VOT提供的后续图像帧 (RGB)。  \n        Returns:            tuple: (vot.Rectangle, float) 包含预测区域和其置信度。  \n        \"\"\"        # 1. 调用您的跟踪器的更新方法，它现在会返回bbox和confidence  \n        predicted_bbox, confidence = self.tracker.update(image)  \n  \n        # 2. 将返回的 numpy 数组转换为 VOT 需要的 Rectangle 对象  \n        predicted_region = vot.Rectangle(predicted_bbox[0], predicted_bbox[1], predicted_bbox[2], predicted_bbox[3])  \n  \n        # 3. 返回VOT需要的结果  \n        return predicted_region, confidence  \n\n# ==========================================================  \n#                  VOT 主 循 环  \n# ==========================================================  \n  \n# 1. 初始化VOT句柄  \nhandle = vot.VOT(\"rectangle\")  \nselection = handle.region()  \n  \n# 2. 获取第一帧并检查  \nimagefile = handle.frame()  \nif not imagefile:  \n    sys.exit(0)  \n  \n# 3. 读取第一帧图像 (必须是彩色图像)  \nimage = cv2.imread(imagefile, cv2.IMREAD_COLOR)  \n  \n# 4. 初始化VOT包装器，这会进一步初始化您的PLATTracker  \ntracker = VOTTracker(image, selection)  \n  \n# 5. 进入主循环  \nwhile True:  \n    # 获取新的一帧路径  \n    imagefile = handle.frame()  \n    if not imagefile:  \n        break  # 序列结束  \n  \n    # 读取图像  \n    image = cv2.imread(imagefile, cv2.IMREAD_COLOR)  \n  \n    # 调用跟踪方法  \n    region, confidence = tracker.track(image)  \n  \n    # 向VOT环境报告结果  \n    handle.report(region, confidence)\n```\n\n3. 把`vot.py`放到跟踪器python文件可以import的目录中\n从site-package里import的vot缺一点东西，官方GitHub提供了另一份`vot.py`文件[integration/python at master · votchallenge/integration](https://github.com/votchallenge/integration/tree/master/python)，可能就是想让我们本地导入的。\n\n4. 使用test指令查看是否能正常运行\n如果上面配置都没毛病，运行下面的指令是不会出错的，可以检验一下：\n```shell\nvot test PLAT -g\n```\n记得在workspace目录下运行\n\n### 评估模型—evaluate\n我比较喜欢在workspace也就是工作区目录下运行，这样就不用加参数--workspace了，以下都是在workspace目录下运行的结果。\n\n看一下参数：\n```shell\n(trackers) PS D:\\CODE\\trackers\\vot_vot2018> vot evaluate -h\nusage: vot evaluate [-h] [--force] [--persist] [--workspace WORKSPACE] [--experiments EXPERIMENTS] trackers [trackers ...]\n\npositional arguments:\n  trackers              Tracker identifiers\n\noptions:\n  -h, --help            show this help message and exit\n  --force, -f           Force rerun of the entire evaluation\n  --persist, -p         Persist execution even in case of an error\n  --workspace WORKSPACE\n                        Workspace path\n  --experiments EXPERIMENTS\n                        Filter specified experiments (comma separated names)\n```\n\n评估模型就是用自己的跟踪器跑几遍工作区的数据集，在sequence目录下，这个运行时间很长，不过可以去stack里改，下面会说。\n```\nvot evaluate PLAT\n```\n\n最后工作区里会出现results的文件目录，结构类似：\n```\n--results\n  --PLAT\n    --baseline\n\t --realtime\n\t --unsupervised\n```\n最后一级是几个要做的实验名，不同数据集可能不一样。历年的官网上可以下载挑战赛对应数据集benchmark模型的结果，结构也是差不多的，同样直接放在这个results目录下就行，后面对比时可以用到。\n\n另外要提一点，评估时如果检测到文件目录存在时不会执行的，建议重新评估时删掉原来的。\n\n在site-package的目录下，类似：`C:\\Users\\Administrator\\.conda\\envs\\trackers\\Lib\\site-packages\\vot\\stack`，能找到这样一些yaml配置文件，按需修改。\n以vot2018/shortterm为例：\n```yaml\ntitle: VOT-ST2018 challenge\n\ndataset: http://data.votchallenge.net/vot2018/main/description.json\n\nurl: http://www.votchallenge.net/vot2018/\n\nexperiments:\n\n  baseline:\n\n    type: supervised\n\n    repetitions: 3\n\n    skip_initialize: 5\n\n    analyses:\n\n      - type: supervised_average_ar\n\n        sensitivity: 30\n\n      - type: supervised_eao_score\n\n        low: 100\n\n        high: 356\n\n      - type: supervised_eao_curve\n\n  realtime:\n\n    type: supervised\n\n    realtime:\n\n      grace: 3\n\n    repetitions: 1\n\n    skip_initialize: 5\n\n    analyses:\n\n      - type: supervised_average_ar\n\n        sensitivity: 30\n\n      - type: supervised_eao_score\n\n        low: 100\n\n        high: 356\n\n      - type: supervised_eao_curve\n\n  unsupervised:\n\n    type: unsupervised\n\n    repetitions: 1\n\n    analyses:\n\n      - type: average_accuracy\n```\n里面包含了几个实验的相关参数，我修改了repetitions到3，这样可以快一些。\n\n### 分析评估结果—analysis\n看一下参数：\n```shell\n(trackers) PS D:\\CODE\\trackers\\vot_vot2018> vot analysis -h\nusage: vot analysis [-h] [--workspace WORKSPACE] [--format {json,yaml}] [--name NAME] [trackers ...]\n\npositional arguments:\n  trackers              Tracker identifiers\n\noptions:\n  -h, --help            show this help message and exit\n  --workspace WORKSPACE\n                        Workspace path\n  --format {json,yaml}  Analysis output format\n  --name NAME           Analysis output name\n```\n\n当上一步评估被正确执行并产生了results文件目录，就可以运行分析，只要有跟踪器在results目录下存在结果就行，所以==直接拿官网结果放在目录下也能分析==:\n```shell\nvot analysis PLAT --name PLAT \n```\n会生成analysis和cache目录\n\n### 得到可视化报告—report\n可以看到以下输入参数：\n```shell\n(trackers) PS D:\\CODE\\trackers\\vot_vot2018> vot report -h     \nusage: vot report [-h] [--workspace WORKSPACE] [--format {html,latex,plots}] [--name NAME] [--sequences SEQUENCES] [--experiments EXPERIMENTS] [trackers ...]\n\npositional arguments:\n  trackers              Tracker identifiers\n\noptions:\n  -h, --help            show this help message and exit\n  --workspace WORKSPACE\n                        Workspace path\n  --format {html,latex,plots}\n                        Analysis output format\n  --name NAME           Document output name\n  --sequences SEQUENCES\n                        Filter specified sequences (comma separated names)\n  --experiments EXPERIMENTS\n                        Filter specified experiments (comma separated names)\n```\n\n分析得到的analysis目录下json文件看不明白，所以还是得换成图像展示，这就用到了report\n\nreport可以生成单个或多个模型的报告，如果是多个模型会在一起比较。\n```shell\nvot report SiamRPN PLAT SiamFC KCF RCO LADCF ECO DeepCSRDCF\n```\n会出现report目录以及目录下的html文件\n\n## Pysot-Toolkit\n```powershell\n $env:PYTHONPATH = \"D:/CODE/trackers/pysot-toolkit;$env:PYTHONPATH\"\n```\n\n如果在linux/macOS就是：\n```bash\nexport PYTHONPATH='D:/CODE/trackers/pysot-toolkit':$PYTHONPATH\n```\n\n```python\nax.grid(b=True)\n# matplotib版本更新，从 3.5 版开始 `b` 这个关键字被移除，改成下面这个\nax.grid(True)\n```\n\n安装装 **MiKTeX**（体积小、按需下载）或 **TeX Live**（完整、体积大），用来显示绘图结果。","slug":"2025-07-30-目标跟踪结果对比工具","published":1,"__permalink":"目标跟踪结果对比工具/","comments":1,"layout":"post","photos":[],"_id":"cmgl4i0o6002dzovd6vw132jg","content":"<h2 id=\"VOT-Toolkit\"><a href=\"#VOT-Toolkit\" class=\"headerlink\" title=\"VOT-Toolkit\"></a>VOT-Toolkit</h2><p>$Last Edited：2025.08.05&#x2F;03:08$</p>\n<hr>\n<blockquote>\n<p>[!NOTE] 版本信息<br>工具包版本是0.7.4，来自VOT2025</p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>直接pip下载或者从github主页<a href=\"https://github.com/votchallenge/toolkit\">votchallenge&#x2F;toolkit: The official VOT Challenge evaluation and analysis toolkit</a>下载之后再本地安装</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install vot<span class=\"literal\">-toolkit</span></span><br></pre></td></tr></table></figure>\n\n<p>本地安装操作如下，以从git上下载的zip文件解压后为例，文件名是<code>toolkit-master</code></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /path/to/toolkit<span class=\"literal\">-master</span></span><br><span class=\"line\">pip install .</span><br></pre></td></tr></table></figure>\n\n<p><code>vot -h</code>看一下支持的操作，这些都是后面要说的：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(trackers) PS D:\\CODE\\trackers\\vot_vot2018&gt; vot -h       </span><br><span class=\"line\">usage: vot [-h] [--debug] [--registry REGISTRY] &#123;test,configure,initialize,evaluate,run,analysis,analyse,analyze,report,document,pack&#125; ...</span><br><span class=\"line\"></span><br><span class=\"line\">VOT Toolkit Command Line Interface</span><br><span class=\"line\"></span><br><span class=\"line\">options:</span><br><span class=\"line\">  -h, --help            show this help message and exit</span><br><span class=\"line\">  --debug, -d           Backup backend</span><br><span class=\"line\">  --registry REGISTRY   Tracker registry paths</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  &#123;test,configure,initialize,evaluate,run,analysis,analyse,analyze,report,document,pack&#125;</span><br><span class=\"line\">                        commands</span><br><span class=\"line\">    test                Test a tracker integration on a synthetic sequence</span><br><span class=\"line\">    configure (initialize)</span><br><span class=\"line\">                        Setup a new workspace and download data</span><br><span class=\"line\">    evaluate (run)      Evaluate one or more trackers in a given workspace</span><br><span class=\"line\">    analysis (analyse, analyze)</span><br><span class=\"line\">                        Run analysis of results</span><br><span class=\"line\">    report (document)   Generate report document</span><br><span class=\"line\">    pack                Package results for submission</span><br></pre></td></tr></table></figure>\n<h3 id=\"新建工作区—initialize\"><a href=\"#新建工作区—initialize\" class=\"headerlink\" title=\"新建工作区—initialize\"></a>新建工作区—initialize</h3><p>新建工作区的命令<code>vot initialize</code>，规则如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vot initialize &lt;stack-name&gt; --workspace &lt;workspace-path&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">比如，workspace一定要是空文件夹</span></span><br><span class=\"line\">vot initialize vot2018\\longterm --workspace ./vot_vot2018lt</span><br></pre></td></tr></table></figure>\n<p>这里的<code>&lt;stack-name&gt;</code>是数据集名称，用下面的指令会输出可用的stacks：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(trackers) PS D:\\CODE\\trackers&gt; vot initialize</span><br><span class=\"line\">Unable to continue without a stack</span><br><span class=\"line\">List of available integrated stacks:</span><br><span class=\"line\"> * otb100 - OTB100 dataset experiment stack</span><br><span class=\"line\"> * otb50 - OTB50 dataset experiment stack</span><br><span class=\"line\"> * tests\\basic - VOT Basic Test Stack</span><br><span class=\"line\"> * tests\\multiobject - VOTS2023 Test Stack</span><br><span class=\"line\"> * tests\\segmentation - VOT Segmentation testing</span><br><span class=\"line\"> * vot2013 - VOT2013 challenge</span><br><span class=\"line\"> * vot2014 - VOT2014 challenge</span><br><span class=\"line\"> * vot2015\\rgb - VOT2015 challenge</span><br><span class=\"line\"> * vot2015\\tir - VOT-TIR2015 challenge</span><br><span class=\"line\"> * vot2016\\rgb - VOT2016 challenge</span><br><span class=\"line\"> * vot2016\\tir - VOT-TIR2016 challenge</span><br><span class=\"line\"> * vot2017 - VOT2017 challenge</span><br><span class=\"line\"> * vot2018\\longterm - VOT-LT2018 challenge</span><br><span class=\"line\"> * vot2018\\shortterm - VOT-ST2018 challenge</span><br><span class=\"line\"> * vot2019\\longterm - VOT-LT2019 challenge</span><br><span class=\"line\"> * vot2019\\rgbd - VOT-RGBD2019 challenge</span><br><span class=\"line\"> * vot2019\\rgbtir - VOT-RGBTIR2019 challenge</span><br><span class=\"line\"> * vot2019\\shortterm - VOT-ST2019 challenge</span><br><span class=\"line\"> * vot2020\\longterm - VOT-LT2020 challenge</span><br><span class=\"line\"> * vot2020\\rgbd - VOT-RGBD2020 challenge</span><br><span class=\"line\"> * vot2020\\rgbtir - VOT-RGBTIR2020 challenge</span><br><span class=\"line\"> * vot2020\\shortterm - VOT-ST2020 challenge</span><br><span class=\"line\"> * vot2021\\longterm - VOT-LT2021 challenge</span><br><span class=\"line\"> * vot2021\\rgbd - VOT-RGBD2021 challenge</span><br><span class=\"line\"> * vot2021\\shortterm - VOT-ST2021 challenge</span><br><span class=\"line\"> * vot2022\\depth - VOT-D2022 challenge</span><br><span class=\"line\"> * vot2022\\longterm - VOT-LT2022 challenge</span><br><span class=\"line\"> * vot2022\\rgbd - VOT-RGBD2022 challenge</span><br><span class=\"line\"> * vot2022\\shortterm - VOT-ST2021 segmentation challenge</span><br><span class=\"line\"> * vot2022\\shorttermbox - VOT-ST2022 bounding-box challenge</span><br><span class=\"line\"> * vots2023 - VOTS2023 Challenge Stack</span><br><span class=\"line\"> * vots2024\\main - VOTS2024 Challenge Stack</span><br><span class=\"line\"> * vots2024\\votst - VOTS2024 ST Challenge Stack</span><br><span class=\"line\"> * vots2024\\votstval - VOTS2024 ST Challenge Validation Stack</span><br><span class=\"line\"> * vots2025\\main - VOTS2025 Challenge Stack</span><br><span class=\"line\"> * vots2025\\realtime - VOTS2025-RT Challenge Stack</span><br><span class=\"line\"> * vots2025\\votst - VOTST2025 Challenge Stack</span><br><span class=\"line\"> * vots2025\\votstval - VOTS2025 ST Challenge Validation Stack</span><br></pre></td></tr></table></figure>\n\n<p>但是发现当前环境的vot库中<code>C:\\Users\\Administrator\\.conda\\envs\\trackers\\Lib\\site-packages\\vot\\stack</code>文件目录是空的，这会导致initialize工作区时会出现错误：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(trackers) PS D:\\CODE\\trackers&gt; vot initialize otb100 --workspace ./toolkit-workspace     </span><br><span class=\"line\">Experiment stack None not found</span><br></pre></td></tr></table></figure>\n\n<p>这个输出也是空的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(trackers) PS D:\\CODE\\trackers&gt; vot initialize</span><br><span class=\"line\">Unable to continue without a stack</span><br><span class=\"line\">List of available integrated stacks:</span><br></pre></td></tr></table></figure>\n\n<p>这时需要手动把安装时下载文件目录<code>toolkit-master</code>中的<code>./vot/stack</code>目录下的文件复制到当前环境的vot库里的<code>stack</code>目录下</p>\n<p>这时候再新建就能跑通了，一般来说第一次新建会下载数据集：<br>下载中：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(trackers) PS D:\\CODE\\trackers&gt; vot initialize vot2018\\longterm --workspace ./vot_vot2018lt</span><br><span class=\"line\">Downloading sequence dataset &quot;VOT2018 Long-Term Challenge&quot; with 35 sequences (total 9.5GiB).</span><br><span class=\"line\"> Downloading          |██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                         |  69% [24:30&lt;11:37]</span><br></pre></td></tr></table></figure>\n<p>创建完成：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(trackers) PS D:\\CODE\\trackers&gt; vot initialize vot2018\\longterm --workspace ./vot_vot2018lt</span><br><span class=\"line\">Downloading sequence dataset &quot;VOT2018 Long-Term Challenge&quot; with 35 sequences (total 9.5GiB).</span><br><span class=\"line\">Successfully downloaded all sequences.                                                                                                                                                                                             </span><br><span class=\"line\">Download completed</span><br><span class=\"line\">Initialized workspace in &#x27;./vot_vot2018lt&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>如果提示<code>Workspace already initialized</code>，并且数据集没有下载，原因应该是workspace的文件目录不是空的，建议删了重新initialize。</p>\n<p>我看<a href=\"https://blog.csdn.net/laizi_laizi/article/details/110444884\">vot-toolkit-python测试DiMP50在VOT2018上的表现-CSDN博客</a>这个博客里，说是有<code>--nodownload</code>这个选项，然后自己手动下载数据集，后面再去移动或者建立软连接。<br>试了下，即使手动配置了数据集还是会在<code>evaluate</code>的时候重新下载，可能是我数据集格式不对？<br>另外<code>--nodownload</code>我没试过，上面讲的我的workspace没有数据集这个情况，是因为出了网络问题没下载下来。</p>\n<h3 id=\"修改配置文件并测试—test\"><a href=\"#修改配置文件并测试—test\" class=\"headerlink\" title=\"修改配置文件并测试—test\"></a>修改配置文件并测试—test</h3><p>新建的工作区一般是这个结构：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mode                 LastWriteTime         Length Name                                                                                                                                                                             </span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">d-----          2025/8/1      2:17                sequences</span><br><span class=\"line\">-a----          2025/8/1      1:43             54 config.yaml                   </span><br><span class=\"line\">-a----          2025/8/1      2:33            323 trackers.ini</span><br></pre></td></tr></table></figure>\n\n<p>按下面这个步骤走：</p>\n<ol>\n<li>修改新建工作区中的<code>trackers.ini</code>文件，下面是一个已经写好的<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[PLAT]</span>  <span class=\"comment\"># &lt;tracker-name&gt;  </span></span><br><span class=\"line\"><span class=\"attr\">label</span> = PLAT  </span><br><span class=\"line\"><span class=\"attr\">protocol</span> = traxpython  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"attr\">command</span> = VOTtest  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># Specify a path to trax python wrapper if it is not visible (separate by ; if using multiple paths)  </span></span><br><span class=\"line\"><span class=\"attr\">paths</span> = D:/CODE/trackers/plat4edge  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># Additional environment paths  </span></span><br><span class=\"line\"><span class=\"attr\">env_PATH</span> = C:/Users/Administrator/.conda/envs/trackers/python.exe</span><br></pre></td></tr></table></figure>\n中括号里的和&#x3D;&#x3D;label&#x3D;&#x3D;就是名字，&#x3D;&#x3D;command&#x3D;&#x3D;是需要运行的跟踪文件，名字是自己起的，比如VOTtest就对应我自己的VOTtest.py，也就是包装器（wrapper）文件，分单目标多目标等很多种，在官方的GitHub上有定义写法<a href=\"https://github.com/votchallenge/integration/tree/master/python\">integration&#x2F;python at master · votchallenge&#x2F;integration</a>。注意，command不要带字符’-‘，不然会报错：<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Generating dummy sequence</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;string&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">NameError: name <span class=\"string\">&#x27;vot&#x27;</span> is not defined</span><br><span class=\"line\">Unable to connect to tracker</span><br></pre></td></tr></table></figure>\n&#x3D;&#x3D;paths&#x3D;&#x3D;是包装器文件所在的路径，&#x3D;&#x3D;env_PATH&#x3D;&#x3D;是python解释器的路径，这里我用的是虚拟环境的解释器</li>\n</ol>\n<p>如果已经有其他跟踪器结果，不需要自行评估，但是后续分析报告会用到，那在后面加上这些：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[SiamRPN]</span>  <span class=\"comment\"># &lt;tracker-name&gt;  </span></span><br><span class=\"line\"><span class=\"attr\">label</span> = SiamRPN  </span><br><span class=\"line\"><span class=\"attr\">protocol</span> = traxpython  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"attr\">command</span> = VOTtest</span><br></pre></td></tr></table></figure>\n<p>前三个参数就够了，类似的可以加很多个，只要名字对上就能用。command要有不然会报错，至于填什么应该无所谓，别空着就行。</p>\n<ol start=\"2\">\n<li><p>创建一个&#x3D;&#x3D;按照工具包规则定义的单目标跟踪器&#x3D;&#x3D;python文件，也就是包装器<br>我的command对应文件<code>VOTtest.py</code>改好之后是这样的，之前的跟踪器定义没有confidence返回值，所以还回去改了一下跟踪器代码，就是这个LATtracker_vot</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> vot  </span><br><span class=\"line\"><span class=\"keyword\">import</span> sys  </span><br><span class=\"line\"><span class=\"keyword\">import</span> time  </span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2  </span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy  </span><br><span class=\"line\"><span class=\"keyword\">import</span> sys  </span><br><span class=\"line\"><span class=\"keyword\">import</span> os <span class=\"comment\"># 导入 os 模块  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># --- 在所有其他导入之前，手动将项目根目录添加到 sys.path ---# __file__ 是当前脚本的路径 D:/CODE/trackers/plat4edge/VOTtest.py# os.path.dirname(__file__) 是脚本所在的目录 D:/CODE/trackers/plat4edge# 再取一次 dirname 就得到了项目的根目录 D:/CODE/trackersproject_root = os.path.dirname(os.path.dirname(__file__))  </span></span><br><span class=\"line\">sys.path.insert(<span class=\"number\">0</span>, project_root)  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">from</span> plat4edge.tracker.PLATtracker_vot <span class=\"keyword\">import</span> PLATTracker  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">VOTTracker</span>(<span class=\"title class_ inherited__\">object</span>):  </span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;  </span></span><br><span class=\"line\"><span class=\"string\">    符合VOT接口的包装器类，它导入并使用您的 PLATTracker。  </span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span>  </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, image, region</span>):  </span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;  </span></span><br><span class=\"line\"><span class=\"string\">        初始化函数。  </span></span><br><span class=\"line\"><span class=\"string\">        Args:            image (numpy.ndarray): VOT提供的第一帧图像 (RGB)。  </span></span><br><span class=\"line\"><span class=\"string\">            region (vot.Rectangle): VOT提供的初始目标区域。  </span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span>        <span class=\"comment\"># --- 在这里配置您的模型路径 ---        model_path = &#x27;D:/CODE/trackers/plat4edge/siamlat_1.1_70.pth&#x27;  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\"># 1. 实例化您自己的跟踪器  </span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.tracker = PLATTracker(model_path)  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\"># 2. 将VOT的region格式转换为 [x, y, w, h] 格式  </span></span><br><span class=\"line\">        bbox = [region.x, region.y, region.width, region.height]  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\"># 3. 调用核心跟踪器的初始化方法  </span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.tracker.init(image, bbox)  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">track</span>(<span class=\"params\">self, image</span>):  </span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;  </span></span><br><span class=\"line\"><span class=\"string\">        跟踪函数。  </span></span><br><span class=\"line\"><span class=\"string\">        Args:            image (numpy.ndarray): VOT提供的后续图像帧 (RGB)。  </span></span><br><span class=\"line\"><span class=\"string\">        Returns:            tuple: (vot.Rectangle, float) 包含预测区域和其置信度。  </span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span>        <span class=\"comment\"># 1. 调用您的跟踪器的更新方法，它现在会返回bbox和confidence  </span></span><br><span class=\"line\">        predicted_bbox, confidence = <span class=\"variable language_\">self</span>.tracker.update(image)  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\"># 2. 将返回的 numpy 数组转换为 VOT 需要的 Rectangle 对象  </span></span><br><span class=\"line\">        predicted_region = vot.Rectangle(predicted_bbox[<span class=\"number\">0</span>], predicted_bbox[<span class=\"number\">1</span>], predicted_bbox[<span class=\"number\">2</span>], predicted_bbox[<span class=\"number\">3</span>])  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\"># 3. 返回VOT需要的结果  </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> predicted_region, confidence  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ==========================================================  </span></span><br><span class=\"line\"><span class=\"comment\">#                  VOT 主 循 环  </span></span><br><span class=\"line\"><span class=\"comment\"># ==========================================================  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 1. 初始化VOT句柄  </span></span><br><span class=\"line\">handle = vot.VOT(<span class=\"string\">&quot;rectangle&quot;</span>)  </span><br><span class=\"line\">selection = handle.region()  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 2. 获取第一帧并检查  </span></span><br><span class=\"line\">imagefile = handle.frame()  </span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> imagefile:  </span><br><span class=\"line\">    sys.exit(<span class=\"number\">0</span>)  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 3. 读取第一帧图像 (必须是彩色图像)  </span></span><br><span class=\"line\">image = cv2.imread(imagefile, cv2.IMREAD_COLOR)  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 4. 初始化VOT包装器，这会进一步初始化您的PLATTracker  </span></span><br><span class=\"line\">tracker = VOTTracker(image, selection)  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 5. 进入主循环  </span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:  </span><br><span class=\"line\">    <span class=\"comment\"># 获取新的一帧路径  </span></span><br><span class=\"line\">    imagefile = handle.frame()  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> imagefile:  </span><br><span class=\"line\">        <span class=\"keyword\">break</span>  <span class=\"comment\"># 序列结束  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"># 读取图像  </span></span><br><span class=\"line\">    image = cv2.imread(imagefile, cv2.IMREAD_COLOR)  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"># 调用跟踪方法  </span></span><br><span class=\"line\">    region, confidence = tracker.track(image)  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"># 向VOT环境报告结果  </span></span><br><span class=\"line\">    handle.report(region, confidence)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>把<code>vot.py</code>放到跟踪器python文件可以import的目录中<br>从site-package里import的vot缺一点东西，官方GitHub提供了另一份<code>vot.py</code>文件<a href=\"https://github.com/votchallenge/integration/tree/master/python\">integration&#x2F;python at master · votchallenge&#x2F;integration</a>，可能就是想让我们本地导入的。</p>\n</li>\n<li><p>使用test指令查看是否能正常运行<br>如果上面配置都没毛病，运行下面的指令是不会出错的，可以检验一下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vot test PLAT -g</span><br></pre></td></tr></table></figure>\n<p>记得在workspace目录下运行</p>\n</li>\n</ol>\n<h3 id=\"评估模型—evaluate\"><a href=\"#评估模型—evaluate\" class=\"headerlink\" title=\"评估模型—evaluate\"></a>评估模型—evaluate</h3><p>我比较喜欢在workspace也就是工作区目录下运行，这样就不用加参数–workspace了，以下都是在workspace目录下运行的结果。</p>\n<p>看一下参数：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(trackers) PS D:\\CODE\\trackers\\vot_vot2018&gt; vot evaluate -h</span><br><span class=\"line\">usage: vot evaluate [-h] [--force] [--persist] [--workspace WORKSPACE] [--experiments EXPERIMENTS] trackers [trackers ...]</span><br><span class=\"line\"></span><br><span class=\"line\">positional arguments:</span><br><span class=\"line\">  trackers              Tracker identifiers</span><br><span class=\"line\"></span><br><span class=\"line\">options:</span><br><span class=\"line\">  -h, --help            show this help message and exit</span><br><span class=\"line\">  --force, -f           Force rerun of the entire evaluation</span><br><span class=\"line\">  --persist, -p         Persist execution even in case of an error</span><br><span class=\"line\">  --workspace WORKSPACE</span><br><span class=\"line\">                        Workspace path</span><br><span class=\"line\">  --experiments EXPERIMENTS</span><br><span class=\"line\">                        Filter specified experiments (comma separated names)</span><br></pre></td></tr></table></figure>\n\n<p>评估模型就是用自己的跟踪器跑几遍工作区的数据集，在sequence目录下，这个运行时间很长，不过可以去stack里改，下面会说。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vot evaluate PLAT</span><br></pre></td></tr></table></figure>\n\n<p>最后工作区里会出现results的文件目录，结构类似：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--results</span><br><span class=\"line\">  --PLAT</span><br><span class=\"line\">    --baseline</span><br><span class=\"line\">     --realtime</span><br><span class=\"line\">     --unsupervised</span><br></pre></td></tr></table></figure>\n<p>最后一级是几个要做的实验名，不同数据集可能不一样。历年的官网上可以下载挑战赛对应数据集benchmark模型的结果，结构也是差不多的，同样直接放在这个results目录下就行，后面对比时可以用到。</p>\n<p>另外要提一点，评估时如果检测到文件目录存在时不会执行的，建议重新评估时删掉原来的。</p>\n<p>在site-package的目录下，类似：<code>C:\\Users\\Administrator\\.conda\\envs\\trackers\\Lib\\site-packages\\vot\\stack</code>，能找到这样一些yaml配置文件，按需修改。<br>以vot2018&#x2F;shortterm为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">VOT-ST2018</span> <span class=\"string\">challenge</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">dataset:</span> <span class=\"string\">http://data.votchallenge.net/vot2018/main/description.json</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">http://www.votchallenge.net/vot2018/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">experiments:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">baseline:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">supervised</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">repetitions:</span> <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">skip_initialize:</span> <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">analyses:</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">supervised_average_ar</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">sensitivity:</span> <span class=\"number\">30</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">supervised_eao_score</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">low:</span> <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">high:</span> <span class=\"number\">356</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">supervised_eao_curve</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">realtime:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">supervised</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">realtime:</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">grace:</span> <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">repetitions:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">skip_initialize:</span> <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">analyses:</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">supervised_average_ar</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">sensitivity:</span> <span class=\"number\">30</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">supervised_eao_score</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">low:</span> <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">high:</span> <span class=\"number\">356</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">supervised_eao_curve</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">unsupervised:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">unsupervised</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">repetitions:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">analyses:</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">average_accuracy</span></span><br></pre></td></tr></table></figure>\n<p>里面包含了几个实验的相关参数，我修改了repetitions到3，这样可以快一些。</p>\n<h3 id=\"分析评估结果—analysis\"><a href=\"#分析评估结果—analysis\" class=\"headerlink\" title=\"分析评估结果—analysis\"></a>分析评估结果—analysis</h3><p>看一下参数：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(trackers) PS D:\\CODE\\trackers\\vot_vot2018&gt; vot analysis -h</span><br><span class=\"line\">usage: vot analysis [-h] [--workspace WORKSPACE] [--format &#123;json,yaml&#125;] [--name NAME] [trackers ...]</span><br><span class=\"line\"></span><br><span class=\"line\">positional arguments:</span><br><span class=\"line\">  trackers              Tracker identifiers</span><br><span class=\"line\"></span><br><span class=\"line\">options:</span><br><span class=\"line\">  -h, --help            show this help message and exit</span><br><span class=\"line\">  --workspace WORKSPACE</span><br><span class=\"line\">                        Workspace path</span><br><span class=\"line\">  --format &#123;json,yaml&#125;  Analysis output format</span><br><span class=\"line\">  --name NAME           Analysis output name</span><br></pre></td></tr></table></figure>\n\n<p>当上一步评估被正确执行并产生了results文件目录，就可以运行分析，只要有跟踪器在results目录下存在结果就行，所以&#x3D;&#x3D;直接拿官网结果放在目录下也能分析&#x3D;&#x3D;:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vot analysis PLAT --name PLAT </span><br></pre></td></tr></table></figure>\n<p>会生成analysis和cache目录</p>\n<h3 id=\"得到可视化报告—report\"><a href=\"#得到可视化报告—report\" class=\"headerlink\" title=\"得到可视化报告—report\"></a>得到可视化报告—report</h3><p>可以看到以下输入参数：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(trackers) PS D:\\CODE\\trackers\\vot_vot2018&gt; vot report -h     </span><br><span class=\"line\">usage: vot report [-h] [--workspace WORKSPACE] [--format &#123;html,latex,plots&#125;] [--name NAME] [--sequences SEQUENCES] [--experiments EXPERIMENTS] [trackers ...]</span><br><span class=\"line\"></span><br><span class=\"line\">positional arguments:</span><br><span class=\"line\">  trackers              Tracker identifiers</span><br><span class=\"line\"></span><br><span class=\"line\">options:</span><br><span class=\"line\">  -h, --help            show this help message and exit</span><br><span class=\"line\">  --workspace WORKSPACE</span><br><span class=\"line\">                        Workspace path</span><br><span class=\"line\">  --format &#123;html,latex,plots&#125;</span><br><span class=\"line\">                        Analysis output format</span><br><span class=\"line\">  --name NAME           Document output name</span><br><span class=\"line\">  --sequences SEQUENCES</span><br><span class=\"line\">                        Filter specified sequences (comma separated names)</span><br><span class=\"line\">  --experiments EXPERIMENTS</span><br><span class=\"line\">                        Filter specified experiments (comma separated names)</span><br></pre></td></tr></table></figure>\n\n<p>分析得到的analysis目录下json文件看不明白，所以还是得换成图像展示，这就用到了report</p>\n<p>report可以生成单个或多个模型的报告，如果是多个模型会在一起比较。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vot report SiamRPN PLAT SiamFC KCF RCO LADCF ECO DeepCSRDCF</span><br></pre></td></tr></table></figure>\n<p>会出现report目录以及目录下的html文件</p>\n<h2 id=\"Pysot-Toolkit\"><a href=\"#Pysot-Toolkit\" class=\"headerlink\" title=\"Pysot-Toolkit\"></a>Pysot-Toolkit</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$env:PYTHONPATH</span> = <span class=\"string\">&quot;D:/CODE/trackers/pysot-toolkit;<span class=\"variable\">$env:PYTHONPATH</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果在linux&#x2F;macOS就是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PYTHONPATH=<span class=\"string\">&#x27;D:/CODE/trackers/pysot-toolkit&#x27;</span>:<span class=\"variable\">$PYTHONPATH</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ax.grid(b=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"comment\"># matplotib版本更新，从 3.5 版开始 `b` 这个关键字被移除，改成下面这个</span></span><br><span class=\"line\">ax.grid(<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<p>安装装 <strong>MiKTeX</strong>（体积小、按需下载）或 <strong>TeX Live</strong>（完整、体积大），用来显示绘图结果。</p>\n","excerpt":"","more":"<h2 id=\"VOT-Toolkit\"><a href=\"#VOT-Toolkit\" class=\"headerlink\" title=\"VOT-Toolkit\"></a>VOT-Toolkit</h2><p>$Last Edited：2025.08.05&#x2F;03:08$</p>\n<hr>\n<blockquote>\n<p>[!NOTE] 版本信息<br>工具包版本是0.7.4，来自VOT2025</p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>直接pip下载或者从github主页<a href=\"https://github.com/votchallenge/toolkit\">votchallenge&#x2F;toolkit: The official VOT Challenge evaluation and analysis toolkit</a>下载之后再本地安装</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install vot<span class=\"literal\">-toolkit</span></span><br></pre></td></tr></table></figure>\n\n<p>本地安装操作如下，以从git上下载的zip文件解压后为例，文件名是<code>toolkit-master</code></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /path/to/toolkit<span class=\"literal\">-master</span></span><br><span class=\"line\">pip install .</span><br></pre></td></tr></table></figure>\n\n<p><code>vot -h</code>看一下支持的操作，这些都是后面要说的：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(trackers) PS D:\\CODE\\trackers\\vot_vot2018&gt; vot -h       </span><br><span class=\"line\">usage: vot [-h] [--debug] [--registry REGISTRY] &#123;test,configure,initialize,evaluate,run,analysis,analyse,analyze,report,document,pack&#125; ...</span><br><span class=\"line\"></span><br><span class=\"line\">VOT Toolkit Command Line Interface</span><br><span class=\"line\"></span><br><span class=\"line\">options:</span><br><span class=\"line\">  -h, --help            show this help message and exit</span><br><span class=\"line\">  --debug, -d           Backup backend</span><br><span class=\"line\">  --registry REGISTRY   Tracker registry paths</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  &#123;test,configure,initialize,evaluate,run,analysis,analyse,analyze,report,document,pack&#125;</span><br><span class=\"line\">                        commands</span><br><span class=\"line\">    test                Test a tracker integration on a synthetic sequence</span><br><span class=\"line\">    configure (initialize)</span><br><span class=\"line\">                        Setup a new workspace and download data</span><br><span class=\"line\">    evaluate (run)      Evaluate one or more trackers in a given workspace</span><br><span class=\"line\">    analysis (analyse, analyze)</span><br><span class=\"line\">                        Run analysis of results</span><br><span class=\"line\">    report (document)   Generate report document</span><br><span class=\"line\">    pack                Package results for submission</span><br></pre></td></tr></table></figure>\n<h3 id=\"新建工作区—initialize\"><a href=\"#新建工作区—initialize\" class=\"headerlink\" title=\"新建工作区—initialize\"></a>新建工作区—initialize</h3><p>新建工作区的命令<code>vot initialize</code>，规则如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vot initialize &lt;stack-name&gt; --workspace &lt;workspace-path&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">比如，workspace一定要是空文件夹</span></span><br><span class=\"line\">vot initialize vot2018\\longterm --workspace ./vot_vot2018lt</span><br></pre></td></tr></table></figure>\n<p>这里的<code>&lt;stack-name&gt;</code>是数据集名称，用下面的指令会输出可用的stacks：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(trackers) PS D:\\CODE\\trackers&gt; vot initialize</span><br><span class=\"line\">Unable to continue without a stack</span><br><span class=\"line\">List of available integrated stacks:</span><br><span class=\"line\"> * otb100 - OTB100 dataset experiment stack</span><br><span class=\"line\"> * otb50 - OTB50 dataset experiment stack</span><br><span class=\"line\"> * tests\\basic - VOT Basic Test Stack</span><br><span class=\"line\"> * tests\\multiobject - VOTS2023 Test Stack</span><br><span class=\"line\"> * tests\\segmentation - VOT Segmentation testing</span><br><span class=\"line\"> * vot2013 - VOT2013 challenge</span><br><span class=\"line\"> * vot2014 - VOT2014 challenge</span><br><span class=\"line\"> * vot2015\\rgb - VOT2015 challenge</span><br><span class=\"line\"> * vot2015\\tir - VOT-TIR2015 challenge</span><br><span class=\"line\"> * vot2016\\rgb - VOT2016 challenge</span><br><span class=\"line\"> * vot2016\\tir - VOT-TIR2016 challenge</span><br><span class=\"line\"> * vot2017 - VOT2017 challenge</span><br><span class=\"line\"> * vot2018\\longterm - VOT-LT2018 challenge</span><br><span class=\"line\"> * vot2018\\shortterm - VOT-ST2018 challenge</span><br><span class=\"line\"> * vot2019\\longterm - VOT-LT2019 challenge</span><br><span class=\"line\"> * vot2019\\rgbd - VOT-RGBD2019 challenge</span><br><span class=\"line\"> * vot2019\\rgbtir - VOT-RGBTIR2019 challenge</span><br><span class=\"line\"> * vot2019\\shortterm - VOT-ST2019 challenge</span><br><span class=\"line\"> * vot2020\\longterm - VOT-LT2020 challenge</span><br><span class=\"line\"> * vot2020\\rgbd - VOT-RGBD2020 challenge</span><br><span class=\"line\"> * vot2020\\rgbtir - VOT-RGBTIR2020 challenge</span><br><span class=\"line\"> * vot2020\\shortterm - VOT-ST2020 challenge</span><br><span class=\"line\"> * vot2021\\longterm - VOT-LT2021 challenge</span><br><span class=\"line\"> * vot2021\\rgbd - VOT-RGBD2021 challenge</span><br><span class=\"line\"> * vot2021\\shortterm - VOT-ST2021 challenge</span><br><span class=\"line\"> * vot2022\\depth - VOT-D2022 challenge</span><br><span class=\"line\"> * vot2022\\longterm - VOT-LT2022 challenge</span><br><span class=\"line\"> * vot2022\\rgbd - VOT-RGBD2022 challenge</span><br><span class=\"line\"> * vot2022\\shortterm - VOT-ST2021 segmentation challenge</span><br><span class=\"line\"> * vot2022\\shorttermbox - VOT-ST2022 bounding-box challenge</span><br><span class=\"line\"> * vots2023 - VOTS2023 Challenge Stack</span><br><span class=\"line\"> * vots2024\\main - VOTS2024 Challenge Stack</span><br><span class=\"line\"> * vots2024\\votst - VOTS2024 ST Challenge Stack</span><br><span class=\"line\"> * vots2024\\votstval - VOTS2024 ST Challenge Validation Stack</span><br><span class=\"line\"> * vots2025\\main - VOTS2025 Challenge Stack</span><br><span class=\"line\"> * vots2025\\realtime - VOTS2025-RT Challenge Stack</span><br><span class=\"line\"> * vots2025\\votst - VOTST2025 Challenge Stack</span><br><span class=\"line\"> * vots2025\\votstval - VOTS2025 ST Challenge Validation Stack</span><br></pre></td></tr></table></figure>\n\n<p>但是发现当前环境的vot库中<code>C:\\Users\\Administrator\\.conda\\envs\\trackers\\Lib\\site-packages\\vot\\stack</code>文件目录是空的，这会导致initialize工作区时会出现错误：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(trackers) PS D:\\CODE\\trackers&gt; vot initialize otb100 --workspace ./toolkit-workspace     </span><br><span class=\"line\">Experiment stack None not found</span><br></pre></td></tr></table></figure>\n\n<p>这个输出也是空的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(trackers) PS D:\\CODE\\trackers&gt; vot initialize</span><br><span class=\"line\">Unable to continue without a stack</span><br><span class=\"line\">List of available integrated stacks:</span><br></pre></td></tr></table></figure>\n\n<p>这时需要手动把安装时下载文件目录<code>toolkit-master</code>中的<code>./vot/stack</code>目录下的文件复制到当前环境的vot库里的<code>stack</code>目录下</p>\n<p>这时候再新建就能跑通了，一般来说第一次新建会下载数据集：<br>下载中：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(trackers) PS D:\\CODE\\trackers&gt; vot initialize vot2018\\longterm --workspace ./vot_vot2018lt</span><br><span class=\"line\">Downloading sequence dataset &quot;VOT2018 Long-Term Challenge&quot; with 35 sequences (total 9.5GiB).</span><br><span class=\"line\"> Downloading          |██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                         |  69% [24:30&lt;11:37]</span><br></pre></td></tr></table></figure>\n<p>创建完成：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(trackers) PS D:\\CODE\\trackers&gt; vot initialize vot2018\\longterm --workspace ./vot_vot2018lt</span><br><span class=\"line\">Downloading sequence dataset &quot;VOT2018 Long-Term Challenge&quot; with 35 sequences (total 9.5GiB).</span><br><span class=\"line\">Successfully downloaded all sequences.                                                                                                                                                                                             </span><br><span class=\"line\">Download completed</span><br><span class=\"line\">Initialized workspace in &#x27;./vot_vot2018lt&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>如果提示<code>Workspace already initialized</code>，并且数据集没有下载，原因应该是workspace的文件目录不是空的，建议删了重新initialize。</p>\n<p>我看<a href=\"https://blog.csdn.net/laizi_laizi/article/details/110444884\">vot-toolkit-python测试DiMP50在VOT2018上的表现-CSDN博客</a>这个博客里，说是有<code>--nodownload</code>这个选项，然后自己手动下载数据集，后面再去移动或者建立软连接。<br>试了下，即使手动配置了数据集还是会在<code>evaluate</code>的时候重新下载，可能是我数据集格式不对？<br>另外<code>--nodownload</code>我没试过，上面讲的我的workspace没有数据集这个情况，是因为出了网络问题没下载下来。</p>\n<h3 id=\"修改配置文件并测试—test\"><a href=\"#修改配置文件并测试—test\" class=\"headerlink\" title=\"修改配置文件并测试—test\"></a>修改配置文件并测试—test</h3><p>新建的工作区一般是这个结构：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mode                 LastWriteTime         Length Name                                                                                                                                                                             </span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">d-----          2025/8/1      2:17                sequences</span><br><span class=\"line\">-a----          2025/8/1      1:43             54 config.yaml                   </span><br><span class=\"line\">-a----          2025/8/1      2:33            323 trackers.ini</span><br></pre></td></tr></table></figure>\n\n<p>按下面这个步骤走：</p>\n<ol>\n<li>修改新建工作区中的<code>trackers.ini</code>文件，下面是一个已经写好的<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[PLAT]</span>  <span class=\"comment\"># &lt;tracker-name&gt;  </span></span><br><span class=\"line\"><span class=\"attr\">label</span> = PLAT  </span><br><span class=\"line\"><span class=\"attr\">protocol</span> = traxpython  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"attr\">command</span> = VOTtest  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># Specify a path to trax python wrapper if it is not visible (separate by ; if using multiple paths)  </span></span><br><span class=\"line\"><span class=\"attr\">paths</span> = D:/CODE/trackers/plat4edge  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># Additional environment paths  </span></span><br><span class=\"line\"><span class=\"attr\">env_PATH</span> = C:/Users/Administrator/.conda/envs/trackers/python.exe</span><br></pre></td></tr></table></figure>\n中括号里的和&#x3D;&#x3D;label&#x3D;&#x3D;就是名字，&#x3D;&#x3D;command&#x3D;&#x3D;是需要运行的跟踪文件，名字是自己起的，比如VOTtest就对应我自己的VOTtest.py，也就是包装器（wrapper）文件，分单目标多目标等很多种，在官方的GitHub上有定义写法<a href=\"https://github.com/votchallenge/integration/tree/master/python\">integration&#x2F;python at master · votchallenge&#x2F;integration</a>。注意，command不要带字符’-‘，不然会报错：<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Generating dummy sequence</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;string&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">NameError: name <span class=\"string\">&#x27;vot&#x27;</span> is not defined</span><br><span class=\"line\">Unable to connect to tracker</span><br></pre></td></tr></table></figure>\n&#x3D;&#x3D;paths&#x3D;&#x3D;是包装器文件所在的路径，&#x3D;&#x3D;env_PATH&#x3D;&#x3D;是python解释器的路径，这里我用的是虚拟环境的解释器</li>\n</ol>\n<p>如果已经有其他跟踪器结果，不需要自行评估，但是后续分析报告会用到，那在后面加上这些：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[SiamRPN]</span>  <span class=\"comment\"># &lt;tracker-name&gt;  </span></span><br><span class=\"line\"><span class=\"attr\">label</span> = SiamRPN  </span><br><span class=\"line\"><span class=\"attr\">protocol</span> = traxpython  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"attr\">command</span> = VOTtest</span><br></pre></td></tr></table></figure>\n<p>前三个参数就够了，类似的可以加很多个，只要名字对上就能用。command要有不然会报错，至于填什么应该无所谓，别空着就行。</p>\n<ol start=\"2\">\n<li><p>创建一个&#x3D;&#x3D;按照工具包规则定义的单目标跟踪器&#x3D;&#x3D;python文件，也就是包装器<br>我的command对应文件<code>VOTtest.py</code>改好之后是这样的，之前的跟踪器定义没有confidence返回值，所以还回去改了一下跟踪器代码，就是这个LATtracker_vot</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> vot  </span><br><span class=\"line\"><span class=\"keyword\">import</span> sys  </span><br><span class=\"line\"><span class=\"keyword\">import</span> time  </span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2  </span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy  </span><br><span class=\"line\"><span class=\"keyword\">import</span> sys  </span><br><span class=\"line\"><span class=\"keyword\">import</span> os <span class=\"comment\"># 导入 os 模块  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># --- 在所有其他导入之前，手动将项目根目录添加到 sys.path ---# __file__ 是当前脚本的路径 D:/CODE/trackers/plat4edge/VOTtest.py# os.path.dirname(__file__) 是脚本所在的目录 D:/CODE/trackers/plat4edge# 再取一次 dirname 就得到了项目的根目录 D:/CODE/trackersproject_root = os.path.dirname(os.path.dirname(__file__))  </span></span><br><span class=\"line\">sys.path.insert(<span class=\"number\">0</span>, project_root)  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">from</span> plat4edge.tracker.PLATtracker_vot <span class=\"keyword\">import</span> PLATTracker  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">VOTTracker</span>(<span class=\"title class_ inherited__\">object</span>):  </span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;  </span></span><br><span class=\"line\"><span class=\"string\">    符合VOT接口的包装器类，它导入并使用您的 PLATTracker。  </span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span>  </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, image, region</span>):  </span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;  </span></span><br><span class=\"line\"><span class=\"string\">        初始化函数。  </span></span><br><span class=\"line\"><span class=\"string\">        Args:            image (numpy.ndarray): VOT提供的第一帧图像 (RGB)。  </span></span><br><span class=\"line\"><span class=\"string\">            region (vot.Rectangle): VOT提供的初始目标区域。  </span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span>        <span class=\"comment\"># --- 在这里配置您的模型路径 ---        model_path = &#x27;D:/CODE/trackers/plat4edge/siamlat_1.1_70.pth&#x27;  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\"># 1. 实例化您自己的跟踪器  </span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.tracker = PLATTracker(model_path)  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\"># 2. 将VOT的region格式转换为 [x, y, w, h] 格式  </span></span><br><span class=\"line\">        bbox = [region.x, region.y, region.width, region.height]  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\"># 3. 调用核心跟踪器的初始化方法  </span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.tracker.init(image, bbox)  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">track</span>(<span class=\"params\">self, image</span>):  </span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;  </span></span><br><span class=\"line\"><span class=\"string\">        跟踪函数。  </span></span><br><span class=\"line\"><span class=\"string\">        Args:            image (numpy.ndarray): VOT提供的后续图像帧 (RGB)。  </span></span><br><span class=\"line\"><span class=\"string\">        Returns:            tuple: (vot.Rectangle, float) 包含预测区域和其置信度。  </span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span>        <span class=\"comment\"># 1. 调用您的跟踪器的更新方法，它现在会返回bbox和confidence  </span></span><br><span class=\"line\">        predicted_bbox, confidence = <span class=\"variable language_\">self</span>.tracker.update(image)  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\"># 2. 将返回的 numpy 数组转换为 VOT 需要的 Rectangle 对象  </span></span><br><span class=\"line\">        predicted_region = vot.Rectangle(predicted_bbox[<span class=\"number\">0</span>], predicted_bbox[<span class=\"number\">1</span>], predicted_bbox[<span class=\"number\">2</span>], predicted_bbox[<span class=\"number\">3</span>])  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\"># 3. 返回VOT需要的结果  </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> predicted_region, confidence  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ==========================================================  </span></span><br><span class=\"line\"><span class=\"comment\">#                  VOT 主 循 环  </span></span><br><span class=\"line\"><span class=\"comment\"># ==========================================================  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 1. 初始化VOT句柄  </span></span><br><span class=\"line\">handle = vot.VOT(<span class=\"string\">&quot;rectangle&quot;</span>)  </span><br><span class=\"line\">selection = handle.region()  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 2. 获取第一帧并检查  </span></span><br><span class=\"line\">imagefile = handle.frame()  </span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> imagefile:  </span><br><span class=\"line\">    sys.exit(<span class=\"number\">0</span>)  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 3. 读取第一帧图像 (必须是彩色图像)  </span></span><br><span class=\"line\">image = cv2.imread(imagefile, cv2.IMREAD_COLOR)  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 4. 初始化VOT包装器，这会进一步初始化您的PLATTracker  </span></span><br><span class=\"line\">tracker = VOTTracker(image, selection)  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 5. 进入主循环  </span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:  </span><br><span class=\"line\">    <span class=\"comment\"># 获取新的一帧路径  </span></span><br><span class=\"line\">    imagefile = handle.frame()  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> imagefile:  </span><br><span class=\"line\">        <span class=\"keyword\">break</span>  <span class=\"comment\"># 序列结束  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"># 读取图像  </span></span><br><span class=\"line\">    image = cv2.imread(imagefile, cv2.IMREAD_COLOR)  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"># 调用跟踪方法  </span></span><br><span class=\"line\">    region, confidence = tracker.track(image)  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"># 向VOT环境报告结果  </span></span><br><span class=\"line\">    handle.report(region, confidence)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>把<code>vot.py</code>放到跟踪器python文件可以import的目录中<br>从site-package里import的vot缺一点东西，官方GitHub提供了另一份<code>vot.py</code>文件<a href=\"https://github.com/votchallenge/integration/tree/master/python\">integration&#x2F;python at master · votchallenge&#x2F;integration</a>，可能就是想让我们本地导入的。</p>\n</li>\n<li><p>使用test指令查看是否能正常运行<br>如果上面配置都没毛病，运行下面的指令是不会出错的，可以检验一下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vot test PLAT -g</span><br></pre></td></tr></table></figure>\n<p>记得在workspace目录下运行</p>\n</li>\n</ol>\n<h3 id=\"评估模型—evaluate\"><a href=\"#评估模型—evaluate\" class=\"headerlink\" title=\"评估模型—evaluate\"></a>评估模型—evaluate</h3><p>我比较喜欢在workspace也就是工作区目录下运行，这样就不用加参数–workspace了，以下都是在workspace目录下运行的结果。</p>\n<p>看一下参数：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(trackers) PS D:\\CODE\\trackers\\vot_vot2018&gt; vot evaluate -h</span><br><span class=\"line\">usage: vot evaluate [-h] [--force] [--persist] [--workspace WORKSPACE] [--experiments EXPERIMENTS] trackers [trackers ...]</span><br><span class=\"line\"></span><br><span class=\"line\">positional arguments:</span><br><span class=\"line\">  trackers              Tracker identifiers</span><br><span class=\"line\"></span><br><span class=\"line\">options:</span><br><span class=\"line\">  -h, --help            show this help message and exit</span><br><span class=\"line\">  --force, -f           Force rerun of the entire evaluation</span><br><span class=\"line\">  --persist, -p         Persist execution even in case of an error</span><br><span class=\"line\">  --workspace WORKSPACE</span><br><span class=\"line\">                        Workspace path</span><br><span class=\"line\">  --experiments EXPERIMENTS</span><br><span class=\"line\">                        Filter specified experiments (comma separated names)</span><br></pre></td></tr></table></figure>\n\n<p>评估模型就是用自己的跟踪器跑几遍工作区的数据集，在sequence目录下，这个运行时间很长，不过可以去stack里改，下面会说。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vot evaluate PLAT</span><br></pre></td></tr></table></figure>\n\n<p>最后工作区里会出现results的文件目录，结构类似：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--results</span><br><span class=\"line\">  --PLAT</span><br><span class=\"line\">    --baseline</span><br><span class=\"line\">     --realtime</span><br><span class=\"line\">     --unsupervised</span><br></pre></td></tr></table></figure>\n<p>最后一级是几个要做的实验名，不同数据集可能不一样。历年的官网上可以下载挑战赛对应数据集benchmark模型的结果，结构也是差不多的，同样直接放在这个results目录下就行，后面对比时可以用到。</p>\n<p>另外要提一点，评估时如果检测到文件目录存在时不会执行的，建议重新评估时删掉原来的。</p>\n<p>在site-package的目录下，类似：<code>C:\\Users\\Administrator\\.conda\\envs\\trackers\\Lib\\site-packages\\vot\\stack</code>，能找到这样一些yaml配置文件，按需修改。<br>以vot2018&#x2F;shortterm为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">VOT-ST2018</span> <span class=\"string\">challenge</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">dataset:</span> <span class=\"string\">http://data.votchallenge.net/vot2018/main/description.json</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">http://www.votchallenge.net/vot2018/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">experiments:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">baseline:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">supervised</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">repetitions:</span> <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">skip_initialize:</span> <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">analyses:</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">supervised_average_ar</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">sensitivity:</span> <span class=\"number\">30</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">supervised_eao_score</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">low:</span> <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">high:</span> <span class=\"number\">356</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">supervised_eao_curve</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">realtime:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">supervised</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">realtime:</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">grace:</span> <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">repetitions:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">skip_initialize:</span> <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">analyses:</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">supervised_average_ar</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">sensitivity:</span> <span class=\"number\">30</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">supervised_eao_score</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">low:</span> <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">high:</span> <span class=\"number\">356</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">supervised_eao_curve</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">unsupervised:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">unsupervised</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">repetitions:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">analyses:</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">average_accuracy</span></span><br></pre></td></tr></table></figure>\n<p>里面包含了几个实验的相关参数，我修改了repetitions到3，这样可以快一些。</p>\n<h3 id=\"分析评估结果—analysis\"><a href=\"#分析评估结果—analysis\" class=\"headerlink\" title=\"分析评估结果—analysis\"></a>分析评估结果—analysis</h3><p>看一下参数：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(trackers) PS D:\\CODE\\trackers\\vot_vot2018&gt; vot analysis -h</span><br><span class=\"line\">usage: vot analysis [-h] [--workspace WORKSPACE] [--format &#123;json,yaml&#125;] [--name NAME] [trackers ...]</span><br><span class=\"line\"></span><br><span class=\"line\">positional arguments:</span><br><span class=\"line\">  trackers              Tracker identifiers</span><br><span class=\"line\"></span><br><span class=\"line\">options:</span><br><span class=\"line\">  -h, --help            show this help message and exit</span><br><span class=\"line\">  --workspace WORKSPACE</span><br><span class=\"line\">                        Workspace path</span><br><span class=\"line\">  --format &#123;json,yaml&#125;  Analysis output format</span><br><span class=\"line\">  --name NAME           Analysis output name</span><br></pre></td></tr></table></figure>\n\n<p>当上一步评估被正确执行并产生了results文件目录，就可以运行分析，只要有跟踪器在results目录下存在结果就行，所以&#x3D;&#x3D;直接拿官网结果放在目录下也能分析&#x3D;&#x3D;:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vot analysis PLAT --name PLAT </span><br></pre></td></tr></table></figure>\n<p>会生成analysis和cache目录</p>\n<h3 id=\"得到可视化报告—report\"><a href=\"#得到可视化报告—report\" class=\"headerlink\" title=\"得到可视化报告—report\"></a>得到可视化报告—report</h3><p>可以看到以下输入参数：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(trackers) PS D:\\CODE\\trackers\\vot_vot2018&gt; vot report -h     </span><br><span class=\"line\">usage: vot report [-h] [--workspace WORKSPACE] [--format &#123;html,latex,plots&#125;] [--name NAME] [--sequences SEQUENCES] [--experiments EXPERIMENTS] [trackers ...]</span><br><span class=\"line\"></span><br><span class=\"line\">positional arguments:</span><br><span class=\"line\">  trackers              Tracker identifiers</span><br><span class=\"line\"></span><br><span class=\"line\">options:</span><br><span class=\"line\">  -h, --help            show this help message and exit</span><br><span class=\"line\">  --workspace WORKSPACE</span><br><span class=\"line\">                        Workspace path</span><br><span class=\"line\">  --format &#123;html,latex,plots&#125;</span><br><span class=\"line\">                        Analysis output format</span><br><span class=\"line\">  --name NAME           Document output name</span><br><span class=\"line\">  --sequences SEQUENCES</span><br><span class=\"line\">                        Filter specified sequences (comma separated names)</span><br><span class=\"line\">  --experiments EXPERIMENTS</span><br><span class=\"line\">                        Filter specified experiments (comma separated names)</span><br></pre></td></tr></table></figure>\n\n<p>分析得到的analysis目录下json文件看不明白，所以还是得换成图像展示，这就用到了report</p>\n<p>report可以生成单个或多个模型的报告，如果是多个模型会在一起比较。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vot report SiamRPN PLAT SiamFC KCF RCO LADCF ECO DeepCSRDCF</span><br></pre></td></tr></table></figure>\n<p>会出现report目录以及目录下的html文件</p>\n<h2 id=\"Pysot-Toolkit\"><a href=\"#Pysot-Toolkit\" class=\"headerlink\" title=\"Pysot-Toolkit\"></a>Pysot-Toolkit</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$env:PYTHONPATH</span> = <span class=\"string\">&quot;D:/CODE/trackers/pysot-toolkit;<span class=\"variable\">$env:PYTHONPATH</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果在linux&#x2F;macOS就是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PYTHONPATH=<span class=\"string\">&#x27;D:/CODE/trackers/pysot-toolkit&#x27;</span>:<span class=\"variable\">$PYTHONPATH</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ax.grid(b=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"comment\"># matplotib版本更新，从 3.5 版开始 `b` 这个关键字被移除，改成下面这个</span></span><br><span class=\"line\">ax.grid(<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<p>安装装 <strong>MiKTeX</strong>（体积小、按需下载）或 <strong>TeX Live</strong>（完整、体积大），用来显示绘图结果。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cmgl4i0mn0002zovd38cx1kr9","category_id":"cmgl4i0ms0007zovdc6r42okx","_id":"cmgl4i0n2000fzovd08vh9nle"},{"post_id":"cmgl4i0mr0005zovdc8cgc3eq","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0n6000mzovdafjzbtb1"},{"post_id":"cmgl4i0mr0005zovdc8cgc3eq","category_id":"cmgl4i0n1000dzovdhz2qhkeh","_id":"cmgl4i0n6000ozovd0rs26lux"},{"post_id":"cmgl4i0n4000izovdhe9mcfmf","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0n7000rzovdh8wp12qs"},{"post_id":"cmgl4i0n4000izovdhe9mcfmf","category_id":"cmgl4i0n1000dzovdhz2qhkeh","_id":"cmgl4i0n8000tzovde2xiad8w"},{"post_id":"cmgl4i0ml0001zovd5at70ayg","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0n9000wzovd7e4s99ow"},{"post_id":"cmgl4i0ml0001zovd5at70ayg","category_id":"cmgl4i0n3000hzovd4uqd9yil","_id":"cmgl4i0n9000yzovd9irf5xzb"},{"post_id":"cmgl4i0ms0006zovd1nv2dk98","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0na0011zovd5kle0c5h"},{"post_id":"cmgl4i0ms0006zovd1nv2dk98","category_id":"cmgl4i0n1000dzovdhz2qhkeh","_id":"cmgl4i0nb0013zovddx4x5p2u"},{"post_id":"cmgl4i0mt0008zovd64sogaid","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0nc0016zovd05os7oh9"},{"post_id":"cmgl4i0mt0008zovd64sogaid","category_id":"cmgl4i0n1000dzovdhz2qhkeh","_id":"cmgl4i0nd0018zovd7p8hguyk"},{"post_id":"cmgl4i0mz0009zovdeak26lzy","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0nf001bzovd3yes4bjy"},{"post_id":"cmgl4i0mz0009zovdeak26lzy","category_id":"cmgl4i0n1000dzovdhz2qhkeh","_id":"cmgl4i0nn001dzovdf2gi1it9"},{"post_id":"cmgl4i0n0000bzovd5huo4jwt","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0no001gzovd42xtcrzb"},{"post_id":"cmgl4i0n0000bzovd5huo4jwt","category_id":"cmgl4i0na0010zovddk3jetrd","_id":"cmgl4i0np001izovdcb6c2yuc"},{"post_id":"cmgl4i0nb0014zovd30n9aj4b","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0nq001lzovd21ia6uqj"},{"post_id":"cmgl4i0nb0014zovd30n9aj4b","category_id":"cmgl4i0n3000hzovd4uqd9yil","_id":"cmgl4i0ns001nzovd9zehbkwx"},{"post_id":"cmgl4i0mo0003zovddllvc9f6","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0nt001qzovd06v20evx"},{"post_id":"cmgl4i0mo0003zovddllvc9f6","category_id":"cmgl4i0na0010zovddk3jetrd","_id":"cmgl4i0nu001szovdg6dn9brm"},{"post_id":"cmgl4i0nc0017zovda9x48ai7","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0nu001uzovdh10f86xk"},{"post_id":"cmgl4i0nc0017zovda9x48ai7","category_id":"cmgl4i0n3000hzovd4uqd9yil","_id":"cmgl4i0nv001xzovd4ehr262z"},{"post_id":"cmgl4i0n1000czovdd1nyfuo1","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0nx001zzovd7kb9558j"},{"post_id":"cmgl4i0n1000czovdd1nyfuo1","category_id":"cmgl4i0n1000dzovdhz2qhkeh","_id":"cmgl4i0ny0022zovd12p71gc2"},{"post_id":"cmgl4i0ng001czovdd6p50enf","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0o30024zovdfpf7hcy1"},{"post_id":"cmgl4i0ng001czovdd6p50enf","category_id":"cmgl4i0n1000dzovdhz2qhkeh","_id":"cmgl4i0o40027zovdaraqg6l2"},{"post_id":"cmgl4i0nn001ezovdg8f06mwa","category_id":"cmgl4i0ms0007zovdc6r42okx","_id":"cmgl4i0o50029zovdbssgacd2"},{"post_id":"cmgl4i0n2000ezovd75bz8sp7","category_id":"cmgl4i0no001fzovddzs30qos","_id":"cmgl4i0o5002czovd25erddd5"},{"post_id":"cmgl4i0np001jzovd1m7z8gkt","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0o6002ezovd6rd7b1oo"},{"post_id":"cmgl4i0np001jzovd1m7z8gkt","category_id":"cmgl4i0na0010zovddk3jetrd","_id":"cmgl4i0o7002gzovdge0jgxlc"},{"post_id":"cmgl4i0nr001mzovd8ock37q7","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0o7002hzovd9o3p17ok"},{"post_id":"cmgl4i0nr001mzovd8ock37q7","category_id":"cmgl4i0n1000dzovdhz2qhkeh","_id":"cmgl4i0o8002jzovdafcicj23"},{"post_id":"cmgl4i0n3000gzovdbrfhb7xv","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0o8002kzovdfpahce7y"},{"post_id":"cmgl4i0n3000gzovdbrfhb7xv","category_id":"cmgl4i0na0010zovddk3jetrd","_id":"cmgl4i0o8002mzovd2owd5chp"},{"post_id":"cmgl4i0ns001ozovdddxpdl8p","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0o8002nzovdhieg1qy7"},{"post_id":"cmgl4i0ns001ozovdddxpdl8p","category_id":"cmgl4i0na0010zovddk3jetrd","_id":"cmgl4i0o9002pzovd849c3bj7"},{"post_id":"cmgl4i0n4000jzovd3lm30cpy","category_id":"cmgl4i0ns001pzovd19hy7ftd","_id":"cmgl4i0o9002qzovd10888jeh"},{"post_id":"cmgl4i0n5000kzovd9or7cuzf","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0o9002szovd202703ff"},{"post_id":"cmgl4i0n5000kzovd9or7cuzf","category_id":"cmgl4i0na0010zovddk3jetrd","_id":"cmgl4i0o9002tzovd5dd4dnb6"},{"post_id":"cmgl4i0nx0021zovd6c6r4xji","category_id":"cmgl4i0ns001pzovd19hy7ftd","_id":"cmgl4i0oa002vzovd39h5bw1l"},{"post_id":"cmgl4i0n6000nzovd4tvfeb7h","category_id":"cmgl4i0nx0020zovdf9gd2pns","_id":"cmgl4i0ob002wzovdhd6j2o11"},{"post_id":"cmgl4i0o30025zovd7pvb5og8","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0ob002yzovdbui8bqff"},{"post_id":"cmgl4i0o30025zovd7pvb5og8","category_id":"cmgl4i0na0010zovddk3jetrd","_id":"cmgl4i0oc002zzovdardif18s"},{"post_id":"cmgl4i0n6000pzovdbknp2xm5","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0oc0031zovd7mut0is6"},{"post_id":"cmgl4i0n6000pzovdbknp2xm5","category_id":"cmgl4i0o40026zovdhwz0ht7j","_id":"cmgl4i0oc0032zovd6dpsamj3"},{"post_id":"cmgl4i0o40028zovdflzy5nlt","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0oc0034zovd5uei34yy"},{"post_id":"cmgl4i0o40028zovdflzy5nlt","category_id":"cmgl4i0n1000dzovdhz2qhkeh","_id":"cmgl4i0oc0035zovdbxih8j8n"},{"post_id":"cmgl4i0o5002azovdasfw22hc","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0od0037zovdek9yfjmo"},{"post_id":"cmgl4i0o5002azovdasfw22hc","category_id":"cmgl4i0n1000dzovdhz2qhkeh","_id":"cmgl4i0oe0038zovda548grmc"},{"post_id":"cmgl4i0n7000szovdd893akto","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0oe0039zovddkt0an7c"},{"post_id":"cmgl4i0n7000szovdd893akto","category_id":"cmgl4i0o40026zovdhwz0ht7j","_id":"cmgl4i0oe003bzovd7e8e1bxl"},{"post_id":"cmgl4i0o6002dzovd6vw132jg","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0of003czovd264e3ed5"},{"post_id":"cmgl4i0o6002dzovd6vw132jg","category_id":"cmgl4i0o40026zovdhwz0ht7j","_id":"cmgl4i0of003dzovdgsabepmk"},{"post_id":"cmgl4i0n8000uzovd5x9p1ncg","category_id":"cmgl4i0o7002fzovd4zqz8d9i","_id":"cmgl4i0of003ezovd49vaandh"},{"post_id":"cmgl4i0n9000xzovd332gfwxq","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0of003fzovdeq1qgpq3"},{"post_id":"cmgl4i0n9000xzovd332gfwxq","category_id":"cmgl4i0o40026zovdhwz0ht7j","_id":"cmgl4i0of003gzovdc1vuh6o6"},{"post_id":"cmgl4i0na000zzovdhm8o044e","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0of003hzovd6neb2rq5"},{"post_id":"cmgl4i0na000zzovdhm8o044e","category_id":"cmgl4i0o40026zovdhwz0ht7j","_id":"cmgl4i0of003izovd8jdn4una"},{"post_id":"cmgl4i0nb0012zovd1frf20fi","category_id":"cmgl4i0no001fzovddzs30qos","_id":"cmgl4i0of003jzovd66m106pw"},{"post_id":"cmgl4i0nd0019zovd6sljguu4","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0of003kzovd3wcwe8dr"},{"post_id":"cmgl4i0nd0019zovd6sljguu4","category_id":"cmgl4i0o40026zovdhwz0ht7j","_id":"cmgl4i0of003lzovd4hege2r1"},{"post_id":"cmgl4i0no001hzovdb3684d3m","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0of003mzovd4gemcy6w"},{"post_id":"cmgl4i0no001hzovdb3684d3m","category_id":"cmgl4i0o40026zovdhwz0ht7j","_id":"cmgl4i0of003nzovd34lsax7g"},{"post_id":"cmgl4i0nt001rzovdfcxpdtz1","category_id":"cmgl4i0o7002fzovd4zqz8d9i","_id":"cmgl4i0of003ozovd5hsp9ds0"},{"post_id":"cmgl4i0nu001tzovd082u7204","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0of003pzovd03c83fsm"},{"post_id":"cmgl4i0nu001tzovd082u7204","category_id":"cmgl4i0o40026zovdhwz0ht7j","_id":"cmgl4i0of003qzovd2gbc3ogu"},{"post_id":"cmgl4i0nv001wzovd3jg15mt2","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0of003rzovdflghfsr8"},{"post_id":"cmgl4i0nv001wzovd3jg15mt2","category_id":"cmgl4i0o40026zovdhwz0ht7j","_id":"cmgl4i0of003szovdclvc8vlj"},{"post_id":"cmgl4i0nw001yzovdauwge1h3","category_id":"cmgl4i0mp0004zovd3wdr93bo","_id":"cmgl4i0of003tzovdd847bsnf"},{"post_id":"cmgl4i0nw001yzovdauwge1h3","category_id":"cmgl4i0oc0036zovd4ohy02zj","_id":"cmgl4i0og003uzovd628edezk"},{"post_id":"cmgl4i0o30023zovdaxr6af09","category_id":"cmgl4i0oe003azovdh5x1b4v5","_id":"cmgl4i0og003vzovd3xpq7ve0"}],"PostTag":[],"Tag":[]}}